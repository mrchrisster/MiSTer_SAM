#!/bin/bash
# Game List Editor

if [ -f /media/fat/Scripts/MiSTer_SAM_on.sh ]; then
	source /media/fat/Scripts/MiSTer_SAM_on.sh --source-only
fi


init_vars
init_data


# Change corelist to use spaces
corelist="$(echo ${corelist} | tr ',' ' ')"


# Setting up folders
mkdir -p "${mrsampath}"/.SAMcount
mkdir -p /tmp/.SAMlist
mkdir -p "${misterpath}"/Scripts/SAM_GameLists


function samedit_instructions() {
dialog --clear --ascii-lines --no-cancel \
--backtitle "Super Attract Mode" --title "SAM Game List Editor" \
--msgbox "The following editor will let you exlude any number of games from your game list.
All lines with an indent (a space in the beginning) will be put into an exclusion list. \n 
\n
With a Joypad, simply use the top of the four buttons to indent a line. \n
When you are finished, push the bottom of the four buttons and then the right button to confirm. \n
\n
On a keyboard, you can use the Tab key and then push F10 to exit." 0 0
	clear
	samedit_menu
}



function samedit_menu() {
	dialog --clear --no-cancel --ascii-lines --no-tags \
	--backtitle "Super Attract Mode" --title "[ MAIN MENU ]" \
	--menu "Use the arrow keys and enter \nor the d-pad and A button" 0 0 0 \
	Edit "Edit Exclusion Lists for cores" \
	RegAll "Regenerate file lists" 2>"/tmp/.SAMmenu"
	
	menuresponse=$(<"/tmp/.SAMmenu")
	clear
	parse_cmd ${menuresponse}
	
}

function samedit_cores() {
	declare -a menulist=()
	for core in ${corelist}; do
		menulist+=( "${core^^}" )
		menulist+=( "${CORE_PRETTY[${core,,}]} Game List Editor" )
	done
	echo $core
	dialog --clear --no-cancel --ascii-lines --no-tags \
	--backtitle "Super Attract Mode" --title "[ EXCLUSION EDITOR ]" \
	--menu "Which system?" 0 0 0 \
	"${menulist[@]}" \
	Back 'Previous menu' 2>"/tmp/.SAMmenu"
	menuresponse=$(<"/tmp/.SAMmenu")
	clear
	parse_cmd ${menuresponse}
}


function samedit_regall() {
	delete_gl
	sync
	for core in ${corelist}; do
		nextcore="${core}"
		reg_corelist
	done
}

function delete_gl() {
	# In case of issues, reset game lists

	there_can_be_only_one
	if [ -d "/media/fat/Scripts/SAM_GameLists" ]; then
		echo "Deleting MiSTer_SAM Gamelist folder"
		rm -rf "/media/fat/Scripts/SAM_GameLists"
	fi
	
	if [ -d "/media/fat/Scripts/.MiSTer_SAM/.SAMcount" ]; then
		rm -rf "/media/fat/Scripts/.MiSTer_SAM/.SAMcount"
	fi

}



function reg_corelist() { # next_core (core)


#Setting up file lists

gamelist="/media/fat/Scripts/SAM_GameLists/${nextcore}_gamelist.txt"
excludelist="/media/fat/Scripts/SAM_GameLists/${nextcore}_excludelist.txt"
countpath="${mrsampath}/.SAMcount"
romlist="${misterpath}/Scripts/SAM_GameLists/${nextcore,,}_gamelist.txt"
romlistzip="${misterpath}/Scripts/SAM_GameLists/${nextcore,,}_gamelist_zipped.txt"
romlistziptmp="/tmp/.SAMlist/${nextcore,,}_gamelist_zipped.txt"
romlisttmp="/tmp/.SAMlist/${nextcore,,}_gamelist.txt"
excludefiles="${misterpath}/Scripts/SAM_GameLists/${nextcore,,}_excludelist.txt"

echo "Creating ${core^^} game list..."

# No need for arcade core
corelist=$(echo "$corelist" | sed "s/arcade//" | tr -s ' ')

# Mister SAM tries to determine how the user has set up their rom collection. There are 4 possible cases:
# 1. Roms are all unzipped
# 2. Roms are in one big zip archive - like Everdrive
# 3. Roms are zipped individually
# 4. There are some zipped roms and some unzipped roms in the same dir 
							



	# Simple case: We have unzipped roms. Pretty straight forward.
	function use_roms() {
		
		# Find Roms
		function find_roms() {
			if [ "${samquiet,,}" == "no" ]; then echo " Executing Game search in Directory."; fi
			find "${CORE_PATH[${nextcore,,}]}" -type d \( -iname *BIOS* ${fldrex} \) -not -path '*/.*' -prune -false -o -type f -iname "*.${CORE_EXT[${nextcore,,}]}" > ${romlist}
			cp "${romlist}" "${romlisttmp}" &>/dev/null
		}
		
		#Create list
		if [ ! -f "${romlist}" ]; then
			find_roms
		fi
		
		#If folder changed, make new list
		if [ "${CORE_PATH[${nextcore,,}]}" != "$(cat ${romlist} |  head -1 | awk -F "/" 'BEGIN { OFS = "/" } {print $1,$2,$3,$4,$5}')" ]; then
			if [ "${samquiet,,}" == "no" ]; then echo " Folder changed, making new list."; fi
			find_roms
		fi
		
		#If rom doesn't exist
		if [ ! -f "$(cat ${romlist} |  head -1)" ]; then
			if [ "${samquiet,,}" == "no" ]; then echo " File doesn't exist, making new list."; fi
			find_roms
		fi
		
		#Delete played game from list	
		if [ -s "${romlisttmp}" ]; then
			
			#Pick the actual game
			rompath="$(cat ${romlisttmp} | shuf --head-count=1 --random-source=/dev/urandom)"
			
			#Make sure file exists since we're reading from a static list
			if [ ! -f "${rompath}" ]; then
				find_roms
			fi
			
			if [ "${norepeat,,}" == "yes" ]; then
				awk -vLine="$rompath" '!index($0,Line)' "${romlisttmp}"  > /tmp/.SAMlist/tmpfile && mv /tmp/.SAMlist/tmpfile "${romlisttmp}"
			fi
		else
			#Repopulate list
			cp "${romlist}" "${romlisttmp}" &>/dev/null
		fi
			
		romname=$(basename "${rompath}")
	}				  
	
	# Some cores don't use zips, they might use chds for example - get on with it					
	if [ "${CORE_ZIPPED[${nextcore,,}],,}" == "no" ]; then
		if [ "${samquiet,,}" == "no" ]; then echo " ${nextcore^^} does not use ZIPs."; fi
		use_roms
	
	# We might be using ZIPs
	else
	
	
########## Check how many ZIP and ROM files in core path	(Case 4)
	
	
		if [ ! -f "${countpath}/${nextcore}_zipcount" ]; then
			echo " Please wait... Creating game list for the first time."
			zipcount=$(find "${CORE_PATH[${nextcore,,}]}" -type f -iname "*.zip" -print | wc -l)
			echo ${zipcount} > "${countpath}/${nextcore}_zipcount"
		else
			zipcount=$(cat "${countpath}/${nextcore}_zipcount")
		fi
		
		if [ ! -f "${countpath}/${nextcore}_romcount" ]; then
			romcount=$(find "${CORE_PATH[${nextcore,,}]}" -type d \( -iname *BIOS* ${fldrex} \) -prune -false -o -type f -iname "*.${CORE_EXT[${nextcore,,}]}" -print | wc -l)
			echo ${romcount} > "${countpath}/${nextcore}_romcount"
		else
			romcount=$(cat "${countpath}/${nextcore}_romcount")
		fi

		#How many roms and zips did we find
		if [ "${samquiet,,}" == "no" ]; then echo " Found ${zipcount} zip files in ${CORE_PATH[${nextcore,,}]}."; fi
		if [ "${samquiet,,}" == "no" ]; then echo " Found ${romcount} ${CORE_EXT[${nextcore,,}]} files in ${CORE_PATH[${nextcore,,}]}."; fi		

		#Compare roms vs zips
		if [ "${zipcount}" -gt 0 ] && [ "${romcount}" -gt 0 ] && [ "${usezip,,}" == "yes" ]; then
	

	
############ Zip to Rom Compare completed #############


								
		#We've found ZIPs AND ROMs AND we're using zips
		if [ "${samquiet,,}" == "no" ]; then echo " Both ROMs and ZIPs found!"; fi

			#We found at least one large ZIP file - use it (Case 2)
			if [ $(find "${CORE_PATH[${nextcore,,}]}" -maxdepth 1 -xdev -type f -size +300M \( -iname "*.zip" \) -print | wc -l) -gt 0 ]; then
				if [ "${samquiet,,}" == "no" ]; then echo " Using largest zip in folder ( < 300MB+ )"; fi								

				function findzip_roms() {
					#Prefer Everdrive zips if found. To avoid bios zip files, let's make minimum file size 15MB (Colecovision is 17Mb). Select this zip if found.
				
					if [ -n "$(find "${CORE_PATH[${nextcore,,}]}" -maxdepth 1 -xdev -size +15M -type f -iname "*.zip" -iname "*${CORE_EVERDRIVE[${nextcore,,}]}*" -printf '%s %p\n' | sort -n | tail -1 | cut -d ' ' -f 2- )" ]; then
						romfind=$(find "${CORE_PATH[${nextcore,,}]}" -maxdepth 1 -xdev -size +15M -type f -iname "*.zip" -iname "*${CORE_EVERDRIVE[${nextcore,,}]}*" -printf '%s %p\n' | sort -n | tail -1 | cut -d ' ' -f 2- )
					else
						#Find biggest zip file over 300MB. If system name is in file name, use that file
						romfind=$(find "${CORE_PATH[${nextcore,,}]}" -maxdepth 1 -xdev -size +300M -type f -iname "*.zip" -printf '%s %p\n' | sort -n | tail -1 | cut -d ' ' -f 2- )
					fi
					
					if [ "${samquiet,,}" == "no" ]; then echo " Searching for files with extension ."${CORE_EXT[${nextcore,,}]}" in $romfind"; fi

					# Use partun to create zip game list
					"${mrsampath}/partun" "${romfind}" -l -e ${fldrexzip::-1} -f .${CORE_EXT[${nextcore,,}]} > "${romlistzip}"
					
					#We picked the wrong zip, try another one (head -1)
					if [ ! -s "${romlistzip}" ]; then
						romfind=$(find "${CORE_PATH[${nextcore,,}]}" -maxdepth 1 -xdev -size +300M -type f -iname "*.zip" -printf '%s %p\n' | sort -n | head -1 | cut -d ' ' -f 2- )
						if [ "${samquiet,,}" == "no" ]; then echo " Trying new file: $romfind"; fi
						"${mrsampath}/partun" "${romfind}" -l -e ${fldrexzip::-1} -f .${CORE_EXT[${nextcore,,}]} > "${romlistzip}"
					fi
					
					# Add zip location to file and delete roms with wrong extension (eg partuns's filter won't filter out ".gbc" extension when ".gb" is given in filter options) 
					awk -v prefix="${romfind}/" '{print prefix $0}' "${romlistzip}" > /tmp/.SAMlist/tmpfile && mv /tmp/.SAMlist/tmpfile "${romlistzip}"
					grep ".*\.${CORE_EXT[${nextcore,,}]}$" "${romlistzip}" > /tmp/.SAMlist/tmpfile && mv /tmp/.SAMlist/tmpfile "${romlistzip}"
					cp "${romlistzip}" "${romlistziptmp}" &>/dev/null
				}			
				
				#Create a list of all valid roms in zip
				if [ ! -s "${romlistzip}" ]; then
					findzip_roms
				fi		
				
				#If folder changed, make new list
				if [ "${CORE_PATH[${nextcore,,}]}" != "$(cat "${romlistzip}" | awk -F".zip" '{print $1}/.zip/' | head -1).zip" ]; then
					if [ "${samquiet,,}" == "no" ]; then echo " Zip doesn't exist anymore, making new list."; fi
					findzip_roms
				fi
					
				#Check if zip still exists
				if [ "${romfind}" != "$(cat "${romlistzip}" | awk -F".zip" '{print $1}/.zip/' | head -1).zip" ]; then
					findzip_roms
				fi
				
				if [ -s ${romlistziptmp} ]; then
				
					#Pick the actual game
					romselect="$(cat ${romlistziptmp} | shuf --head-count=1 --random-source=/dev/urandom)"		
					if [ "${samquiet,,}" == "no" ]; then echo " File selected: ${romselect}"; fi						
					
					rompath="${romselect}"
					
					#Delete rom from list so we don't have repeats
					if [ "${norepeat,,}" == "yes" ]; then
						awk -vLine="$romselect" '!index($0,Line)' "${romlistziptmp}"  > /tmp/.SAMlist/tmpfile && mv /tmp/.SAMlist/tmpfile "${romlistziptmp}"
					fi
				else
					#Repopulate list
					cp "${romlistzip}" "${romlistziptmp}" &>/dev/null
				fi
								
				romname=$(basename "${rompath}")
				
			# We see more zip files than ROMs, we're probably dealing with individually zipped roms (Case 3)
			elif [ ${zipcount} -gt ${romcount} ]; then
				if [ "${samquiet,,}" == "no" ]; then echo " Fewer ROMs - using ZIPs."; fi
				romfind=$(find "${CORE_PATH[${nextcore,,}]}" -type f -iname "*.zip" | shuf --head-count=1 --random-source=/dev/urandom)
				rompath="${romfind}/$("${mrsampath}/partun" "${romfind}" -l -r -e ${fldrexzip::-1} -f ${CORE_EXT[${nextcore,,}]})"
				romname=$(basename "${rompath}")
					

				
			# I guess we use the ROMs! (Case 1)
			else
				if [ "${samquiet,,}" == "no" ]; then echo " Using ROMs."; fi
				use_roms
			fi

		# Found no ZIPs or we're ignoring them
		
		elif [ $zipcount = 0 ] || [ "${usezip,,}" == "no" ]; then
			if [ "${samquiet,,}" == "no" ]; then echo " Found no zips or ignoring them."; fi
			use_roms

		# Use the ZIP Luke!
		else
			if [ "${samquiet,,}" == "no" ]; then echo " Using zip"; fi
			romfind=$(find "${CORE_PATH[${nextcore,,}]}" -xdev -type f -iname "*.zip" | shuf --head-count=1 --random-source=/dev/urandom)
			rompath="${romfind}/$("${mrsampath}/partun" "${romfind}" -l -r -e ${fldrexzip::-1} -f ${CORE_EXT[${nextcore,,}]})"
			romname=$(basename "${rompath}")
		fi
		

	fi
	
	
	# Sanity check that we have a valid rom in var
	if [[ ${rompath} != *"${CORE_EXT[${nextcore,,}]}"* ]]; then
		echo "Error. Something went wrong." 
		return
	fi

	

		

}

function edit_core() {
# Start editor
#
#Setting up file lists


gamelist="/media/fat/Scripts/SAM_GameLists/${nextcore}_gamelist.txt"


mcedit "${gamelist}"
cat "${gamelist}" | grep '^[[:blank:]]' | awk '$1=$1' > "${excludelist}"
while IFS= read -r line; do
    basename "$line"
done < "${excludelist}" > /tmp/tmpfile && mv /tmp/tmpfile "${excludelist}"

# Reset file by deleting indents/empty lines
cat "${gamelist}" | awk '$1=$1' | grep "\S" > /tmp/tmpfile && mv /tmp/tmpfile "${gamelist}"
# Delete lines
#cat "${gamelist}" | grep "\S" | grep -v '^[[:blank:]]' > /tmp/tmpfile && mv /tmp/tmpfile "${gamelist}"

}




function parse_cmd() {
	while [ ${#} -gt 0 ]; do
	case ${1,,} in
        back)
            samedit_menu
            ;;
        edit)
            samedit_cores
            ;;
        fds | gb | gbc | gba | genesis | gg | megacd | neogeo | nes | sms | snes | tgfx16 | tgfx16cd | psx)
        	nextcore=${1}
        	edit_core
            ;;
        regall)
			samedit_regall
            ;;

    esac
    shift
	done
}


samedit_instructions


