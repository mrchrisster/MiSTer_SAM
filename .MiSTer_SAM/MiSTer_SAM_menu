#!/bin/bash

# https://github.com/mrchrisster/MiSTer_SAM/
# Copyright (c) 2021 by mrchrisster and Mellified

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# Description
# This cycles through arcade and console cores periodically
# Games are randomly pulled from their respective folders

# ======== Credits ========
# Original concept and implementation: mrchrisster
# Additional development and script layout: Mellified and Paradox
#
# Thanks for the contributions and support:
# pocomane, kaloun34, redsteakraw, RetroDriven, woelper, LamerDeluxe, InquisitiveCoder, Sigismond
# tty2oled improvements by venice

source /media/fat/Scripts/MiSTer_SAM_on.sh --source-only


function parse_cmd() {
	if [ ${#} -gt 2 ]; then # We don't accept more than 2 parameters
		sam_help
	elif [ ${#} -eq 0 ]; then # No options - show the pre-menu
		sam_menu
	else
		# If we're given a core name, we need to set it first
		for arg in ${@,,}; do
			case ${arg} in
			arcade | atari2600 | atari5200 | atari7800 | atarilynx | amiga | c64 | fds | gb | gbc | gba | genesis | gg | megacd | neogeo | nes | s32x | sms | snes | tgfx16 | tgfx16cd | psx)
				echo " ${CORE_PRETTY[${arg}]} selected!"
				nextcore="${arg}"
				disablecoredel=1
				;;
			esac
		done

		# If the one command was a core then we need to call in again with "start" specified
		if [ ${nextcore} ] && [ ${#} -eq 1 ]; then
			# Move cursor up a line to avoid duplicate message
			echo -n -e "\033[A"
			# Re-enter this function with start added
			parse_cmd ${nextcore} start
			return
		fi

		while [ ${#} -gt 0 ]; do
			case "${1,,}" in
			default) # sam_update relaunches itself
				sam_update autoconfig
				break
				;;
			--sourceonly | --create-gamelists)
				break
				;;
			autoconfig | defaultb)
				tmux kill-session -t MCP &>/dev/null
				there_can_be_only_one
				sam_update
				mcp_start
				sam_enable
				break
				;;
			bootstart) # Start as from init
				env_check ${1}
				# Sleep before startup so clock of Mister can synchronize if connected to the internet.
				# We assume most people don't have RTC add-on so sleep is default.
				# Only start MCP on boot
				sleep ${bootsleep}
				mcp_start
				break
				;;
			start | restart) # Start as a detached tmux session for monitoring
				sam_start
				break
				;;
			start_real) # Start SAM immediately
				loop_core ${nextcore}
				break
				;;
			skip | next) # Load next game - stops monitor
				echo " Skipping to next game..."
				tmux send-keys -t SAM C-c ENTER
				# break
				;;
			stop) # Stop SAM immediately		
				kill_all_sams
				sam_exit 0
				break
				;;
			update) # Update SAM
				sam_cleanup
				sam_update
				break
				;;
			enable) # Enable SAM autoplay mode
				env_check ${1}
				sam_enable
				break
				;;
			disable) # Disable SAM autoplay
				sam_cleanup
				sam_disable
				break
				;;
			monitor) # Warn user of changes
				sam_monitor
				break
				;;
			playcurrent)
				sam_exit 2
				break
				;;
			startmonitor | sm)
				sam_start
				sam_monitor
				break
				;;
			amiga | arcade | atari2600 | atari5200 | atari7800 | atarilynx | c64 | fds | gb | gbc | gba | genesis | gg | megacd | neogeo | nes | s32x | sms | snes | tgfx16 | tgfx16cd | psx)
				: # Placeholder since we parsed these above
				;;
			single)
				sam_singlemenu
				break
				;;
			utility)
				sam_utilitymenu
				break
				;;
			autoplay)
				sam_autoplaymenu
				break
				;;
			favorite)
				mglfavorite
				break
				;;
			reset)
				sam_resetmenu
				break
				;;
			config)
				sam_configmenu
				break
				;;
			back)
				sam_menu
				break
				;;
			menu)
				sam_menu
				break
				;;
			cancel) # Exit
				echo " It's pitch dark; You are likely to be eaten by a Grue."
				inmenu=0
				break
				;;
			deleteall)
				deleteall
				break
				;;
			exclude)
				samedit_excltags
				break
				;;
			settings)
				sam_settings_1
				break
				;;
			include)
				samedit_include
				break
				;;
			gamemode)
				sam_gamemodemenu
				break
				;;
			bgm)
				sam_bgmmenu
				break
				;;
			gamelists)
				sam_gamelistmenu
				break
				;;
			creategl)
				creategl
				break
				;;
			deletegl)
				deletegl
				break
				;;
			help)
				sam_help
				break
				;;
			*)
				echo " ERROR! ${1} is unknown."
				echo " Try $(basename -- ${0}) help"
				echo " Or check the Github readme."
				break
				;;
			esac
			shift
		done
	fi
}



function sam_menu() {
	inmenu=1
	dialog --clear --ascii-lines --no-tags --ok-label "Select" --cancel-label "Exit" \
		--backtitle "Super Attract Mode" --title "[ Main Menu ]" \
		--menu "Use the arrow keys and enter \nor the d-pad and A button" 0 0 0 \
		Start "Start SAM now" \
		Startmonitor "Start SAM now and monitor (ssh)" \
		Skip "Skip game" \
		Stop "Stop SAM" \
		Update "Update SAM to latest" \
		Settings "Settings" \
		'' "" \
		Single "Single core selection" \
		Include "Single category selection" \
		Exclude "Exclude categories" \
		Gamemode "Game roulette" \
		Controller "Setup Controller" \
		Favorite "Copy current game to _Favorites folder" \
		Gamelists "Game Lists - Create or Delete" \
		Reset "Reset or uninstall SAM" \
		Autoplay "Autoplay Configuration" 2>"/tmp/.SAMmenu"
	
	opt=$?
	menuresponse=$(<"/tmp/.SAMmenu")
	clear
	
	if [ "$opt" != "0" ]; then
		exit
	else 
		parse_cmd ${menuresponse}
	fi

}

function sam_settings_1() {
				,

				cmd=(dialog --ok-label "Select" --cancel-label "Next" --separate-output --checklist "Corelist Config:" 0 0 0)
				options=(amiga "Show Amiga Games" ON
						 arcade "Show Arcade Games" ON
						 atari2600 "Show Atari 2600 Games" ON
						 atari5200 "Show Atari 5200 Games" ON
						 atari7800 "Show Atari7800 Games" ON
						 atarilynx "Show Atari Lynx Games" ON
						 c64 "Show Commodore 64 Games" ON
					 	 fds "Show Famicom Disk System Games" ON
					 	 gb "Show Gameboy Games" ON
						 gbc "Show Gameboy Color Games" ON
						 gba "Show Gameboy Advance Games" ON
						 genesis "Show Sega Genesis Games" ON
						 gg "Show Sega Game Gear Games" ON
						 megacd "Show Sega CD Games" ON
						 neogeo "Show NeoGeo Games" ON
						 nes "Show NES Games" ON
						 s32x "Show Sega 32X Games" ON
						 sms "Show Sega Master System Games" ON
						 snes "Show Super NES Games" ON
						 tgfx16 "Show Turbografx16 Games" ON
						 tgfx16cd "Show Turbografx16-CD Games" ON
						 psx "Show Sony Playstation Games" ON)
				result=$?
				choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
				clear
				case $result in
					 1) break ;;
					255) sam_settings_2
    			esac
    			declare -a corelistmenu
				for choice in $choices
				do
					case $choice in
						arcade)
							corelistmenu+=(arcade)
							;;
						amiga)
							corelistmenu+=(amiga)
							;;
						atari2600)
							corelistmenu+=(atari2600)
							;;
						atari5200)
							corelistmenu+=(atari5200)
							;;							
						atari7800)
							corelistmenu+=(atari7800)
							;;							
						atarilynx)
							corelistmenu+=(atarilynx)
							;;							
						c64)
							corelistmenu+=(c64)
							;;
						fds)
							corelistmenu+=(fds)
							;;
						gb)
							corelistmenu+=(gb)
							;;
						gbc)
							corelistmenu+=(gbc)
							;;							
						gba)
							corelistmenu+=(gba)
							;;							
						genesis)
							corelistmenu+=(genesis)
							;;							
						gg)
							corelistmenu+=(gg)
							;;	
						megacd)
							corelistmenu+=(megacd)
							;;
						neogeo)
							corelistmenu+=(neogeo)
							;;
						nes)
							corelistmenu+=(nes)
							;;
						s32x)
							corelistmenu+=(s32x)
							;;							
						sms)
							corelistmenu+=(sms)
							;;							
						snes)
							corelistmenu+=(snes)
							;;							
						tgfx16)
							corelistmenu+=(tgfx16)
							;;	
						tgfx16cd)
							corelistmenu+=(tgfx16cd)
							;;							
						psx)
							corelistmenu+=(psx)
							;;																		
					esac
				done
				echo "${corelistmenu[@]}" | tr ' ' ',' | tr -s ' '

}

function sam_settings_2() {
					cmd=(dialog --separate-output --checklist "Corelist Config:" 0 0 0)
				options=("0" "Manual Settings Editor (MiSTer_SAM.ini)" OFF
						 "1" "Show Arcade & Console Cores" OFF
						 "2" "Show Handheld Cores" OFF 
						 "3" "Show Computer Cores" OFF 
						 "4" "Show only Arcade and NeoGeo games" OFF 
						 "5" "Show Selection of cores 3rd gen - 5th gen" OFF
						 "6" "Enable TTY2OLED" OFF 
						 "7" "Enable Background Music Player" OFF 
						 "8" "Disable Background Music Player" OFF 
						 "9" "Use alternative core selection based on number of games" OFF)
				choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
				clear
				for choice in $choices; do
					case $choice in
						0)
							sam_configmenu
							;;
						1)
							console="arcade,atari2600,atari5200,atari7800,fds,genesis,megacd,neogeo,nes,s32x,sms,snes,tgfx16,tgfx16cd,psx,"
							;;
						2)
							handheld="gb,gbc,gba,gg,atarilynx,"
							;;
						3)
							computer="amiga,c64,"
							;;
						4)
							sed -i '/corelist=/c\corelist="arcade,neogeo"' /media/fat/Scripts/MiSTer_SAM.ini
							 dialog --clear --no-cancel --ascii-lines --colors \
								--backtitle "Super Attract Mode" --title "[ CCORELIST ]" \
								--msgbox "corelist="arcade,neogeo" updated in SAM's ini file." 0 0
							clear
							;;
						5)
							sed -i '/corelist=/c\corelist="amiga,arcade,fds,genesis,megacd,neogeo,nes,s32x,sms,snes,tgfx16,tgfx16cd,psx"' /media/fat/Scripts/MiSTer_SAM.ini
							dialog --clear --no-cancel --ascii-lines --colors \
								--backtitle "Super Attract Mode" --title "[ CCORELIST ]" \
								--msgbox "corelist="amiga,arcade,fds,genesis,megacd,neogeo,nes,s32x,sms,snes,tgfx16,tgfx16cd,psx"\n\n updated in SAM's ini file." 0 0
							;;
						6)
							sed -i '/ttyenable=/c\ttyenable=Yes' /media/fat/Scripts/MiSTer_SAM.ini
							;;
						7)
							if [ ! -f "/media/fat/Scripts/bgm.sh" ]; then
								echo " Installing BGM to Scripts folder"
								repository_url="https://github.com/wizzomafizzo/MiSTer_BGM"
								get_samstuff bgm.sh /tmp
								mv --force /tmp/bgm.sh /media/fat/Scripts/
							else
								echo " BGM script is installed already. Updating just in case..."
								echo -n "stop" | socat - UNIX-CONNECT:/tmp/bgm.sock 2>/dev/null
								kill -9 "$(ps -o pid,args | grep '[b]gm.sh' | awk '{print $1}' | head -1)" 2>/dev/null
								rm /tmp/bgm.sock 2>/dev/null
								repository_url="https://github.com/wizzomafizzo/MiSTer_BGM"
								get_samstuff bgm.sh /tmp
								mv --force /tmp/bgm.sh /media/fat/Scripts/
								echo " Resetting BGM now."
							fi
							echo " Updating MiSTer_SAM.ini to use Mute=Core"
							sed -i '/mute=/c\mute=Core' /media/fat/Scripts/MiSTer_SAM.ini
							/media/fat/Scripts/bgm.sh
							sync
							repository_url="https://github.com/mrchrisster/MiSTer_SAM"
							get_samstuff Media/80s.pls /media/fat/music
							[[ ! $(grep -i "bgm" /media/fat/Scripts/MiSTer_SAM.ini) ]] && echo "bgm=Yes" >> /media/fat/Scripts/MiSTer_SAM.ini
							sed -i '/bgm=/c\bgm=Yes' /media/fat/Scripts/MiSTer_SAM.ini
							#echo " All Done. Starting SAM now."
							dialog --clear --no-cancel --ascii-lines --colors \
							--backtitle "Super Attract Mode" --title "[ CCORELIST ]" \
							--msgbox "BGM successfully installed." 0 0
							#/media/fat/Scripts/MiSTer_SAM_on.sh start

							;;
						8)
							echo " Uninstalling BGM, please wait..."
							echo -n "stop" | socat - UNIX-CONNECT:/tmp/bgm.sock 2>/dev/null
							[[ -e /media/fat/Scripts/bgm.sh ]] && /media/fat/Scripts/bgm.sh stop
							[[ -e /media/fat/Scripts/bgm.sh ]] && rm /media/fat/Scripts/bgm.sh
							[[ -e /media/fat/music/bgm.ini ]] && rm /media/fat/music/bgm.ini
							rm /tmp/bgm.sock 2>/dev/null
							sed -i '/bgm.sh/d' ${userstartup}
							sed -i '/Startup BGM/d' ${userstartup}
							sed -i '/bgm=/c\bgm=No' /media/fat/Scripts/MiSTer_SAM.ini
							sed -i '/mute=/c\mute=No' /media/fat/Scripts/MiSTer_SAM.ini
							echo " Done."
							;;
						9)
							sed -i '/coreweight=/c\coreweight=Yes' /media/fat/Scripts/MiSTer_SAM.ini
							;;
					esac
				done
}


function sam_singlemenu() {
	declare -a menulist=()
	for core in ${corelistall}; do
		menulist+=("${core^^}")
		menulist+=("${CORE_PRETTY[${core}]} games only")
	done

	dialog --clear --ascii-lines --no-tags \
		--backtitle "Super Attract Mode" --title "[ Single System Select ]" \
		--menu "Which system?" 0 0 0 \
		"${menulist[@]}" 2>"/tmp/.SAMmenu"
	opt=$?
	menuresponse=$(<"/tmp/.SAMmenu")
	clear
	
	if [ "$opt" != "0" ]; then
		sam_menu
	else 
		parse_cmd ${menuresponse}
	fi

}

function sam_resetmenu() {
	inmenu=1
	dialog --clear --no-cancel --ascii-lines --no-tags \
		--backtitle "Super Attract Mode" --title "[ Reset ]" \
		--menu "Select an option" 0 0 0 \
		Deleteall "Reset/Delete all files" \
		Default "Reinstall SAM and enable Autostart" \
		Back 'Previous menu' 2>"/tmp/.SAMmenu"
	menuresponse=$(<"/tmp/.SAMmenu")
	clear

	samquiet "menuresponse: ${menuresponse}"
	parse_cmd ${menuresponse}
}

function sam_gamelistmenu() {
	inmenu=1
	dialog --clear --no-cancel --ascii-lines --colors \
		--backtitle "Super Attract Mode" --title "[ GAMELIST MENU ]" \
		--msgbox "Game Lists contain filenames that SAM can play for each core. \n\nThey get created automatically when SAM plays games. Here you can create or delete those lists." 0 0
	dialog --clear --no-cancel --ascii-lines --no-tags \
		--backtitle "Super Attract Mode" --title "[ GAMELIST MENU ]" \
		--menu "Select an option" 0 0 0 \
		CreateGL "Create all Game Lists" \
		DeleteGL "Delete all Game Lists" \
		Back 'Previous menu' 2>"/tmp/.SAMmenu"
	menuresponse=$(<"/tmp/.SAMmenu")
	clear

	samquiet  "menuresponse: ${menuresponse}"
	parse_cmd ${menuresponse}
}

function sam_autoplaymenu() {
	dialog --clear --no-cancel --ascii-lines --no-tags \
		--backtitle "Super Attract Mode" --title "[ Configure Autoplay ]" \
		--menu "Select an option" 0 0 0 \
		Enable "Enable Autoplay" \
		Disable "Disable Autoplay" \
		Back 'Previous menu' 2>"/tmp/.SAMmenu"
	menuresponse=$(<"/tmp/.SAMmenu")

	clear
	samquiet  "menuresponse: ${menuresponse}"
	parse_cmd ${menuresponse}
}

function sam_configmenu() {
	dialog --clear --ascii-lines --no-cancel \
		--backtitle "Super Attract Mode" --title "[ INI Settings ]" \
		--msgbox "Here you can configure the INI settings for SAM.\n\nUse TAB to switch between editing, the OK and Cancel buttons." 0 0

	dialog --clear --ascii-lines \
		--backtitle "Super Attract Mode" --title "[ INI Settings ]" \
		--editbox "${misterpath}/Scripts/MiSTer_SAM.ini" 0 0 2>"/tmp/.SAMmenu"

	if [ -s "/tmp/.SAMmenu" ] && [ "$(diff -wq "/tmp/.SAMmenu" "${misterpath}/Scripts/MiSTer_SAM.ini")" ]; then
		cp -f "/tmp/.SAMmenu" "${misterpath}/Scripts/MiSTer_SAM.ini"
		dialog --clear --ascii-lines --no-cancel \
			--backtitle "Super Attract Mode" --title "[ INI Settings ]" \
			--msgbox "Changes saved!" 0 0
	fi

	parse_cmd menu
}

function sam_gamemodemenu() {
	dialog --clear --no-cancel --ascii-lines \
		--backtitle "Super Attract Mode" --title "[ GAME ROULETTE ]" \
		--msgbox "In Game Roulette mode SAM selects games for you. \n\nYou have a pre-defined amount of time to play this game, then SAM will move on to play the next game. \n\nPlease do a cold reboot when done playing." 0 0
	dialog --clear --ascii-lines --no-tags \
		--backtitle "Super Attract Mode" --title "[ GAME ROULETTE ]" \
		--menu "Select an option" 0 0 0 \
		Roulette2 "Play a random game for 2 minutes. " \
		Roulette5 "Play a random game for 5 minutes. " \
		Roulette10 "Play a random game for 10 minutes. " \
		Roulette15 "Play a random game for 15 minutes. " \
		Roulette20 "Play a random game for 20 minutes. " \
		Roulette25 "Play a random game for 25 minutes. " \
		Roulette30 "Play a random game for 30 minutes. " \
		Roulettetimer "Play a random game for ${roulettetimer} secs (roulettetimer in MiSTer_SAM.ini). " 2>"/tmp/.SAMmenu"	
	
		opt=$?
		menuresponse=$(<"/tmp/.SAMmenu")
		
		if [ "$opt" != "0" ]; then
			sam_menu
		elif [ "${menuresponse}" == "Roulettetimer" ]; then
			gametimer=${roulettetimer}
			kill_all_sams
			sam_cleanup
			#tty_init
			checkgl
			mute=no
			listenmouse="No"
			listenkeyboard="No"
			listenjoy="No"
			loop_core	
		else
			timemin=${menuresponse//Roulette/}
			gametimer=$((timemin*60))
			kill_all_sams
			sam_cleanup
			#tty_init
			checkgl
			mute=no
			listenmouse="No"
			listenkeyboard="No"${ttydevice}
			listenjoy="No"
			loop_core
		fi
}

function samedit_include() {
	dialog --clear --no-cancel --ascii-lines --colors \
		--backtitle "Super Attract Mode" --title "[ CATEGORY SELECTION ]" \
		--msgbox "Play games from only one category.\n\n\Z1Please use Everdrive packs for this mode. \Zn \n\nSome categories (like country selection) will probably work with some other rompacks as well. \n\nMake sure you have game lists created for this mode." 0 0
	dialog --clear --ascii-lines --no-tags \
		--backtitle "Super Attract Mode" --title "[ CATEGORY SELECTION ]" \
		--menu "Only play games from the following categories" 0 0 0 \
		''"("'usa'")"'' "Only USA Games" \
		''"("'japan'")"'' "Only Japanese Games" \
		''"("'europe'")"'' "Only Europe games" \
		'shoot '"'"'em' "Only Shoot 'Em Ups" \
		'beat '"'"'em' "Only Beat 'Em Ups" \
		'role playing' "Only Role Playing Games" \
		pinball "Only Pinball Games" \
		platformers "Only Platformers" \
		'genre/fight' "Only Fighting Games" \
		trivia "Only Trivia Games" \
		sports "Only Sport Games" \
		racing "Only Racing Games" \
		hacks "Only Hacks" \
		translations "Only Translated Games" \
		homebrew "Only Homebrew" 2>"/tmp/.SAMmenu"

	opt=$?
	menuresponse=$(<"/tmp/.SAMmenu")
	clear

	if [ "$opt" != "0" ]; then
		sam_menu
	else
		echo "Please wait... getting things ready."
		declare -a corelist=()
		declare -a gamelists=()
		categ="${menuresponse}"
		# echo "${menuresponse}"
		# Delete all temporary Game lists
		if compgen -G "${gamelistpathtmp}/*_gamelist.txt" >/dev/null; then
			rm ${gamelistpathtmp}/*_gamelist.txt
		fi
		gamelists=($(find "${gamelistpath}" -name "*_gamelist.txt"))

		# echo ${gamelists[@]}
		for list in ${gamelists[@]}; do
			listfile=$(basename ${list})
			# awk -v category="$categ" 'tolower($0) ~ category' "${list}" > "${gamelistpathtmp}/${listfile}"
			grep -i "${categ}" "${list}" >"${tmpfile}"
			awk -F'/' '!seen[$NF]++' "${tmpfile}" >"${gamelistpathtmp}/${listfile}"
			[[ -s "${gamelistpathtmp}/${listfile}" ]] || rm "${gamelistpathtmp}/${listfile}"
		done

		corelist=$(find "${gamelistpathtmp}" -name "*_gamelist.txt" -exec basename \{} \; | cut -d '_' -f 1)

		dialog --clear --no-cancel --ascii-lines \
			--backtitle "Super Attract Mode" --title "[ CATEGORY SELECTION ]" \
			--msgbox "SAM will start now and only play games from the '${categ^^}' category.\n\nOn cold reboot, SAM will get reset automatically to play all games again. " 0 0
		kill_all_sams
		sam_prep
		#tty_init
		checkgl
		loop_core
	fi

}

function samedit_excltags() {
	excludetags="${gamelistpath}/.excludetags"
	
	function process_tag() {
		for core in ${corelist}; do
			[[ -f "${gamelistpathtmp}/${core}_gamelist.txt" ]] && rm "${gamelistpathtmp}/${core}_gamelist.txt"
			if [ "${gamelistpath}/${core}_gamelist.txt" ]; then
				grep -i "$categ" "${gamelistpath}/${core}_gamelist.txt" >>"${gamelistpath}/${core}_gamelist_exclude.txt"
			else
				grep -i "$categ" "${gamelistpath}/${core}_gamelist.txt" >"${gamelistpath}/${core}_gamelist_exclude.txt"
			fi
		done
	}
	
	if [ -f "${excludetags}" ]; then
		dialog --clear --no-cancel --ascii-lines \
		--backtitle "Super Attract Mode" --title "[ EXCLUDE CATEGORY SELECTION ]" \
		--msgbox "Currently excluded tags: \n\n$(cat "${excludetags}")" 0 0
	else
		dialog --clear --no-cancel --ascii-lines \
		--backtitle "Super Attract Mode" --title "[ EXCLUDE CATEGORY SELECTION ]" \
		--msgbox "Exclude hacks, prototypes, homebrew or other game categories you don't want SAM to show.\n\n" 0 0
	fi 

	dialog --clear --ascii-lines --no-tags --ok-label "Select" --cancel-label "Done" \
		--backtitle "Super Attract Mode" --title "[ EXCLUDE CATEGORY SELECTION ]" \
		--menu "Which tags do you want to exclude?" 0 0 0 \
		Beta "Beta Games" \
		Hack "Hacks" \
		Homebrew "Homebrew" \
		Prototype "Prototypes"  \
		Unlicensed "Unlicensed Games" \
		Translations "Translated Games" \
		USA "USA" \
		Japan "Japan" \
		Europe "Europe" \
		'' "Reset Exclusion Lists" 2>"/tmp/.SAMmenu" 

	opt=$?
	menuresponse=$(<"/tmp/.SAMmenu")
	
	categ="${menuresponse}"
	
	if [ "$opt" != "0" ]; then
		sam_menu
	else
		echo " Please wait... creating exclusion lists."
		if [ ! -z ${categ} ]; then
			if [ ! -s "${excludetags}" ]; then
				echo "${categ} " > "${excludetags}"
				process_tag
			else
				# Check if tag is already excluded
				if [ "$(grep -i "${categ}" "${excludetags}")" ]; then
					dialog --clear --no-cancel --ascii-lines \
					--backtitle "Super Attract Mode" --title "[ EXCLUDE CATEGORY SELECTION ]" \
					--msgbox "${categ} has already been excluded. \n\n" 0 0
				else
					echo "${categ} " >> "${excludetags}"
					# TO DO: What if we don't have gamelists
					process_tag
				fi
			fi
		else
			for core in ${corelist}; do
				rm "${gamelistpath}/${core}_gamelist_exclude.txt" 2>/dev/null
				rm "${excludetags}" 2>/dev/null
			done
			dialog --clear --no-cancel --ascii-lines \
			--backtitle "Super Attract Mode" --title "[ EXCLUDE CATEGORY SELECTION ]" \
			--msgbox "All exclusion filters have been removed. \n\n" 0 0
			sam_menu
		fi
		find "${gamelistpath}" -name "*_gamelist_exclude.txt" -size 0 -print0 | xargs -0 rm
		samedit_excltags
	fi
	
}

function samedit_excltags_old() {
	# Looks better but doesn't work with gamepad
	dialog --title "[ EXCLUDE CATEGORY SELECTION ]" --ascii-lines --checklist \
		"Which tags do you want to exclude?" 0 0 0 \
		"Beta" "" OFF \
		"Hack" "" OFF \
		"Homebrew" "" OFF \
		"Prototypes" "" OFF \
		"Unlicensed" "" OFF \
		"Translations" "" OFF \
		"USA" "" OFF \
		"Japan" "" OFF \
		"Europe" "" OFF \
		"Australia" "" OFF \
		"Brazil" "" OFF \
		"China" "" OFF \
		"France" "" OFF \
		"Germany" "" OFF "Italy" "" OFF \
		"Korea" "" OFF \
		"Spain" "" OFF \
		"Sweden" "" OFF 2>"/tmp/.SAMmenu"

	opt=$?
	menuresponse=$(<"/tmp/.SAMmenu")

	if [ "$opt" != "0" ]; then
		sam_menu
	else
		echo " Please wait... creating exclusion lists."
		categ="$(echo ${menuresponse} | tr ' ' '|')"
		if [ ! -z ${categ} ]; then
			# TO DO: What if we don't have gamelists
			for core in ${corelist}; do
				[[ -f "${gamelistpathtmp}/${core}_gamelist.txt" ]] && rm "${gamelistpathtmp}/${core}_gamelist.txt"
				# Find out how to do this with grep, might be faster
				awk -v category="$categ" 'BEGIN {IGNORECASE = 1}  $0 ~ category' "${gamelistpath}/${core}_gamelist.txt" >"${gamelistpath}/${core}_gamelist_exclude.txt"
			done
		else
			for core in ${corelist}; do
				rm "${gamelistpath}/${core}_gamelist_exclude.txt"
			done
		fi
		find "${gamelistpath}" -name "*_gamelist_exclude.txt" -size 0 -print0 | xargs -0 rm
		samedit_taginfo
	fi

}

function sam_bgmmenu() {
	dialog --clear --no-cancel --ascii-lines \
	--backtitle "Super Attract Mode" --title "[ BACKGROUND MUSIC ENABLER ]" \
	--msgbox "While SAM is shuffling games, play some music.\n\nThis installs wizzomafizzo's BGM script to play Background music in SAM.\n\nWe'll drop one playlist in the music folder (80s.pls) as a default playlist. You can customize this later or to your liking by dropping mp3's or pls files in /media/fat/music folder." 0 0
	dialog --clear --ascii-lines --no-tags \
		--backtitle "Super Attract Mode" --title "[ BACKGROUND MUSIC ENABLER ]" \
		--menu "Select from the following options?" 0 0 0 \
		Enablebgm "Enable BGM for SAM" \
		Disablebgm "Disable BGM for SAM" 2>"/tmp/.SAMmenu" 

	opt=$?
	menuresponse=$(<"/tmp/.SAMmenu")
	
	if [ "$opt" != "0" ]; then
		sam_menu
	else
		if [[ "${menuresponse,,}" == "enablebgm" ]]; then
			if [ ! -f "/media/fat/Scripts/bgm.sh" ]; then
				echo " Installing BGM to Scripts folder"
				repository_url="https://github.com/wizzomafizzo/MiSTer_BGM"
				get_samstuff bgm.sh /tmp
				mv --force /tmp/bgm.sh /media/fat/Scripts/
			else
				echo " BGM script is installed already. Updating just in case..."
				echo -n "stop" | socat - UNIX-CONNECT:/tmp/bgm.sock 2>/dev/null
				kill -9 "$(ps -o pid,args | grep '[b]gm.sh' | awk '{print $1}' | head -1)" 2>/dev/null
				rm /tmp/bgm.sock 2>/dev/null
				repository_url="https://github.com/wizzomafizzo/MiSTer_BGM"
				get_samstuff bgm.sh /tmp
				mv --force /tmp/bgm.sh /media/fat/Scripts/
				echo " Resetting BGM now."
			fi
			echo " Updating MiSTer_SAM.ini to use Mute=Core"
			sed -i '/mute=/c\mute=Core' /media/fat/Scripts/MiSTer_SAM.ini
			/media/fat/Scripts/bgm.sh
			sync
			repository_url="https://github.com/mrchrisster/MiSTer_SAM"
			get_samstuff Media/80s.pls /media/fat/music
			[[ ! $(grep -i "bgm" /media/fat/Scripts/MiSTer_SAM.ini) ]] && echo "bgm=Yes" >> /media/fat/Scripts/MiSTer_SAM.ini
			sed -i '/bgm=/c\bgm=Yes' /media/fat/Scripts/MiSTer_SAM.ini
			echo " All Done. Starting SAM now."
			/media/fat/Scripts/MiSTer_SAM_on.sh start

		elif [[ "${menuresponse,,}" == "disablebgm" ]]; then
			echo " Uninstalling BGM, please wait..."
			echo -n "stop" | socat - UNIX-CONNECT:/tmp/bgm.sock 2>/dev/null
			[[ -e /media/fat/Scripts/bgm.sh ]] && /media/fat/Scripts/bgm.sh stop
			[[ -e /media/fat/Scripts/bgm.sh ]] && rm /media/fat/Scripts/bgm.sh
			[[ -e /media/fat/music/bgm.ini ]] && rm /media/fat/music/bgm.ini
			rm /tmp/bgm.sock 2>/dev/null
			sed -i '/bgm.sh/d' ${userstartup}
			sed -i '/Startup BGM/d' ${userstartup}
			sed -i '/bgm=/c\bgm=No' /media/fat/Scripts/MiSTer_SAM.ini
			sed -i '/mute=/c\mute=No' /media/fat/Scripts/MiSTer_SAM.ini
			echo " Done."
		fi
	fi
}

# ========= MAIN =========

#init_vars

#read_samini

#init_paths

#init_data

parse_cmd ${@} # Parse command line parameters for input

