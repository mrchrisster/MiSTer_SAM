#!/bin/bash
trap "" HUP
trap "" TERM

#======== INI VARIABLES ========
# Change these in the INI file

#======== GLOBAL VARIABLES =========
mrsampath="/media/fat/Scripts/.config/MiSTer_SAM"
misterpath="/media/fat"

#======== DEBUG VARIABLES ========
samquiet="Yes"

#======== LOCAL VARIABLES ========
samtimeout=60
startupsleep="Yes"
menuonly="Yes"

#========= PARSE INI =========
# Read INI, Check for mount point presence
while ! test -d /media/fat/
do
	sleep 1
	count=`expr $count + 1`
	if test $count -eq 30; then
		echo "Mount timed out!"
      		exit 1
 		fi
done
if [ -f "${misterpath}/Scripts/MiSTer_SAM.ini" ]; then
	. "${misterpath}/Scripts/MiSTer_SAM.ini"
	IFS=$'\n'
fi

# Remove trailing slash from paths
for var in mrsampath misterpath mrapathvert mrapathhoriz arcadepath gbapath genesispath megacdpath neogeopath nespath snespath tgfx16path tgfx16cdpath; do
	declare -g ${var}="${!var%/}"
done


#======== Functions ========
start()
{
	#======== Start ========
	echo "Starting MiSTer Super Attract Mode... "
	
	# Spawn Joystick monitoring process per detected joystick device
	jsdevices=$(ls /dev/input/js* 2> /dev/null | wc -l)
	if [ "${jsdevices}" != "0" ]; then
		for joystick in /dev/input/js*; do
			"${mrsampath}/MiSTer_SAM_joy.sh" "${joystick}" &
		done
	fi

	# Detect joystick device changes
	"${mrsampath}/MiSTer_SAM_joy_change.sh" &
	
	# Spawn Mouse monitoring process
	"${mrsampath}/MiSTer_SAM_mouse.sh" &
	
	# Spawn Keyboard monitoring per detected keyboard device
	for keyboard in $(dmesg --decode --level info --kernel --color=never --notime --nopager | grep -e 'Keyboard' | grep -Eo 'hidraw[0-9]+'); do
		"${mrsampath}/MiSTer_SAM_keyboard.sh" "${keyboard}" &
	done
	# TODO - Detect keyboard device changes
	
	# Startup done
	echo "DONE"


	# Wait for system startup - clock synchronization
	if [ "${startupsleep,,}" == "yes" ]; then
		sleep 60
	fi
	
	# Reset activity logs
	echo "" |>/tmp/.SAM_Joy_Activity
	echo "" |>/tmp/.SAM_Joy_Change
	echo "" |>/tmp/.SAM_Mouse_Activity
	echo "" |>/tmp/.SAM_Keyboard_Activity

	
	#======== MAIN LOOP ========
	while :; do
		# If we detect a change to connected joysticks:
		# Compare devices and monitoring processes
		# Make lists of what to add and what to stop monitoring
		if [ -s /tmp/.SAM_Joy_Change ]; then
			# Wait for devices to stabilize
			sleep 3
			
			# Reset trigger
			echo "" |>/tmp/.SAM_Joy_Change

			# Init arrays
			declare -a jsdevices=()
			declare -a jsadd=()
			declare -a jsmonitors=()
			declare -a jsdel=()

			# Make a list of all js devices on system
			for joystick in /dev/input/js*; do
				jsdevices+=("${joystick}")
			done
			# Make a list of all running js monitoring processes' jsdevices - so we don't have to track a list on disk somewhere
			for joystick in $(ps -o args | grep -e 'MiSTer_SAM_joy.sh' | grep -oE '/dev/input/js[0-9]' | sort -u); do
				jsmonitors+=("${joystick}")
			done

			# Copy lists
			jsadd=${jsdevices[@]}
			jsdel=${jsmonitors[@]}
			
			# Make list of additional devices to monitor
			for joystick in ${jsmonitors[@]}; do
				jsadd=${jsadd[@]/${joystick}} 
			done

			# Make list of removed devices to stop monitoring
			for joystick in ${jsdevices[@]}; do
				jsdel=${jsdel[@]/${joystick}} 
			done
			
			# Add newly detected joystick monitoring
			if [ ! -z "${jsadd[@]//[[:blank:]]/}" ]; then
				for joystick in ${jsadd[@]//[[:blank:]]/}; do
					"${mrsampath}/MiSTer_SAM_joy.sh" "${joystick}" &
				done
			fi
			
			# Stop removed joystick monitoring
			if [ ! -z "${jsdel[@]//[[:blank:]]/}" ]; then
				for joystick in ${jsdel[@]//[[:blank:]]/}; do
					$(kill -9 $(ps -o pid,args | grep -e 'MiSTer_SAM_joy.sh' | grep -e "${joystick}" | awk '{ print $1 }'))
				done
			fi
		fi

		if [ "${menuonly,,}" == "yes" ]; then # Only start SAM from main menu
			# Check if we're at the main menu, wait 1 minute before checking activity
			if [ "$(cat /tmp/CORENAME)" == "MENU" ] && [ "$(/bin/find /tmp/CORENAME -mmin +1)" ]; then
				# Check activity files against timeout
				if [ "$(/bin/find /tmp/.SAM_Joy_Activity -mmin +${samtimeout})" ] && [ "$(/bin/find /tmp/.SAM_Mouse_Activity -mmin +${samtimeout})" ] && [ "$(/bin/find /tmp/.SAM_Keyboard_Activity -mmin +${samtimeout})" ]; then
					# Reset activity triggers
					echo "" |>/tmp/.SAM_Joy_Activity
					echo "" |>/tmp/.SAM_Joy_Change
					echo "" |>/tmp/.SAM_Mouse_Activity
					echo "" |>/tmp/.SAM_Keyboard_Activity
					"${mrsampath}/MiSTer_SAM.sh"
					# Reset activity triggers
					echo "" |>/tmp/.SAM_Joy_Activity
					echo "" |>/tmp/.SAM_Joy_Change
					echo "" |>/tmp/.SAM_Mouse_Activity
					echo "" |>/tmp/.SAM_Keyboard_Activity
				fi
			fi
		else
			# Check activity files against timeout
			if [ "$(/bin/find /tmp/.SAM_Joy_Activity -mmin +${samtimeout})" ] && [ "$(/bin/find /tmp/.SAM_Mouse_Activity -mmin +${samtimeout})" ] && [ "$(/bin/find /tmp/.SAM_Keyboard_Activity -mmin +${samtimeout})" ]; then
				# Reset activity triggers
				echo "" |>/tmp/.SAM_Joy_Activity
				echo "" |>/tmp/.SAM_Joy_Change
				echo "" |>/tmp/.SAM_Mouse_Activity
				echo "" |>/tmp/.SAM_Keyboard_Activity
				"${mrsampath}/MiSTer_SAM.sh"
				# Reset activity triggers
				echo "" |>/tmp/.SAM_Joy_Activity
				echo "" |>/tmp/.SAM_Joy_Change
				echo "" |>/tmp/.SAM_Mouse_Activity
				echo "" |>/tmp/.SAM_Keyboard_Activity
			fi
		fi

	sleep 3
	done
}

stop() 
{
	echo -n "Stopping MiSTer SAM... "
	kill -9 $(ps aux|grep "MiSTer_SAM.sh"| awk '{ print $1}' |head -n 1)
	echo "OK"
}

# Kill running process
if [ ! -z "$(pidof -o $$ $(basename ${0}))" ]; then
	echo ""
	echo "Removing other running instances of $(basename ${0})..."
	kill -9 $(pidof -o $$ $(basename ${0})) &>/dev/null
fi

# Kill old activity processes
killall -q -9 MiSTer_SAM_joy.sh &>/dev/null
killall -q -9 MiSTer_SAM_joy_change.sh &>/dev/null
killall -q -9 MiSTer_SAM_mouse.sh &>/dev/null
killall -q -9 MiSTer_SAM_keyboard.sh &>/dev/null
killall -q -9 xxd &>/dev/null
killall -q -9 inotifywait &>/dev/null

# Convert seconds to minutes
samtimeout=$(echo - | awk -v t=${samtimeout} '{print t/60}')


#======== DEBUG OUTPUT =========
if [ "${samquiet,,}" == "no" ]; then
	#======== GLOBAL VARIABLES =========
	echo "mrsampath: ${mrsampath}"
	echo "misterpath: ${misterpath}"

	#======== LOCAL VARIABLES ========
	echo "samtimeout: ${samtimeout}"
	echo "startupsleep: ${startupsleep}"
	echo "menuonly: ${menuonly}"
fi

# Parse command line
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo "Usage: /etc/init.d/S93mistersam {start|stop|restart}"
        exit 1
        ;;
esac
exit 0
