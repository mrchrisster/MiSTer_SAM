#!/bin/bash
compgen -v | sed s/=.\*// >/tmp/$$

# https://github.com/mrchrisster/MiSTer_SAM/
# Copyright (c) 2021 by mrchrisster and Mellified

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# Description
# This cycles through arcade and console cores periodically
# Games are randomly pulled from their respective folders

# ======== Credits ========
# Original concept and implementation: mrchrisster
# Additional development and script layout: Mellified and Paradox
#
# mbc by pocomane
# partun by woelper
# samindex by wizzo
# tty2oled by venice
#
# Thanks for the contributions and support:
# kaloun34, redsteakraw, RetroDriven, LamerDeluxe, InquisitiveCoder, Sigismond

trap "" HUP
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/media/fat/linux:/media/fat/Scripts:/media/fat/Scripts/.SuperAttract:.

# ======== GLOBAL VARIABLES =========
declare -g misterpath="/media/fat"
declare -g misterscripts="${misterpath}/Scripts"
declare -g mrsampath="${misterscripts}/.SuperAttract"
if [ -s SuperAttractSystem ]; then
	source SuperAttractSystem
elif [ -s ${mrsampath}/SuperAttractSystem ]; then
	source ${mrsampath}/SuperAttractSystem
else
	echo "Error! SuperAttractSystem not found!"
	exit
fi
trap 'rc=$?;[ ${rc} = 0 ] && exit;cleanup' EXIT TERM
#======== Functions ========
function cleanup() {
	corename_name=$(<${corenamefile})
	local tries=5
	local pids=$(pidof SuperAttract_MCP)
	if [ ! -z "${pids}" ]; then
		samquiet "-n" " Stopping MCP..."
		samdebug "-n" " | ${pids} "
		# kill -9 ${pids} &>/dev/null
		while [ $(kill -15 ${pids} 2>/dev/null)] && [ ${tries} -gt 0 ]; do
			((tries--))
			sleep 1
		done
		pids=$(pidof SuperAttract_MCP)
		samquiet " Failed, forcing!"
		samquiet "-n" " Stopping MCP..."
		samdebug "-n" " | ${pids} "
		kill -9 ${pids} &>/dev/null
		samquiet " Done!"
	fi
	pids=""
	pids=$(pidof SuperAttract_tty2oled)
	if [ ! -z "${pids}" ]; then
		samquiet "-n" " Stopping TTY..."
		samdebug "-n" " | ${pids} "
		# kill -9 ${pids} &>/dev/null
		while $(kill -15 ${pids} 2>/dev/null); do
			sleep 1
		done
		samquiet " Done!"
	fi
	pids=""
	pids=$(pidof Super_Attract_Mode.sh)
	if [ ! -z "${pids}" ]; then
		samquiet "-n" " Stopping SAM..."
		samdebug "-n" " | ${pids} "
		# kill -9 ${pids} &>/dev/null
		while $(kill -15 ${pids} 2>/dev/null); do
			sleep 1
		done
		if [ ${corename_name} != "MENU" ]; then
			samquiet "-n" " Returning to MiSTer Menu..."
			echo "load_core ${misterpath}/menu.rbf" >/dev/MiSTer_cmd
			samquiet " Done!"
		fi
		samquiet " Done!"
	fi
	pids=""
	sam_cleanup
	tty_cleanup
	mcp_cleanup

	# Kill old activity processes
	pids=$(ps aux | grep python | grep MCP_Activity_pipe | grep -v grep | awk '{print $1}') 2>/dev/null
	if [ ! -z "${pids}" ]; then
		samquiet "-n" " Stopping Device monitors..."
		samdebug "-n" " ${pids} |"
		pids=$(echo "${pids}" | tr " " "\n" | sort | uniq | tr "\n" " ")
		samdebug "-n" " ${pids} |"
		# kill -9 ${pids} &>/dev/null
		while $(kill -15 ${pids} 2>/dev/null); do
			sleep 1
		done
		samquiet " Done!"
	fi
	pids=""

	pids=$(ps aux | grep inotifywait | grep MCP_Activity_Change_pipe | grep -v grep | awk '{print $1}') 2>/dev/null
	if [ ! -z "${pids}" ]; then
		samquiet "-n" " Stopping Inotifywait Activity instances..."
		samdebug "-n" " ${pids} |"
		pids=$(echo "${pids}" | tr " " "\n" | sort | uniq | tr "\n" " ")
		samdebug "-n" " ${pids} |"
		# kill -9 ${pids} &>/dev/null
		while $(kill -15 ${pids} 2>/dev/null); do
			sleep 1
		done
		samquiet" Done!"
	fi
	pids=""

	pids=$(ps aux | grep inotifywait | grep MCP_CoreName_Change_pipe | grep -v grep | awk '{print $1}') 2>/dev/null
	if [ ! -z "${pids}" ]; then
		samquiet "-n" " Stopping Inotifywait Corename Change instances..."
		samdebug "-n" " ${pids} |"
		pids=$(echo "${pids}" | tr " " "\n" | sort | uniq | tr "\n" " ")
		samdebug "-n" " ${pids} |"
		# kill -9 ${pids} &>/dev/null
		while $(kill -15 ${pids} 2>/dev/null); do
			sleep 1
		done
		samquiet " Done!"
	fi
	pids=""
	killall -q -9 hexdump 2>/dev/null
	sync
	echo 3 >/proc/sys/vm/drop_caches
}

function mcp_start() {
	if [ "${samdebug}" == "yes" ]; then
		vardebug_out
	fi
	echo " Starting MCP.."
	samdebug " args: ${@}"
	# If the MCP isn't running we need to start it in monitoring only mode
	if [ -z "$(pidof SuperAttract_MCP)" ]; then
		tmux new-session -s MCP -d "${mrsampath}/SuperAttract_MCP" "${@}" &
	fi
}

# Parse command line
case "${1,,}" in
start | restart)
	shift
	cleanup
	startup_tasks
	mcp_start "${@,,}"
	;;
quickstart)
	startup_tasks
	cleanup
	mcp_start "${@,,}"
	;;
stop)
	cleanup
	;;
*)
	echo " Usage: ${userstartup} {start|stop|restart|quickstart}"
	exit 1
	;;
esac
exit 0
