#!/bin/bash
trap "" HUP
trap "" TERM
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/media/fat/linux:/media/fat/Scripts:/media/fat/Scripts/.SuperAttract:.

#======== GLOBAL VARIABLES =========
declare -g misterpath="/media/fat"
declare -g misterscripts="${misterpath}/Scripts"
declare -g mrsampath="${misterscripts}/.SuperAttract"
declare -g mrsamtmp="/tmp/.SAM_tmp"
declare -g userstartup="${misterpath}/linux/user-startup.sh"
declare -g userstartuptpl="${misterpath}/linux/_user-startup.sh"
declare -g corename_file="/tmp/CORENAME"
declare -g corename_name="printf '%s\n' $(<${corename_file})"

# Named Pipes
declare -g SAM_cmd_pipe="${mrsamtmp}/SAM_cmd_pipe"
declare -g MCP_cmd_pipe="${mrsamtmp}/MCP_cmd_pipe"
declare -g TTY_cmd_pipe="${mrsamtmp}/TTY_cmd_pipe"
declare -g SAM_Activity_pipe="${mrsamtmp}/SAM_Activity_pipe"
declare -g MCP_Activity_pipe="${mrsamtmp}/MCP_Activity_pipe"
declare -g MCP_Corename_Activity_pipe="${mrsamtmp}/MCP_CoreName_Activity_pipe"
declare -g MCP_CoreName_Change_pipe="${mrsamtmp}/MCP_CoreName_Change_pipe"

# ======== DEBUG VARIABLES ========
declare -gl samquiet="Yes"
declare -gl samdebug="No"
declare -gl samtrace="No"
declare -gi speedtest=0

# ======== TTY2OLED =======
declare -gl ttyenable="No"
declare -gi ttyupdate_pause=10
declare -gA tty_currentinfo=(
	[core_pretty]=""
	[name]=""
	[core]=""
	[counter]=0
	[name_scroll]=""
	[name_scroll_position]=0
	[name_scroll_direction]=1
	[update_pause]=${ttyupdate_pause}
)

#======== INI VARIABLES ========
# Change these in the INI file

declare -gi bootsleep="60"

#======== DEBUG VARIABLES ========
samquiet="Yes"
samtrace="No"
samdebug="No"

#======== LOCAL VARIABLES ========

#========= PARSE INI =========
# Read INI, Check for mount point presence
while ! test -d ${misterpath}/; do
	sleep 1
	count=$(expr ${count} + 1)
	if test ${count} -eq 30; then
		echo " Mount timed out!"
		exit 1
	fi
done

if [ -f "${misterscripts}/Super_Attract_Mode.ini" ]; then
	source "${misterscripts}/Super_Attract_Mode.ini"
fi

[ ! -d ${mrsamtmp}/ ] && mkdir -p ${mrsamtmp}/

#======== Functions ========
function start() {
	#======== Start ========
	cleanup
	# create_lists &
	sleep "${bootsleep}"
	mcp_start
}

function quickstart() {
	#======== Start ========
	mcp_start "${@,,}" 
}

function cleanup() {
	corename_name=$(printf '%s\n' $(<${corename_file}))
	if [ ${corename_name} != "MENU" ]; then
		[[ "${samdebug}" == "yes" ]] && echo -n " Returning to MiSTer Menu..."
		echo "load_core ${misterpath}/menu.rbf" >/dev/MiSTer_cmd
		[[ "${samdebug}" == "yes" ]] && echo " Done!"
	fi
	tries=5
	pids=$(pidof SuperAttract_MCP)
	if [ ! -z "${pids}" ]; then
		echo -n " Stopping MCP..."
		[[ "${samdebug}" == "yes" ]] && echo -n " ${pids} |"
		pids=$(echo "${pids}"|tr " " "\n"|sort|uniq|tr "\n" " ")
		[[ "${samdebug}" == "yes" ]] && echo -n " ${pids} |"
		# kill -9 ${pids} &>/dev/null
		while [ $(kill -15 ${pids} 2>/dev/null)] && [ ${tries} -gt 0 ]; do
			((tries--))
	    	sleep 1
		done
		pids=$(pidof SuperAttract_MCP)
		echo " Failed, forcing!"
		echo -n " Stopping MCP..."
		[[ "${samdebug}" == "yes" ]] && echo -n " ${pids} |"
		pids=$(echo "${pids}"|tr " " "\n"|sort|uniq|tr "\n" " ")
		[[ "${samdebug}" == "yes" ]] && echo -n " ${pids} |"
		kill -9 ${pids} &>/dev/null
		echo " Done!"
	fi
	pids=""
	pids=$(pidof SuperAttract_tty2oled)
	if [ ! -z "${pids}" ]; then
		echo -n " Stopping TTY..."
		[[ "${samdebug}" == "yes" ]] && echo -n " ${pids} |"
		pids=$(echo "${pids}"|tr " " "\n"|sort|uniq|tr "\n" " ")
		[[ "${samdebug}" == "yes" ]] && echo -n " ${pids} |"
		# kill -9 ${pids} &>/dev/null
		while $(kill -15 ${pids} 2>/dev/null); do
	    	sleep 1
		done
		echo " Done!"
	fi
	pids=""
	pids=$(pidof Super_Attract_Mode.sh)
	if [ ! -z "${pids}" ]; then
		echo -n " Stopping SAM..."
		[[ "${samdebug}" == "yes" ]] && echo -n " ${pids} |"
		pids=$(echo "${pids}"|tr " " "\n"|sort|uniq|tr "\n" " ")
		[[ "${samdebug}" == "yes" ]] && echo -n " ${pids} |"
		# kill -9 ${pids} &>/dev/null
		while $(kill -15 ${pids} 2>/dev/null); do
	    	sleep 1
		done
		echo " Done!"
	fi
	pids=""
	SAM_cleanup

	# Kill old activity processes
	pids=$(ps aux | grep python | grep MCP_Activity_pipe | grep -v grep | awk '{print $1}') 2>/dev/null
	if [ ! -z "${pids}" ]; then
		echo -n " Stopping Device monitors..."
		[[ "${samdebug}" == "yes" ]] && echo -n " ${pids} |"
		pids=$(echo "${pids}"|tr " " "\n"|sort|uniq|tr "\n" " ")
		[[ "${samdebug}" == "yes" ]] && echo -n " ${pids} |"
		# kill -9 ${pids} &>/dev/null
		while $(kill -15 ${pids} 2>/dev/null); do
	    	sleep 1
		done
		echo " Done!"
	fi
	pids=""
	
	pids=$(ps aux | grep inotifywait | grep MCP_Activity_Change_pipe | grep -v grep | awk '{print $1}') 2>/dev/null
	if [ ! -z "${pids}" ]; then
		echo -n " Stopping Inotifywait Activity instances..."
		[[ "${samdebug}" == "yes" ]] && echo -n " ${pids} |"
		pids=$(echo "${pids}"|tr " " "\n"|sort|uniq|tr "\n" " ")
		[[ "${samdebug}" == "yes" ]] && echo -n " ${pids} |"
		# kill -9 ${pids} &>/dev/null
		while $(kill -15 ${pids} 2>/dev/null); do
	    	sleep 1
		done
		echo " Done!"
	fi
	pids=""
	
	pids=$(ps aux | grep inotifywait | grep MCP_CoreName_Change_pipe | grep -v grep | awk '{print $1}') 2>/dev/null
	if [ ! -z "${pids}" ]; then
		echo -n " Stopping Inotifywait Corename Change instances..."
		[[ "${samdebug}" == "yes" ]] && echo -n " ${pids} |"
		pids=$(echo "${pids}"|tr " " "\n"|sort|uniq|tr "\n" " ")
		[[ "${samdebug}" == "yes" ]] && echo -n " ${pids} |"
		# kill -9 ${pids} &>/dev/null
		while $(kill -15 ${pids} 2>/dev/null); do
	    	sleep 1
		done
		echo " Done!"
	fi
	pids=""
	killall -q -9 hexdump 2>/dev/null
}

function SAM_cleanup() {
	# Clean up by umounting any mount binds
	mount1=$(mount | grep "${misterpath}/config" | awk '{print $3}')
	# mount2=$(mount | grep shared | awk '{print $3}')
	[[ ${mount1} ]] && umount ${mount1}
	# [[ ${mount2} ]] && umount ${mount2}
	[[ -d "${misterpath}/Bootrom" ]] && [[ $(mount | grep -ic 'bootrom') == "1" ]] && umount "${misterpath}/Bootrom"
	[[ -f "${misterpath}/Games/NES/boot1.rom" ]] && [[ $(mount | grep -ic 'nes/boot1.rom') == "1" ]] && umount "${misterpath}/Games/NES/boot1.rom"
	[[ -f "${misterpath}/Games/NES/boot2.rom" ]] && [[ $(mount | grep -ic 'nes/boot2.rom') == "1" ]] && umount "${misterpath}/Games/NES/boot2.rom"
	[[ -f "${misterpath}/Games/NES/boot3.rom" ]] && [[ $(mount | grep -ic 'nes/boot3.rom') == "1" ]] && umount "${misterpath}/Games/NES/boot3.rom"
	[[ "${samquiet}" == "no" ]] && printf '%s\n' " Cleaned up mounts."
}

function mcp_start() {
	echo " Starting MCP.."
	# If the MCP isn't running we need to start it in monitoring only mode
	if [ -z $(pidof SuperAttract_MCP) ]; then
		tmux new-session -s MCP -d "${mrsampath}/SuperAttract_MCP" "${@}" &
	fi
}

#======== DEBUG OUTPUT =========
if [ "${samtrace}" == "yes" ]; then
	echo "********************************************************************************"
	#======== GLOBAL VARIABLES =========
	echo " mrsampath: ${mrsampath}"
	echo " misterpath: ${misterpath}"
	#======== LOCAL VARIABLES ========
	echo " samtimeout: ${samtimeout}"
	echo " menuonly: ${menuonly}"
	echo "********************************************************************************"
fi

# Parse command line
case "${1,,}" in
start)
	start
	;;
quickstart)
	quickstart
	;;
stop)
	cleanup
	;;
restart)
	cleanup
	start
	;;
*)
	echo " Usage: ${userstartup} {start|stop|restart|quickstart}"
	exit 1
	;;
esac
exit 0
