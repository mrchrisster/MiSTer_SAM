#!/bin/bash
trap "" HUP
trap "" TERM
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/media/fat/linux:/media/fat/Scripts:/media/fat/Scripts/.SuperAttract:.

#======== INI VARIABLES ========
# Change these in the INI file

#======== GLOBAL VARIABLES =========
declare -g mrsampath="/media/fat/Scripts/.SuperAttract"
declare -g misterpath="/media/fat"
declare -g userstartup="/media/fat/linux/user-startup.sh"
declare -g userstartuptpl="/media/fat/linux/_user-startup.sh"
declare -gi bootsleep="60"
declare -g corename_name="printf '%s\n' $(</tmp/CORENAME)"

#======== DEBUG VARIABLES ========
samquiet="Yes"
samtrace="No"
samdebug="No"

#======== LOCAL VARIABLES ========

#========= PARSE INI =========
# Read INI, Check for mount point presence
while ! test -d /media/fat/; do
	sleep 1
	count=$(expr $count + 1)
	if test $count -eq 30; then
		echo " Mount timed out!"
		exit 1
	fi
done

if [ -f "${misterpath}/Scripts/Super_Attract_Mode.ini" ]; then
	source "${misterpath}/Scripts/Super_Attract_Mode.ini"
fi

[ ! -d /tmp/.SAM_tmp/ ] && mkdir -p /tmp/.SAM_tmp/

#======== Functions ========
function start() {
	#======== Start ========
	sleep ${bootsleep}
	mcp_start
}

function quickstart() {
	#======== Start ========
	mcp_start "quickstart"
}

function stop() {
	corename_name=$(printf '%s\n' $(</tmp/CORENAME))
	if [ ${corename_name} != "MENU" ]; then
		echo -n " Returning to MiSTer Menu..."
		echo "load_core /media/fat/menu.rbf" >/dev/MiSTer_cmd
		echo " Done!"
	fi
	tries=5
	pids=$(pidof SuperAttract_MCP)
	if [ ! -z "${pids}" ]; then
		echo -n " Stopping MCP..."
		echo -n " ${pids} "
		# kill -9 ${pids} &>/dev/null
		while [ $(kill -15 ${pids} 2>/dev/null)] && [ $tries -gt 0 ]; do
			((tries--))
	    	sleep 1
		done
		pids=$(pidof SuperAttract_MCP)
		echo " Failed, forcing!"
		echo -n " Stopping MCP..."
		echo -n " ${pids} "
		kill -9 ${pids} &>/dev/null
		echo " Done!"
	fi
	sleep 2
	pids=""
	pids=$(pidof SuperAttract_tty2oled)
	if [ ! -z "${pids}" ]; then
		echo -n " Stopping TTY..."
		echo -n " | ${pids} "
		# kill -9 ${pids} &>/dev/null
		while $(kill -15 ${pids} 2>/dev/null); do
	    	sleep 1
		done
		echo " Done!"
	fi
	sleep 2
	pids=""
	pids=$(pidof Super_Attract_Mode.sh)
	if [ ! -z "${pids}" ]; then
		echo -n " Stopping SAM..."
		echo -n " | ${pids} "
		# kill -9 ${pids} &>/dev/null
		while $(kill -15 ${pids} 2>/dev/null); do
	    	sleep 1
		done
		echo " Done!"
	fi
	pids=""
	sleep 2
	SAM_cleanup
}

function SAM_cleanup() {
	# Clean up by umounting any mount binds
	mount1=$(mount | grep /media/fat/config | awk '{print $3}')
	mount2=$(mount | grep shared | awk '{print $3}')
	[[ $mount1 ]] && umount $mount1
	[[ $mount2 ]] && umount $mount2
	[[ -z $mount1 ]] && echo " No mount exists!"
	[[ -z $mount2 ]] && echo " No mount exists!"
	[[ -d "${misterpath}/Bootrom" ]] && [[ "$(mount | grep -ic 'bootrom')" == "1" ]] && umount "${misterpath}/Bootrom"
	[[ -f "${misterpath}/Games/NES/boot1.rom" ]] && [[ "$(mount | grep -ic 'nes/boot1.rom')" == "1" ]] && umount "${misterpath}/Games/NES/boot1.rom"
	[[ -f "${misterpath}/Games/NES/boot2.rom" ]] && [[ "$(mount | grep -ic 'nes/boot2.rom')" == "1" ]] && umount "${misterpath}/Games/NES/boot2.rom"
	[[ -f "${misterpath}/Games/NES/boot3.rom" ]] && [[ "$(mount | grep -ic 'nes/boot3.rom')" == "1" ]] && umount "${misterpath}/Games/NES/boot3.rom"
	[[ "${samquiet}" == "no" ]] && printf '%s\n' " Cleaned up mounts."
}

function mcp_start() {
	echo " Starting MCP.."
	# If the MCP isn't running we need to start it in monitoring only mode
	if [ -z "$(pidof SuperAttract_MCP)" ]; then
		tmux new-session -s MCP -d "${mrsampath}/SuperAttract_MCP" "${@}" &
	fi
}

# Kill running process
pids=$(pidof -o $$ $(basename -- ${0}))
if [ ! -z "pids" ]; then
	echo -n " Removing other instances of $(basename -- ${0})..."
	kill -9 ${pids} &>/dev/null
	wait ${pids} &>/dev/null
	echo " Done!"
fi

# Kill old activity processes
echo -n " Stopping activity monitoring..."
killall -q -9 SuperAttract_joy.py 2>/dev/null
killall -q -9 SuperAttract_mouse.py 2>/dev/null
killall -q -9 SuperAttract_keyboard.py 2>/dev/null
killall -q -9 hexdump 2>/dev/null
kill -9 $(ps -o pid,args | grep "inotifywait" | grep "SAM_Activity_pipe" | {
	read -r PID COMMAND
	echo $PID
}) 2>/dev/null
echo " Done!"

#======== DEBUG OUTPUT =========
if [ "${samtrace}" == "yes" ]; then
	echo "********************************************************************************"
	#======== GLOBAL VARIABLES =========
	echo " mrsampath: ${mrsampath}"
	echo " misterpath: ${misterpath}"
	#======== LOCAL VARIABLES ========
	echo " samtimeout: ${samtimeout}"
	echo " menuonly: ${menuonly}"
	echo "********************************************************************************"
fi

# Parse command line
case "${1,,}" in
start)
	start
	;;
quickstart)
	quickstart
	;;
stop)
	stop
	;;
restart)
	stop
	start
	;;
*)
	echo " Usage: ${userstartup} {start|stop|restart|quickstart}"
	exit 1
	;;
esac
exit 0
