#!/bin/bash

# https://github.com/mrchrisster/MiSTer_SAM/
# Copyright (c) 2021 by mrchrisster and Mellified

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# Description
# This cycles through arcade and console cores periodically
# Games are randomly pulled from their respective folders

# ======== Credits ========
# Original concept and implementation: mrchrisster
# Additional development and script layout: Mellified and Paradox
#
# mbc by pocomane
# partun by woelper
# samindex by wizzo
# tty2oled by venice
#
# Thanks for the contributions and support:
# kaloun34, redsteakraw, RetroDriven, LamerDeluxe, InquisitiveCoder, Sigismond

trap 'MCP_cleanup' EXIT TERM

# ======== GLOBAL VARIABLES =========
declare -g misterpath="/media/fat"
declare -g misterscripts="${misterpath}/Scripts"
declare -g mrsampath="${misterscripts}/.SuperAttract"
source ${mrsampath}/SuperAttractSystem.ini
startup_tasks

samdebug " args: ${@}"
if [ ! -z "${1}" ] && [ "${1}" == "quickstart" ]; then
	shift
	MCP_SAM_trigger "${@}"
fi

#======== FUNCTIONS ========
function MCP_CoreName_Change() {
	# Monitor CORENAME for changes (to determine if the menu is currently running)
	inotifywait --event modify ${corename_file} --outfile ${MCP_CoreName_Change_pipe} 2>/dev/null &
}

function MCP_jschange() {
	# Monitor joystick devices for changes
	inotifywait --quiet --monitor --event create /dev/input --include js --outfile ${MCP_DeviceChange_pipe} 2>/dev/null &
}

function MCP_keybchange() {
	# Monitor keyboard devices for changes
	inotifywait -r --quiet --monitor --event create /dev/input/ --include by-path --include kbd --outfile ${MCP_DeviceChange_pipe} 2>/dev/null &
}

function MCP_CoreName_Monitor() {
	# Spawn CORENAME monitoring process.
	corename_name=$(<${corename_file})
	printf '%s\n' ${corename_name} >${MCP_Corename_Activity_pipe} &
}

function MCP_jsmonitor() {

	declare -a jsdevices=()
	declare -a excludejoy=()
	declare -a jsnew=()

	# Make a list of all js devices on system
	shopt -s nullglob
	for joystick in /dev/input/js*; do
		jsdevices+=("${joystick}")
	done
	shopt -u nullglob

	# Exclude motion sensors from monitoring list. This is necessary or else SAM will detect constant input triggers from these js devices
	mapfile -t excludejoy < <(grep -iwns "motion sensors" /proc/bus/input/devices -A 7 | awk -F= '/Handlers/{print $2 }' | awk '/js/{ print $1 }')
	excludejoy=("${excludejoy[@]/#//dev/input/}")
	jsnew=($(comm -3 <(printf "%s\n" "${excludejoy[@]}" | sort) <(printf "%s\n" "${jsdevices[@]}" | sort) | sort -n))

	# Spawn Joystick monitoring process per detected joystick device (excluding motion sensors)
	shopt -s nullglob
	samdebug "-n" " Monitoring controller(s)"
	for joystick in ${jsnew[@]}; do
		if [ ! -z "${joystick}" ]; then
			j=$(echo ${joystick} | sed 's./dev/input/..')
			samdebug "-n" " ${j}..."
			"${mrsampath}/SuperAttract_joy.py" "${joystick}" "${MCP_Activity_pipe}" > /dev/null 2>&1 &
		fi
	done
	shopt -u nullglob
}

function MCP_keybmonitor() {

	# We check for input on hidraw devices. First let's make sure these devices are keyboards...

	declare -a kbdevents=()
	declare -a rawinput=()
	declare -a kbddev=()

	kbdevents=($(ls /dev/input/by-path | grep "event-kbd")) # We know these are keyboards
	rawinput=($(ls /dev/hidraw*))

	# Collect all connected keyboards by physical address
	for keyboards in "${kbdevents[@]}"; do
		devpath=$(readlink --canonicalize "/dev/input/by-path/${keyboards}")
		kbd=${devpath##*/}
		kbddev+=($(cat /sys/class/input/${kbd}/device/uevent | grep PHYS | cut -d '=' -f2 | tr -d '""'))
		#printf '%s\n' "${kbddev[@]}"
	done

	# Compare if hidraw devices match keyboard device address
	samdebug "-n" " Monitoring keyboard(s)"
	for f in "${rawinput[@]}"; do
		kbdraw=${f##*/}
		rawdev=$(cat /sys/class/hidraw/${kbdraw}/device/uevent | grep HID_PHYS | cut -d '=' -f2)
		#printf "%s \t %s\n" ${kbdraw} "${rawdev}"

		for i in "${kbddev[@]}"; do
			if [ "${i}" == "${rawdev}" ]; then
				k=$(echo ${f} | sed 's./dev/..')
				samdebug "-n" " ${k}..."
				"${mrsampath}/SuperAttract_keyboard.py" "${f}" "${MCP_Activity_pipe}" > /dev/null 2>&1 &
			fi
		done
	done
}

function MCP_msmonitor() {
	mouse="/dev/input/mice"
	m=$(echo ${mouse} | sed 's./dev/input/..')
	samdebug "-n" " Monitoring all mice through ${m}..."
	"${mrsampath}/SuperAttract_mouse.py" "${mouse}" "${MCP_Activity_pipe}" > /dev/null 2>&1 &
}

function MCP_tty2oled_start() {
	echo " Starting TTY.."
	# If the TTY2oled isn't running we need to start it in monitoring only mode
	if [ -z "$(pidof SuperAttract_tty2oled)" ]; then
		tmux new-session -s TTY -d "${mrsampath}/SuperAttract_tty2oled" &
	fi
}

function MCP_SAM_trigger() {
	samdebug " args: ${@}"
	if [ $(ps aux | grep -ice "[S]uper_Attract_Mode.sh") == "0" ] && [ $(ps aux | grep -ice "[u]pdate") == "0" ]; then
		samquiet " No activity detected for ${MCP_timeout_minutes} minutes. SAM starting..."
		samdebug " $(date '+%m-%d-%Y_%H:%M:%S' | sed 's/\n/ /g')"
		[[ "${ttyenable}" == "yes" ]] && MCP_tty2oled_start
		sleep 1
		tmux new-session -x 180 -y 40 -n "-= SAM Monitor -- Detach with ctrl-b d  =-" -s SAM -d "${misterscripts}/Super_Attract_Mode.sh" "${@}" start_real &
		sleep 0.5
	fi
}

function MCP_cleanup() {
	[[ -p ${MCP_cmd_pipe} ]] && rm ${MCP_cmd_pipe}
	[[ -p ${MCP_CoreName_Change_pipe} ]] && rm ${MCP_CoreName_Change_pipe}
	[[ -p ${MCP_Corename_Activity_pipe} ]] && rm ${MCP_Corename_Activity_pipe}
	[[ -p ${MCP_DeviceChange_pipe} ]] && rm ${MCP_DeviceChange_pipe}
	[[ -p ${MCP_Activity_pipe} ]] && rm ${MCP_Activity_pipe}
	[[ -p ${SAM_Activity_pipe} ]] && rm ${SAM_Activity_pipe}
	[[ -e ${MCP_cmd_pipe} ]] && rm ${MCP_cmd_pipe}
	[[ -e ${MCP_CoreName_Change_pipe} ]] && rm ${MCP_CoreName_Change_pipe}
	[[ -e ${MCP_DeviceChange_pipe} ]] && rm ${MCP_DeviceChange_pipe}
	[[ -e ${MCP_Corename_Activity_pipe} ]] && rm ${MCP_Corename_Activity_pipe}
	[[ -e ${MCP_Activity_pipe} ]] && rm ${MCP_Activity_pipe}
	[[ -e ${SAM_Activity_pipe} ]] && rm ${SAM_Activity_pipe}
}

function MCP_createpipes() {
	[[ ! -p ${MCP_cmd_pipe} ]] && mkfifo ${MCP_cmd_pipe}
	[[ ! -p ${MCP_CoreName_Change_pipe} ]] && mkfifo ${MCP_CoreName_Change_pipe}
	[[ ! -p ${MCP_Corename_Activity_pipe} ]] && mkfifo ${MCP_Corename_Activity_pipe}
	[[ ! -p ${MCP_DeviceChange_pipe} ]] && mkfifo ${MCP_DeviceChange_pipe}
	[[ ! -p ${MCP_Activity_pipe} ]] && mkfifo ${MCP_Activity_pipe}
	[[ ! -p ${SAM_Activity_pipe} ]] && mkfifo ${SAM_Activity_pipe}

	while true; do
		if [[ -p ${MCP_cmd_pipe} ]]; then
			if read line <${MCP_cmd_pipe}; then
				set -- junk ${line}
				shift
				case "${1}" in
				stop | quit | exit)
					exit 0
					break
					;;
				*)
					echo " ERROR! ${line} is unknown."
					echo " Try $(basename -- ${0}) help"
					echo " Or check the Github readme."
					echo " Named Pipe"
					;;
				esac
			fi
		fi
		sleep 0.1
	done &
}

function MCP_monitors() {
	# Start monitoring for CORENAME changes
	samquiet "-n" " Starting CORENAME change monitor..."
	MCP_CoreName_Change
	samquiet " Done!"

	# Spawn CORENAME monitoring process.
	samquiet "-n" " Starting CORENAME monitor..."
	MCP_CoreName_Monitor
	samquiet " Done!"
	
	samquiet "-n" " Starting Device change monitor..."
	MCP_jschange
	MCP_keybchange
	samquiet " Done!"
	

	if [ "${listenjoy}" == "yes" ]; then
		# Spawn joystick monitoring process per detected joystick device
		samquiet "-n" " Starting joystick monitor..."
		MCP_jsmonitor
		samquiet " Done!"

	fi
	if [ "${listenkeyboard}" == "yes" ]; then
		# Spawn keyboard monitoring processes
		if compgen -G /dev/input/by-path/*kbd > /dev/null; then
			samquiet "-n" " Starting keyboard monitor..."
			MCP_keybmonitor
			samquiet " Done!"
		fi
	fi

	if [ "${listenmouse}" == "yes" ]; then
		# Spawn mouse monitoring process per detected mouse device
		samquiet "-n" " Starting mouse monitor..."
		MCP_msmonitor
		samquiet " Done!"
	fi

	while true; do
		if read line <${MCP_Activity_pipe}; then
			tmux send-keys -t MCP C-c ENTER
			echo -ne "\033[0K\r\033[A"
			# printf '%s\n' "${line}"
			if [ ! -z "$(pidof Super_Attract_Mode.sh)" ]; then
				printf '%s\n' "${line}" >${SAM_Activity_pipe}
			else
				[[ -p ${SAM_Activity_pipe} ]] && rm ${SAM_Activity_pipe}
			fi
		fi
		sleep 0.1
	done &

	while true; do
		if read line <${MCP_DeviceChange_pipe}; then
			# printf '%s\n' "${line}"
			# Wait for devices to stabilize
			sleep 1
			if [[ "${line,,}" == *"event-kb"* ]]; then
				# Kill existing Keyboard monitors
				for otherpid in $(ps -o pid,args | grep -e '[S]uperAttract_keyboard.py'| awk '{ print $1 }'); do
					kill -9 ${otherpid} > /dev/null 2>&1
					wait ${otherpid} > /dev/null 2>&1
				done
				# Spawn keyboard monitoring processes
				MCP_keybmonitor
			elif [[ "${line,,}" == *"create js"* ]]; then
				# Kill existing Joystick monitors
				for otherpid in $(ps -o pid,args | grep -e '[S]uperAttract_joy.py'| awk '{ print $1 }'); do
					kill -9 ${otherpid} > /dev/null 2>&1
					wait ${otherpid} > /dev/null 2>&1
				done
				# Spawn Joystick monitoring processes
				MCP_jsmonitor
			fi
		fi
		sleep 0.1
	done &

	while true; do
		if read line <${MCP_CoreName_Change_pipe}; then
			MCP_CoreName_Monitor
		fi
		sleep 0.1
	done &


	while true; do
		if read line <${MCP_Corename_Activity_pipe}; then
			if [ "${line}" != "${corename_name}" ]; then
				# If we detect a change to CORENAME:
				# Spawn CORENAME monitoring process
				tmux rename-window -t MCP "${line}"
				tmux send-keys -t MCP C-c ENTER
				echo -ne "\033[0K\r\033[A"
				MCP_CoreName_Change
			fi
			# printf '%s\n' "${line}"
		fi
		sleep 0.1
	done &
}

# ======== MAIN LOOP ========
function MCP_loop() {
	while [ ${MCP_counter} -gt 0 ]; do
		echo -ne " Starting in ${MCP_counter}...\033[0K\r"
		sleep 1
		((MCP_counter--))
		corename_name=$(<${corename_file})
		tmux rename-window -t MCP "${corename_name}"
	done
	corename_name=$(<${corename_file})
	tmux rename-window -t MCP "${corename_name}"
	# Only start SAM from main menu
	if [ "${menuonly}" == "yes" ] && [ "${corename_name}" == "MENU" ]; then
		samdebug " Triggered after menuonly=yes"
		MCP_SAM_trigger "${@}"
	elif [ "${menuonly}" == "no" ]; then
		samdebug " Triggered after menuonly=no"
		MCP_SAM_trigger "${@}"
	fi
	MCP_counter=${MCP_timeout}
	sleep 1
	MCP_loop "${@}"
}

function main() {
	#======== Start ========
	# Convert seconds to minutes
	MCP_timeout_minutes=$(echo - | awk -v t=${MCP_timeout} '{print t/60}')
	sleep ${bootsleep}
	MCP_createpipes
	MCP_monitors

	#======== DEBUG OUTPUT =========
	if [ "${samtrace}" == "yes" ]; then
		printf '%s\n' "********************************************************************************"
		#======== GLOBAL VARIABLES =========
		printf '%s\n' " mrsampath: ${mrsampath}"
		printf '%s\n' " misterpath: ${misterpath}"
		#======== LOCAL VARIABLES ========
		printf '%s\n' " commandline: ${@}"
		printf '%s\n' " MCP_timeout: ${MCP_timeout}"
		printf '%s\n' "********************************************************************************"
	fi
	corename_name=$(<${corename_file})
	tmux rename-window -t MCP "${corename_name}"
	if [ "${samdebug}" == "yes" ]; then
		echo "" | >"${mrsamtmp}/vardump_${samprocess}.log"
		declare -p >>"${mrsamtmp}/vardump_${samprocess}.log"
	fi
	trap 'MCP_counter=${MCP_timeout}' INT # Reset MCP_counter for Activity Triggers
	MCP_loop "${@}"
	trap - INT
}

main "${@}"
