#!/bin/bash
trap 'MCP_cleanup' EXIT TERM

# ======== GLOBAL VARIABLES =========
declare -g misterpath="/media/fat"
declare -g misterscripts="${misterpath}/Scripts"
declare -g mrsampath="${misterscripts}/.SuperAttract"
declare -g mrsamtmp="/tmp/.SAM_tmp"
declare -g userstartup="${mrpath}/linux/user-startup.sh"
declare -g userstartuptpl="${mrpath}/linux/_user-startup.sh"
declare -g corename_file="/tmp/CORENAME"
declare -g corename_name="printf '%s\n' $(<${corename_file})"

# Named Pipes
declare -g SAM_cmd_pipe="${mrsamtmp}/SAM_cmd_pipe"
declare -g MCP_cmd_pipe="${mrsamtmp}/MCP_cmd_pipe"
declare -g TTY_cmd_pipe="${mrsamtmp}/TTY_cmd_pipe"
declare -g SAM_Activity_pipe="${mrsamtmp}/SAM_Activity_pipe"
declare -g MCP_Activity_pipe="${mrsamtmp}/MCP_Activity_pipe"
declare -g MCP_Corename_Activity_pipe="${mrsamtmp}/MCP_CoreName_Activity_pipe"
declare -g MCP_CoreName_Change_pipe="${mrsamtmp}/MCP_CoreName_Change_pipe"

# ======== DEBUG VARIABLES ========
declare -gl samquiet="Yes"
declare -gl samdebug="No"
declare -gl samtrace="No"
declare -gi speedtest=0

# ======== TTY2OLED =======
declare -gl ttyenable="No"
declare -gi ttyupdate_pause=10
declare -gA tty_currentinfo=(
	[core_pretty]=""
	[name]=""
	[core]=""
	[counter]=0
	[name_scroll]=""
	[name_scroll_position]=0
	[name_scroll_direction]=1
	[update_pause]=${ttyupdate_pause}
)

#======== INI VARIABLES ========
# Change these in the INI file

declare -gl listenmouse="Yes"
declare -gl listenkeyboard="Yes"
declare -gl listenjoy="Yes"
declare -gl menuonly="Yes"

#======== LOCAL VARIABLES ========
declare -gi MCP_timeout=60
declare -gi MCP_counter=${MCP_timeout}
declare -g MCP_timeout_minutes=""

#========= PARSE INI =========
# Read INI, Check for mount point presence
while ! test -d ${misterpath}/; do
	sleep 1
	count=$(expr ${count} + 1)
	if test ${count} -eq 30; then
		printf '%s\n' " Mount timed out!"
		exit 1
	fi
done

if [ -f "${misterscripts}/Super_Attract_Mode.ini" ]; then
	source "${misterscripts}/Super_Attract_Mode.ini"
fi

#======== FUNCTIONS ========
function MCP_CoreName_Change() {
	# Monitor CORENAME for changes (to determine if the menu is currently running)
	inotifywait --event modify ${corename_file} --outfile ${MCP_CoreName_Change_pipe} 2>/dev/null &
}

function MCP_CoreName_Monitor() {
	# Spawn CORENAME monitoring process.
	corename_name=$(<${corename_file})
	printf '%s\n' ${corename_name} >${MCP_Corename_Activity_pipe} &
}

function MCP_jsmonitor() {

	declare -a jsdevices=()
	declare -a excludejoy=()
	declare -a jsnew=()

	# Make a list of all js devices on system
	shopt -s nullglob
	for joystick in /dev/input/js*; do
		jsdevices+=("${joystick}")
	done
	shopt -u nullglob

	# Exclude motion sensors from monitoring list. This is necessary or else SAM will detect constant input triggers from these js devices
	mapfile -t excludejoy < <(grep -iwns "motion sensors" /proc/bus/input/devices -A 7 | awk -F= '/Handlers/{print $2 }' | awk '/js/{ print $1 }')
	excludejoy=("${excludejoy[@]/#//dev/input/}")
	jsnew=($(comm -3 <(printf "%s\n" "${excludejoy[@]}" | sort) <(printf "%s\n" "${jsdevices[@]}" | sort) | sort -n))

	# Spawn Joystick monitoring process per detected joystick device (excluding motion sensors)
	shopt -s nullglob
	for joystick in ${jsnew[@]}; do
		if [ ! -z "${joystick}" ]; then
			[[ "${samquiet}" == "no" ]] && printf '%s\n' " Monitoring controller ${joystick}..."
			"${mrsampath}/SuperAttract_joy.py" "${joystick}" "${MCP_Activity_pipe}" 2>/dev/null &
		fi
	done
	shopt -u nullglob
}

function MCP_keybmonitor() {

	# We check for input on hidraw devices. First let's make sure these devices are keyboards...

	declare -a kbdevents=()
	declare -a rawinput=()
	declare -a kbddev=()

	kbdevents=($(ls /dev/input/by-path | grep "event-kbd")) # We know these are keyboards
	rawinput=($(ls /dev/hidraw*))

	# Collect all connected keyboards by physical address
	for keyboards in "${kbdevents[@]}"; do
		devpath=$(readlink --canonicalize "/dev/input/by-path/${keyboards}")
		kbd=${devpath##*/}
		kbddev+=($(cat /sys/class/input/${kbd}/device/uevent | grep PHYS | cut -d '=' -f2 | tr -d '""'))
		#printf '%s\n' "${kbddev[@]}"
	done

	# Compare if hidraw devices match keyboard device address
	for f in "${rawinput[@]}"; do
		kbdraw=${f##*/}
		rawdev=$(cat /sys/class/hidraw/${kbdraw}/device/uevent | grep HID_PHYS | cut -d '=' -f2)
		#printf "%s \t %s\n" ${kbdraw} "${rawdev}"

		for i in "${kbddev[@]}"; do
			if [ "${i}" == "${rawdev}" ]; then
				printf '%s\n' "${f} is a keyboard"
				"${mrsampath}/SuperAttract_keyboard.py" "${f}" "${MCP_Activity_pipe}" 2>/dev/null &
			fi
		done
	done
}

function MCP_msmonitor() {
	mouse="/dev/input/mice"
	[[ "${samquiet}" == "no" ]] && printf '%s\n' " Monitoring mouse ${mouse}..."
	"${mrsampath}/SuperAttract_mouse.py" "${mouse}" "${MCP_Activity_pipe}" 2>/dev/null &
}

function MCP_tty2oled_start() {
	echo " Starting TTY.."
	# If the TTY2oled isn't running we need to start it in monitoring only mode
	if [ -z "$(pidof SuperAttract_tty2oled)" ]; then
		tmux new-session -s TTY -d "${mrsampath}/SuperAttract_tty2oled" &
	fi
}

function MCP_SAM_trigger() {
	if [ $(ps aux | grep -ice "[S]uper_Attract_Mode.sh") == "0" ] && [ $(ps aux | grep -ice "[u]pdate") == "0" ]; then
		printf '%s\n' " No activity detected for ${MCP_timeout_minutes} minutes. SAM starting..."
		printf '%s ' $(date +%c)
		printf '\n'
		if [ "${ttyenable}" == "yes" ]; then
			MCP_tty2oled_start
		fi
		sleep 1
		if [ -z "${1}" ]; then
			tmux new-session -x 180 -y 40 -n "-= SAM Monitor -- Detach with ctrl-b d  =-" -s SAM -d "${misterscripts}/Super_Attract_Mode.sh" start_real &
		else
			tmux new-session -x 180 -y 40 -n "-= SAM Monitor -- Detach with ctrl-b d  =-" -s SAM -d "${misterscripts}/Super_Attract_Mode.sh" "${1}" start_real &
		fi
		sleep 0.5
	fi
}

function MCP_cleanup() {
	kill $(jobs -p)
	[[ -p ${MCP_cmd_pipe} ]] && rm ${MCP_cmd_pipe}
	[[ -p ${MCP_CoreName_Change_pipe} ]] && rm ${MCP_CoreName_Change_pipe}
	[[ -p ${MCP_Corename_Activity_pipe} ]] && rm ${MCP_Corename_Activity_pipe}
	[[ -p ${MCP_Activity_pipe} ]] && rm ${MCP_Activity_pipe}
	[[ -p ${SAM_Activity_pipe} ]] && rm ${SAM_Activity_pipe}
	[[ -e ${MCP_cmd_pipe} ]] && rm ${MCP_cmd_pipe}
	[[ -e ${MCP_CoreName_Change_pipe} ]] && rm ${MCP_CoreName_Change_pipe}
	[[ -e ${MCP_Corename_Activity_pipe} ]] && rm ${MCP_Corename_Activity_pipe}
	[[ -e ${MCP_Activity_pipe} ]] && rm ${MCP_Activity_pipe}
	[[ -e ${SAM_Activity_pipe} ]] && rm ${SAM_Activity_pipe}
}

function MCP_createpipes() {
	[[ ! -p ${MCP_cmd_pipe} ]] && mkfifo ${MCP_cmd_pipe}
	[[ ! -p ${MCP_CoreName_Change_pipe} ]] && mkfifo ${MCP_CoreName_Change_pipe}
	[[ ! -p ${MCP_Corename_Activity_pipe} ]] && mkfifo ${MCP_Corename_Activity_pipe}
	[[ ! -p ${MCP_Activity_pipe} ]] && mkfifo ${MCP_Activity_pipe}
	[[ ! -p ${SAM_Activity_pipe} ]] && mkfifo ${SAM_Activity_pipe}

	while true; do
		if [[ -p ${MCP_cmd_pipe} ]]; then
			if read line <${MCP_cmd_pipe}; then
				set -- junk ${line}
				shift
				case "${1}" in
				stop | quit | exit)
					exit 0
					break
					;;
				*)
					echo " ERROR! ${line} is unknown."
					echo " Try $(basename -- ${0}) help"
					echo " Or check the Github readme."
					echo " Named Pipe"
					;;
				esac
			fi
		fi
		sleep 0.1
	done &
}

function MCP_monitors() {
	# Start monitoring for CORENAME changes
	[[ "${samquiet}" == "no" ]] && printf '%s' " Starting CORENAME change monitor..."
	MCP_CoreName_Change
	[[ "${samquiet}" == "no" ]] && printf '%s\n' " Done!"

	# Spawn CORENAME monitoring process.
	[[ "${samquiet}" == "no" ]] && printf '%s' " Starting CORENAME monitor..."
	MCP_CoreName_Monitor
	[[ "${samquiet}" == "no" ]] && printf '%s\n' " Done!"

	if [ "${listenjoy}" == "yes" ]; then
		# Spawn joystick monitoring process per detected joystick device
		[[ "${samquiet}" == "no" ]] && printf '%s\n' " Starting joystick monitor..."
		MCP_jsmonitor
		[[ "${samquiet}" == "no" ]] && printf '%s\n' " Done!"

	fi
	if [ "${listenkeyboard}" == "yes" ]; then
		# Spawn keyboard monitoring processes
		[[ "${samquiet}" == "no" ]] && printf '%s\n' " Starting keyboard monitor..."
		if [[ /dev/input/by-path/*kbd ]]; then
			MCP_keybmonitor
		fi
		[[ "${samquiet}" == "no" ]] && printf '%s\n' " Done!"
	fi

	if [ "${listenmouse}" == "yes" ]; then
		# Spawn mouse monitoring process per detected mouse device
		[[ "${samquiet}" == "no" ]] && printf '%s\n' " Starting mouse monitor..."
		MCP_msmonitor
		[[ "${samquiet}" == "no" ]] && printf '%s\n' " Done!"
	fi

	while true; do
		if read line <${MCP_Activity_pipe}; then
			tmux send-keys -t MCP C-c ENTER
			echo -ne "\033[0K\r\033[A"
			# printf '%s\n' "${line}"
			if [ ! -z "$(pidof Super_Attract_Mode.sh)" ]; then
				printf '%s\n' "${line}" >${SAM_Activity_pipe}
			else
				[[ -p ${SAM_Activity_pipe} ]] && rm ${SAM_Activity_pipe}
			fi
		fi
		sleep 0.1
	done &

	while true; do
		if read line <${MCP_CoreName_Change_pipe}; then
			MCP_CoreName_Monitor
		fi
		sleep 0.1
	done &

	while true; do
		if read line <${MCP_Corename_Activity_pipe}; then
			if [ "${line}" != "${corename_name}" ]; then
				# If we detect a change to CORENAME:
				# Spawn CORENAME monitoring process
				tmux rename-window -t MCP "${line}"
				tmux send-keys -t MCP C-c ENTER
				echo -ne "\033[0K\r\033[A"
				MCP_CoreName_Change
			fi
			# printf '%s\n' "${line}"
		fi
		sleep 0.1
	done &
}

# ======== MAIN LOOP ========
function MCP_loop() {
	while [ ${MCP_counter} -gt 0 ]; do
		echo -ne " Starting in ${MCP_counter}...\033[0K\r"
		sleep 1
		((MCP_counter--))
		corename_name=$(<${corename_file})
		tmux rename-window -t MCP "${corename_name}"
	done
	corename_name=$(<${corename_file})
	tmux rename-window -t MCP "${corename_name}"
	# Only start SAM from main menu
	if [ "${menuonly}" == "yes" ] && [ "${corename_name}" == "MENU" ]; then
		printf '%s\n' " Triggered after menuonly=yes"
		MCP_SAM_trigger
	elif [ "${menuonly}" == "no" ]; then
		echo " Triggered after menuonly=no"
		MCP_SAM_trigger
	fi
	MCP_counter=${MCP_timeout}
	sleep 1
	MCP_loop
}

function main() {
	#======== Start ========

	# Convert seconds to minutes
	MCP_timeout_minutes=$(echo - | awk -v t=${MCP_timeout} '{print t/60}')

	MCP_createpipes
	MCP_monitors
	#======== DEBUG OUTPUT =========
	if [ "${samtrace}" == "yes" ]; then
		printf '%s\n' "********************************************************************************"
		#======== GLOBAL VARIABLES =========
		printf '%s\n' " mrsampath: ${mrsampath}"
		printf '%s\n' " misterpath: ${misterpath}"
		#======== LOCAL VARIABLES ========
		printf '%s\n' " commandline: ${@}"
		printf '%s\n' " MCP_timeout: ${MCP_timeout}"
		printf '%s\n' "********************************************************************************"
	fi
	corename_name=$(<${corename_file})
	tmux rename-window -t MCP "${corename_name}"
	if [ ! -z "${1}" ] && [ "${1}" == "quickstart" ]; then
		shift
		MCP_SAM_trigger "${1}"
	fi
	trap 'MCP_counter=${MCP_timeout}' INT # Reset MCP_counter for Activity Triggers
	MCP_loop
	trap - INT
}

main "${@}"
