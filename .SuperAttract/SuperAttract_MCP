#!/bin/bash
trap 'MCP_cleanup' 1 2 3 9 15

#======== INI VARIABLES ========
# Change these in the INI file

#======== GLOBAL VARIABLES =========
declare -g mrsampath="/media/fat/Scripts/.SuperAttract"
declare -g misterpath="/media/fat"
declare -g SAM_cmd_pipe="/tmp/.SAM_tmp/SAM_cmd_pipe"
declare -g MCP_cmd_pipe="/tmp/.SAM_tmp/MCP_cmd_pipe"
declare -g activity_pipe="/tmp/.SAM_tmp/SAM_Activity"
declare -g activity_pipe2="/tmp/.SAM_tmp/SAM_Activity2"
declare -g corename_pipe="/tmp/.SAM_tmp/SAM_CoreName_Activity"
declare -g activity_change_pipe="/tmp/.SAM_tmp/SAM_Activity_Change"
declare -g corename_change_pipe="/tmp/.SAM_tmp/SAM_CoreName_Change"
declare -gl listenmouse="Yes"
declare -gl listenkeyboard="Yes"
declare -gl listenjoy="Yes"
declare -gl menuonly="Yes"

#======== DEBUG VARIABLES ========
declare -gl samquiet="Yes"
declare -gl samdebug="No"
declare -gl samtrace="No"

#======== LOCAL VARIABLES ========
declare -gi mcptimeout=60
declare -gi mcp_counter=${mcptimeout}
declare -g mcptimeout_minutes=""
declare -g corename_name=$(</tmp/CORENAME)

# ======== TTY2OLED =======
declare -gl ttyenable="No"
declare -gl ttyuseack="No"

#========= PARSE INI =========
# Read INI, Check for mount point presence
while ! test -d /media/fat/; do
	sleep 1
	count=$(expr $count + 1)
	if test $count -eq 30; then
		printf '%s\n' " Mount timed out!"
		exit 1
	fi
done

if [ -f "${misterpath}/Scripts/Super_Attract_Mode.ini" ]; then
	source "${misterpath}/Scripts/Super_Attract_Mode.ini"
fi

if [ "${1,,}" == "tty2oled" ]; then
	/media/fat/tty2oled/S60tty2oled start
	break
fi

#======== FUNCTIONS ========
function sam_corename_change() {
	# Monitor CORENAME for changes (to determine if the menu is currently running)
	inotifywait --event modify /tmp/CORENAME --outfile ${corename_change_pipe} 2>/dev/null &
}

function sam_activity_change() {
	# Monitor joystick devices for changes
	inotifywait --quiet --monitor --event create --event delete /dev/input --include js --include by-path --outfile ${activity_change_pipe} 2>/dev/null &
}

function sam_corename_monitor() {
	# Spawn CORENAME monitoring process.
	corename_name=$(</tmp/CORENAME)
	printf '%s\n' ${corename_name} >${corename_pipe} &
}

function sam_jsmonitor() {

	declare -a jsdevices=()
	declare -a excludejoy=()
	declare -a jsnew=()

	# Make a list of all js devices on system
	shopt -s nullglob
	for joystick in /dev/input/js*; do
		jsdevices+=("${joystick}")
	done
	shopt -u nullglob

	# Exclude motion sensors from monitoring list. This is necessary or else SAM will detect constant input triggers from these js devices
	mapfile -t excludejoy < <(grep -iwns "motion sensors" /proc/bus/input/devices -A 7 | awk -F= '/Handlers/{print $2 }' | awk '/js/{ print $1 }')
	excludejoy=("${excludejoy[@]/#//dev/input/}")
	jsnew=($(comm -3 <(printf "%s\n" "${excludejoy[@]}" | sort) <(printf "%s\n" "${jsdevices[@]}" | sort) | sort -n))

	# Spawn Joystick monitoring process per detected joystick device (excluding motion sensors)
	shopt -s nullglob
	for joystick in ${jsnew[@]}; do
		if [ ! -z "${joystick}" ]; then
			if [ "${samquiet}" == "no" ]; then printf '%s\n' " Monitoring controller ${joystick}..."; fi
			"${mrsampath}/SuperAttract_joy.py" "${joystick}" 2>/dev/null &
		fi
	done
	shopt -u nullglob
}

function sam_keybmonitor() {

	# We check for input on hidraw devices. First let's make sure these devices are keyboards...

	declare -a kbdevents=()
	declare -a rawinput=()
	declare -a kbddev=()

	kbdevents=($(ls /dev/input/by-path | grep "event-kbd")) # We know these are keyboards
	rawinput=($(ls /dev/hidraw*))

	# Collect all connected keyboards by physical address
	for keyboards in "${kbdevents[@]}"; do
		devpath=$(readlink --canonicalize "/dev/input/by-path/${keyboards}")
		kbd=${devpath##*/}
		kbddev+=("$(cat /sys/class/input/${kbd}/device/uevent | grep PHYS | cut -d '=' -f2 | tr -d '""')")
		#printf '%s\n' "${kbddev[@]}"
	done

	# Compare if hidraw devices match keyboard device address
	for f in "${rawinput[@]}"; do
		kbdraw=${f##*/}
		rawdev="$(cat /sys/class/hidraw/${kbdraw}/device/uevent | grep HID_PHYS | cut -d '=' -f2)"
		#printf "%s \t %s\n" $kbdraw "$rawdev"

		for i in "${kbddev[@]}"; do
			if [ "$i" == "$rawdev" ]; then
				printf '%s\n' "$f is a keyboard"
				"${mrsampath}/SuperAttract_keyboard.py" "${f}" 2>/dev/null &
			fi
		done
	done
}

function sam_msmonitor() {
	mouse="/dev/input/mice"
	if [ "${samquiet}" == "no" ]; then printf '%s\n' " Monitoring mouse ${mouse}..."; fi
	"${mrsampath}/SuperAttract_mouse.py" "${mouse}" 2>/dev/null &
}

function tty2oled_start() {
	echo " Starting TTY.."
	# If the TTY2oled isn't running we need to start it in monitoring only mode
	if [ -z "$(pidof SuperAttract_tty2oled)" ]; then
		tmux new-session -s TTY2OLED -d "${mrsampath}/SuperAttract_tty2oled" &
	fi
}

function sam_trigger() {
	if [ "$(ps aux | grep -ice "[S]uper_Attract_Mode.sh")" == "0" ] && [ "$(ps aux | grep -ice "[u]pdate")" == "0" ]; then
		printf '%s\n' " No activity detected for ${mcptimeout_minutes} minutes. SAM starting..."
		printf '%s ' $(date +%c)
		printf '\n'
		if [ "${ttyenable}" == "yes" ]; then
			tty2oled_start
		fi
		sleep 1
		tmux new-session -x 180 -y 40 -n "-= SAM Monitor -- Detach with ctrl-b d  =-" -s SAM -d "${misterpath}/Scripts/Super_Attract_Mode.sh" start_real ${nextcore}
		sleep 0.5
	fi
}

function MCP_cleanup() {
	[[ -p ${MCP_cmd_pipe} ]] && rm ${MCP_cmd_pipe}
	[[ -p ${corename_change_pipe} ]] && rm ${corename_change_pipe}
	[[ -p ${corename_pipe} ]] && rm ${corename_pipe}
	[[ -p ${activity_change_pipe} ]] && rm ${activity_change_pipe}
	[[ -p ${activity_pipe} ]] && rm ${activity_pipe}
	[[ -p ${activity_pipe2} ]] && rm ${activity_pipe2}
	[[ -e ${MCP_cmd_pipe} ]] && rm ${MCP_cmd_pipe}
	[[ -e ${corename_change_pipe} ]] && rm ${corename_change_pipe}
	[[ -e ${corename_pipe} ]] && rm ${corename_pipe}
	[[ -e ${activity_change_pipe} ]] && rm ${activity_change_pipe}
	[[ -e ${activity_pipe} ]] && rm ${activity_pipe}
	[[ -e ${activity_pipe2} ]] && rm ${activity_pipe2}
}

function createpipes() {
	[[ ! -p ${MCP_cmd_pipe} ]] && mkfifo ${MCP_cmd_pipe}
	[[ ! -p ${corename_change_pipe} ]] && mkfifo ${corename_change_pipe}
	[[ ! -p ${corename_pipe} ]] && mkfifo ${corename_pipe}
	[[ ! -p ${activity_change_pipe} ]] && mkfifo ${activity_change_pipe}
	[[ ! -p ${activity_pipe} ]] && mkfifo ${activity_pipe}
	[[ ! -p ${activity_pipe2} ]] && mkfifo ${activity_pipe2}

	while true; do
		if [[ -p ${MCP_cmd_pipe} ]]; then
			if read line <${MCP_cmd_pipe}; then
				set -- junk ${line}
				shift
				case "${1}" in
				stop | quit)
					# sam_exit 0 "stop"
					break
					;;
				exit)
					# sam_exit ${2}
					break
					;;
				*)
					echo " ERROR! ${line} is unknown."
					echo " Try $(basename -- ${0}) help"
					echo " Or check the Github readme."
					echo " Named Pipe"
					;;
				esac
			fi
		fi
		sleep 0.1
	done &
}

function monitors() {
	# Start monitoring for CORENAME changes
	if [ "${samquiet}" == "no" ]; then printf '%s' " Starting CORENAME change monitor..."; fi
	sam_corename_change
	if [ "${samquiet}" == "no" ]; then printf '%s\n' " Done!"; fi

	# Spawn CORENAME monitoring process.
	if [ "${samquiet}" == "no" ]; then printf '%s' " Starting CORENAME monitor..."; fi
	sam_corename_monitor
	if [ "${samquiet}" == "no" ]; then printf '%s\n' " Done!"; fi

	# Start monitoring for joystick device changes
	if [ "${samquiet}" == "no" ]; then printf '%s\n' " Starting devices change monitor..."; fi
	sam_activity_change
	if [ "${samquiet}" == "no" ]; then printf '%s\n' " Done!"; fi

	if [ "${listenjoy}" == "yes" ]; then
		# Spawn joystick monitoring process per detected joystick device
		if [ "${samquiet}" == "no" ]; then printf '%s\n' " Starting joystick monitor..."; fi
		sam_jsmonitor
		if [ "${samquiet}" == "no" ]; then printf '%s\n' " Done!"; fi

	fi
	if [ "${listenkeyboard}" == "yes" ]; then
		# Spawn keyboard monitoring processes
		if [ "${samquiet}" == "no" ]; then printf '%s\n' " Starting keyboard monitor..."; fi
		if [[ /dev/input/by-path/*kbd ]]; then
			sam_keybmonitor
		fi
		if [ "${samquiet}" == "no" ]; then printf '%s\n' " Done!"; fi
	fi

	if [ "${listenmouse}" == "yes" ]; then
		# Spawn mouse monitoring process per detected mouse device
		if [ "${samquiet}" == "no" ]; then printf '%s\n' " Starting mouse monitor..."; fi
		sam_msmonitor
		if [ "${samquiet}" == "no" ]; then printf '%s\n' " Done!"; fi
	fi

	while true; do
		if read line <${activity_change_pipe}; then
			# If we detect a change to devices:
			printf '%s\n' "${line}" >${activity_pipe}
		fi
		sleep 0.1
	done &

	while true; do
		if read line <${activity_pipe}; then
			tmux send-keys -t MCP C-c ENTER
			echo -ne "\033[0K\r\033[A"
			# printf '%s\n' "${line}"
			if [ ! -z "$(pidof Super_Attract_Mode.sh)" ]; then
				printf '%s\n' "${line}" >${activity_pipe2}
			fi
		fi
		sleep 0.1
	done &

	while true; do
		if read line <${corename_change_pipe}; then
			sam_corename_monitor
		fi
		sleep 0.1
	done &

	while true; do
		if read line <${corename_pipe}; then
			if [ ! "${line}" == "${corename_name}" ]; then
				# If we detect a change to CORENAME:
				# Spawn CORENAME monitoring process
				tmux rename-window -t MCP "${line}"
				tmux send-keys -t MCP C-c ENTER
				echo -ne "\033[0K\r\033[A"
				sam_corename_change
			fi
			# printf '%s\n' "${line}"
		fi
		sleep 0.1
	done &
}

# ======== MAIN LOOP ========
function MCP_loop() {
	while [ ${mcp_counter} -gt 0 ]; do
		echo -ne " Starting in ${mcp_counter}...\033[0K\r"
		sleep 1
		((mcp_counter--))
	done
	corename_name=$(</tmp/CORENAME)
	tmux rename-window -t MCP "$corename_name"
	# Only start SAM from main menu
	if [ "${menuonly}" == "yes" ] && [ "${corename_name}" == "MENU" ]; then
		printf '%s\n' " Triggered after menuonly=yes"
		sam_trigger
	elif [ "${menuonly}" == "no" ]; then
		echo " Triggered after menuonly=no"
		sam_trigger
	fi
	mcp_counter=${mcptimeout}
	sleep 1
	MCP_loop
}

function main() {
	#======== Start ========

	# Convert seconds to minutes
	mcptimeout_minutes=$(echo - | awk -v t=${mcptimeout} '{print t/60}')

	createpipes
	monitors
	#======== DEBUG OUTPUT =========
	if [ "${samtrace}" == "yes" ]; then
		printf '%s\n' "********************************************************************************"
		#======== GLOBAL VARIABLES =========
		printf '%s\n' " mrsampath: ${mrsampath}"
		printf '%s\n' " misterpath: ${misterpath}"
		#======== LOCAL VARIABLES ========
		printf '%s\n' " commandline: ${@}"
		printf '%s\n' " mcptimeout: ${mcptimeout}"
		printf '%s\n' "********************************************************************************"
	fi
	corename_name=$(</tmp/CORENAME)
	tmux rename-window -t MCP "$corename_name"
	if [ ! -z "$1" ] && [ "$1" == "quickstart" ]; then
		sam_trigger
	fi
	trap 'mcp_counter=${mcptimeout}' INT # Reset mcp_counter for Activity Triggers
	MCP_loop
	trap - INT
}

main "${@}"
