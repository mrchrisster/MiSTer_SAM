#!/bin/bash
trap 'MCP_cleanup' EXIT TERM

# ======== GLOBAL VARIABLES =========
declare -g misterpath="/media/fat"
declare -g misterscripts="${misterpath}/Scripts"
declare -g mrsampath="${misterscripts}/.SuperAttract"
declare -g mrsamtmp="/tmp/.SAM_tmp"
declare -g userstartup="${misterpath}/linux/user-startup.sh"
declare -g userstartuptpl="${misterpath}/linux/_user-startup.sh"
declare -g gamelistpath="${mrsampath}/SAM_Gamelists"
declare -g gamelistpathtmp="/tmp/.SAM_List"
declare -g excludepath="${mrsampath}/SAM_Excludelists"
declare -g tmpfile="${gamelistpathtmp}/tmpfile"
declare -g tmpfile2="${gamelistpathtmp}/tmpfile2"
declare -g corename_file="/tmp/CORENAME"
declare -g corename_name="printf '%s\n' $(<${corename_file})"
declare -gl corelistall="amiga arcade atari2600 atari5200 atari7800 atarilynx c64 fds gb gbc gba genesis gg megacd neogeo nes s32x sms snes tgfx16 tgfx16cd psx"

# Named Pipes
declare -g SAM_cmd_pipe="${mrsamtmp}/SAM_cmd_pipe"
declare -g MCP_cmd_pipe="${mrsamtmp}/MCP_cmd_pipe"
declare -g TTY_cmd_pipe="${mrsamtmp}/TTY_cmd_pipe"
declare -g SAM_Activity_pipe="${mrsamtmp}/SAM_Activity_pipe"
declare -g MCP_Activity_pipe="${mrsamtmp}/MCP_Activity_pipe"
declare -g MCP_Corename_Activity_pipe="${mrsamtmp}/MCP_CoreName_Activity_pipe"
declare -g MCP_CoreName_Change_pipe="${mrsamtmp}/MCP_CoreName_Change_pipe"

declare -gi bootsleep="60"

# ======== DEBUG VARIABLES ========
declare -gl samquiet="Yes"
declare -gl samdebug="No"
declare -gl samtrace="No"
declare -gi speedtest=0

# ======== TTY2OLED =======
declare -gl ttyenable="No"
declare -gi ttyupdate_pause=10
declare -gA tty_currentinfo=(
	[core_pretty]=""
	[name]=""
	[core]=""
	[counter]=0
	[name_scroll]=""
	[name_scroll_position]=0
	[name_scroll_direction]=1
	[update_pause]=${ttyupdate_pause}
)

#======== INI VARIABLES ========
# Change these in the INI file

declare -gl listenmouse="Yes"
declare -gl listenkeyboard="Yes"
declare -gl listenjoy="Yes"
declare -gl menuonly="Yes"

#======== LOCAL VARIABLES ========
declare -gi MCP_timeout=60
declare -gi MCP_counter=${MCP_timeout}
declare -g MCP_timeout_minutes=""

# ======== INI VARIABLES ========
declare -gl usedefaultpaths="Yes"
declare -g amigashared="${CORE_PATH_FINAL[amiga]}/shared"
# Change these in the INI file

function init_default_path_vars() {
	# ======== CORE PATHS ========
	declare -g amigapath="${misterpath}/Games/Amiga"
	declare -g arcadepath="${misterpath}/_Arcade"
	declare -g atari2600path="${misterpath}/Games/Atari7800"
	declare -g atari5200path="${misterpath}/Games/Atari5200"
	declare -g atari7800path="${misterpath}/Games/Atari7800"
	declare -g atarilynxpath="${misterpath}/Games/AtariLynx"
	declare -g c64path="${misterpath}/Games/C64"
	declare -g fdspath="${misterpath}/Games/NES"
	declare -g gbpath="${misterpath}/Games/Gameboy"
	declare -g gbcpath="${misterpath}/Games/Gameboy"
	declare -g gbapath="${misterpath}/Games/GBA"
	declare -g genesispath="${misterpath}/Games/Genesis"
	declare -g ggpath="${misterpath}/Games/SMS"
	declare -g megacdpath="${misterpath}/Games/MegaCD"
	declare -g neogeopath="${misterpath}/Games/NeoGeo"
	declare -g nespath="${misterpath}/Games/NES"
	declare -g s32xpath="${misterpath}/Games/S32X"
	declare -g smspath="${misterpath}/Games/SMS"
	declare -g snespath="${misterpath}/Games/SNES"
	declare -g tgfx16path="${misterpath}/Games/TGFX16"
	declare -g tgfx16cdpath="${misterpath}/Games/TGFX16-CD"
	declare -g psxpath="${misterpath}/Games/PSX"

	# ======== CORE PATHS EXTRA ========
	declare -g amigapathextra=""
	declare -g arcadepathextra=""
	declare -g atari2600pathextra=""
	declare -g atari5200pathextra=""
	declare -g atari7800pathextra=""
	declare -g atarilynxpathextra=""
	declare -g c64pathextra=""
	declare -g fdspathextra=""
	declare -g gbpathextra=""
	declare -g gbcpathextra=""
	declare -g gbapathextra=""
	declare -g genesispathextra=""
	declare -g ggpathextra=""
	declare -g megacdpathextra=""
	declare -g neogeopathextra=""
	declare -g nespathextra=""
	declare -g s32xpathextra=""
	declare -g smspathextra=""
	declare -g snespathextra=""
	declare -g tgfx16pathextra=""
	declare -g tgfx16cdpathextra=""
	declare -g psxpathextra=""

	# ======== CORE PATHS RBF ========
	declare -g amigapathrbf="_Computer"
	declare -g arcadepathrbf="_Arcade"
	declare -g atari2600pathrbf="_Console"
	declare -g atari5200pathrbf="_Console"
	declare -g atari7800pathrbf="_Console"
	declare -g atarilynxpathrbf="_Console"
	declare -g c64pathrbf="_Computer"
	declare -g fdspathrbf="_Console"
	declare -g gbpathrbf="_Console"
	declare -g gbcpathrbf="_Console"
	declare -g gbapathrbf="_Console"
	declare -g genesispathrbf="_Console"
	declare -g ggpathrbf="_Console"
	declare -g megacdpathrbf="_Console"
	declare -g neogeopathrbf="_Console"
	declare -g nespathrbf="_Console"
	declare -g s32xpathrbf="_Console"
	declare -g smspathrbf="_Console"
	declare -g snespathrbf="_Console"
	declare -g tgfx16pathrbf="_Console"
	declare -g tgfx16cdpathrbf="_Console"
	declare -g psxpathrbf="_Console"
}

function init_default_paths() {
	# Default rom path search directories
	declare -ga GAMESDIR_FOLDERS=(
		/media/usb7/games
		/media/usb6/games
		/media/usb5/games
		/media/usb4/games
		/media/usb3/games
		/media/usb2/games
		/media/usb1/games
		/media/usb0/games
		${misterpath}/cifs/games
		${misterpath}/games
		/media/usb7
		/media/usb6
		/media/usb5
		/media/usb4
		/media/usb3
		/media/usb2
		/media/usb1
		/media/usb0
		${misterpath}/cifs
		${misterpath}
	)

	declare -g GET_SYSTEM_FOLDER_GAMESDIR=""
	declare -g GET_SYSTEM_FOLDER_RESULT=""
	if [ ${usedefaultpaths} == "yes" ]; then
		echo "" | >${mrsamtmp}/default_paths
		for core in ${corelistall}; do
			defaultpath "${core}"
			# write to output file
			echo $(declare -p ${core}path | sed 's/declare -- //') >>${mrsamtmp}/default_paths
		done
	fi
}

function GET_SYSTEM_FOLDER() {
	local SYSTEM="${1}"
	for folder in "${GAMESDIR_FOLDERS[@]}"; do
		local RESULT=$(find "${folder}" -maxdepth 1 -iname "${SYSTEM}" -printf "%P\n" -quit 2>/dev/null)
		if [[ "${RESULT}" != "" ]]; then
			GET_SYSTEM_FOLDER_GAMESDIR="${folder}"
			GET_SYSTEM_FOLDER_RESULT="${RESULT}"
			break
		fi
	done
}

function defaultpath() {
	local SYSTEM="${1}"
	local SYSTEM_ORG="${SYSTEM}"
	if [ ${SYSTEM} == "arcade" ]; then
		SYSTEM="_arcade"
	fi
	if [ ${SYSTEM} == "atari2600" ]; then
		SYSTEM="atari7800"
	fi
	if [ ${SYSTEM} == "fds" ]; then
		SYSTEM="nes"
	fi
	if [ ${SYSTEM} == "gb" ]; then
		SYSTEM="gameboy"
	fi
	if [ ${SYSTEM} == "gbc" ]; then
		SYSTEM="gameboy"
	fi
	if [ ${SYSTEM} == "gg" ]; then
		SYSTEM="sms"
	fi
	if [ ${SYSTEM} == "tgfx16cd" ]; then
		SYSTEM="tgfx16-cd"
	fi
	shift

	GET_SYSTEM_FOLDER "${SYSTEM}"
	local SYSTEM_FOLDER="${GET_SYSTEM_FOLDER_RESULT}"
	local GAMESDIR="${GET_SYSTEM_FOLDER_GAMESDIR}"

	if [[ "${SYSTEM_FOLDER}" != "" ]]; then
		eval ${SYSTEM_ORG}"path"="${GAMESDIR}/${GET_SYSTEM_FOLDER_RESULT}"
	fi
}

function init_amigashared_path() {
	var=$(grep shared_folder= ${misterpath}/Mister.ini | sed -e 's/shared_folder=//')
	samdebug " Grep got ${var}"
	if [ ! -z "${var}" ]; then
		samdebug " Variable is not empty"
		if [ ! -d ${var} ]; then
			samdebug " Variable is not a valid directory"
			if [ "${var: -1}" != "/" ]; then
				samdebug " Variable does not contain / in the last position"
				var=$(echo ${var} | sed 's:/.$::')
			fi
		fi
		if [ -d ${var} ]; then
			samdebug " Variable is a valid directory"
			if [ "${var: -1}" == "/" ]; then
				samdebug " Variable contains / in the last position"
				var="${var::${#var}-1}"
			fi
			samdebug " Setting the amigashared variable"
			amigashared="${var}"
		fi
	else
		samdebug " Variable is empty sticking with default"
	fi

	# write to output file
	echo "amigashared=${amigashared}" >${mrsamtmp}/amigashared_path
	samquiet " Amigashared directory is ${amigashared} "
}

#========= PARSE INI =========
# Read INI, Check for mount point presence
while ! test -d ${misterpath}/; do
	sleep 1
	count=$(expr ${count} + 1)
	if test ${count} -eq 30; then
		printf '%s\n' " Mount timed out!"
		exit 1
	fi
done

#======== FUNCTIONS ========
function sam_createfolders() {
	# Create folders if they don't exist
	[[ ! -d "${mrsampath}" ]] && mkdir -p "${mrsampath}"
	[[ ! -d "${gamelistpath}" ]] && mkdir -p "${gamelistpath}"
	[[ ! -d "${gamelistpathtmp}" ]] && mkdir -p "${gamelistpathtmp}"
	[[ -e "${tmpfile}" ]] && { rm "${tmpfile}"; }
	[[ -e "${tmpfile2}" ]] && { rm "${tmpfile2}"; }
	[[ ! -d "${excludepath}" ]] && mkdir -p "${excludepath}"
	[[ -d "${mrsamtmp}/SAM_config" ]] && rm -rf "${mrsamtmp}/SAM_config"
	[[ ! -d "${mrsamtmp}/SAM_config" ]] && mkdir -p "${mrsamtmp}/SAM_config"
}

function samdebug() {
	if [ "${samdebug}" == "yes" ]; then
		if [ "${1}" == "-n" ]; then
			echo -en "\e[1m\e[31m${2-}\e[0m"
		else
			echo -e "\e[1m\e[31m${1-}\e[0m"
		fi
	fi
}

function samquiet() {
	if [ "${samquiet}" == "no" ]; then
		if [ "${1}" == "-n" ]; then
			echo -en "\e[1m\e[32m${2-}\e[0m"
		else
			echo -e "\e[1m\e[32m${1-}\e[0m"
		fi
	fi
}

function MCP_CoreName_Change() {
	# Monitor CORENAME for changes (to determine if the menu is currently running)
	inotifywait --event modify ${corename_file} --outfile ${MCP_CoreName_Change_pipe} 2>/dev/null &
}

function MCP_CoreName_Monitor() {
	# Spawn CORENAME monitoring process.
	corename_name=$(<${corename_file})
	printf '%s\n' ${corename_name} >${MCP_Corename_Activity_pipe} &
}

function MCP_jsmonitor() {

	declare -a jsdevices=()
	declare -a excludejoy=()
	declare -a jsnew=()

	# Make a list of all js devices on system
	shopt -s nullglob
	for joystick in /dev/input/js*; do
		jsdevices+=("${joystick}")
	done
	shopt -u nullglob

	# Exclude motion sensors from monitoring list. This is necessary or else SAM will detect constant input triggers from these js devices
	mapfile -t excludejoy < <(grep -iwns "motion sensors" /proc/bus/input/devices -A 7 | awk -F= '/Handlers/{print $2 }' | awk '/js/{ print $1 }')
	excludejoy=("${excludejoy[@]/#//dev/input/}")
	jsnew=($(comm -3 <(printf "%s\n" "${excludejoy[@]}" | sort) <(printf "%s\n" "${jsdevices[@]}" | sort) | sort -n))

	# Spawn Joystick monitoring process per detected joystick device (excluding motion sensors)
	shopt -s nullglob
	samdebug "-n" " Monitoring controller(s)"
	for joystick in ${jsnew[@]}; do
		if [ ! -z "${joystick}" ]; then
			j=$(echo ${joystick} | sed 's./dev/input/..')
			samdebug "-n" " ${j}..."
			"${mrsampath}/SuperAttract_joy.py" "${joystick}" "${MCP_Activity_pipe}" 2>/dev/null &
		fi
	done
	shopt -u nullglob
}

function MCP_keybmonitor() {

	# We check for input on hidraw devices. First let's make sure these devices are keyboards...

	declare -a kbdevents=()
	declare -a rawinput=()
	declare -a kbddev=()

	kbdevents=($(ls /dev/input/by-path | grep "event-kbd")) # We know these are keyboards
	rawinput=($(ls /dev/hidraw*))

	# Collect all connected keyboards by physical address
	for keyboards in "${kbdevents[@]}"; do
		devpath=$(readlink --canonicalize "/dev/input/by-path/${keyboards}")
		kbd=${devpath##*/}
		kbddev+=($(cat /sys/class/input/${kbd}/device/uevent | grep PHYS | cut -d '=' -f2 | tr -d '""'))
		#printf '%s\n' "${kbddev[@]}"
	done

	# Compare if hidraw devices match keyboard device address
	samdebug "-n" " Monitoring keyboard(s)"
	for f in "${rawinput[@]}"; do
		kbdraw=${f##*/}
		rawdev=$(cat /sys/class/hidraw/${kbdraw}/device/uevent | grep HID_PHYS | cut -d '=' -f2)
		#printf "%s \t %s\n" ${kbdraw} "${rawdev}"

		for i in "${kbddev[@]}"; do
			if [ "${i}" == "${rawdev}" ]; then
				k=$(echo ${f} | sed 's./dev/..')
				samdebug "-n" " ${k}..."
				"${mrsampath}/SuperAttract_keyboard.py" "${f}" "${MCP_Activity_pipe}" 2>/dev/null &
			fi
		done
	done
}

function MCP_msmonitor() {
	mouse="/dev/input/mice"
	m=$(echo ${mouse} | sed 's./dev/input/..')
	samdebug "-n" " Monitoring all mice through ${m}..."
	"${mrsampath}/SuperAttract_mouse.py" "${mouse}" "${MCP_Activity_pipe}" 2>/dev/null &
}

function MCP_tty2oled_start() {
	echo " Starting TTY.."
	# If the TTY2oled isn't running we need to start it in monitoring only mode
	if [ -z "$(pidof SuperAttract_tty2oled)" ]; then
		tmux new-session -s TTY -d "${mrsampath}/SuperAttract_tty2oled" &
	fi
}

function MCP_SAM_trigger() {
	samdebug " args: ${@}"
	if [ $(ps aux | grep -ice "[S]uper_Attract_Mode.sh") == "0" ] && [ $(ps aux | grep -ice "[u]pdate") == "0" ]; then
		samquiet " No activity detected for ${MCP_timeout_minutes} minutes. SAM starting..."
		samdebug " $(date '+%m-%d-%Y_%H:%M:%S' | sed 's/\n/ /g')"
		[[ "${ttyenable}" == "yes" ]] && MCP_tty2oled_start
		sleep 1
		tmux new-session -x 180 -y 40 -n "-= SAM Monitor -- Detach with ctrl-b d  =-" -s SAM -d "${misterscripts}/Super_Attract_Mode.sh" "${@}" start_real &
		sleep 0.5
	fi
}

function MCP_cleanup() {
	[[ -p ${MCP_cmd_pipe} ]] && rm ${MCP_cmd_pipe}
	[[ -p ${MCP_CoreName_Change_pipe} ]] && rm ${MCP_CoreName_Change_pipe}
	[[ -p ${MCP_Corename_Activity_pipe} ]] && rm ${MCP_Corename_Activity_pipe}
	[[ -p ${MCP_Activity_pipe} ]] && rm ${MCP_Activity_pipe}
	[[ -p ${SAM_Activity_pipe} ]] && rm ${SAM_Activity_pipe}
	[[ -e ${MCP_cmd_pipe} ]] && rm ${MCP_cmd_pipe}
	[[ -e ${MCP_CoreName_Change_pipe} ]] && rm ${MCP_CoreName_Change_pipe}
	[[ -e ${MCP_Corename_Activity_pipe} ]] && rm ${MCP_Corename_Activity_pipe}
	[[ -e ${MCP_Activity_pipe} ]] && rm ${MCP_Activity_pipe}
	[[ -e ${SAM_Activity_pipe} ]] && rm ${SAM_Activity_pipe}
}

function MCP_createpipes() {
	[[ ! -p ${MCP_cmd_pipe} ]] && mkfifo ${MCP_cmd_pipe}
	[[ ! -p ${MCP_CoreName_Change_pipe} ]] && mkfifo ${MCP_CoreName_Change_pipe}
	[[ ! -p ${MCP_Corename_Activity_pipe} ]] && mkfifo ${MCP_Corename_Activity_pipe}
	[[ ! -p ${MCP_Activity_pipe} ]] && mkfifo ${MCP_Activity_pipe}
	[[ ! -p ${SAM_Activity_pipe} ]] && mkfifo ${SAM_Activity_pipe}

	while true; do
		if [[ -p ${MCP_cmd_pipe} ]]; then
			if read line <${MCP_cmd_pipe}; then
				set -- junk ${line}
				shift
				case "${1}" in
				stop | quit | exit)
					exit 0
					break
					;;
				*)
					echo " ERROR! ${line} is unknown."
					echo " Try $(basename -- ${0}) help"
					echo " Or check the Github readme."
					echo " Named Pipe"
					;;
				esac
			fi
		fi
		sleep 0.1
	done &
}

function MCP_monitors() {
	# Start monitoring for CORENAME changes
	samquiet "-n" " Starting CORENAME change monitor..."
	MCP_CoreName_Change
	samquiet " Done!"

	# Spawn CORENAME monitoring process.
	samquiet "-n" " Starting CORENAME monitor..."
	MCP_CoreName_Monitor
	samquiet " Done!"

	if [ "${listenjoy}" == "yes" ]; then
		# Spawn joystick monitoring process per detected joystick device
		samquiet "-n" " Starting joystick monitor..."
		MCP_jsmonitor
		samquiet " Done!"

	fi
	if [ "${listenkeyboard}" == "yes" ]; then
		# Spawn keyboard monitoring processes
		if compgen -G /dev/input/by-path/*kbd > /dev/null; then
			samquiet "-n" " Starting keyboard monitor..."
			MCP_keybmonitor
			samquiet " Done!"
		fi
	fi

	if [ "${listenmouse}" == "yes" ]; then
		# Spawn mouse monitoring process per detected mouse device
		samquiet "-n" " Starting mouse monitor..."
		MCP_msmonitor
		samquiet " Done!"
	fi

	while true; do
		if read line <${MCP_Activity_pipe}; then
			tmux send-keys -t MCP C-c ENTER
			echo -ne "\033[0K\r\033[A"
			# printf '%s\n' "${line}"
			if [ ! -z "$(pidof Super_Attract_Mode.sh)" ]; then
				printf '%s\n' "${line}" >${SAM_Activity_pipe}
			else
				[[ -p ${SAM_Activity_pipe} ]] && rm ${SAM_Activity_pipe}
			fi
		fi
		sleep 0.1
	done &

	while true; do
		if read line <${MCP_CoreName_Change_pipe}; then
			MCP_CoreName_Monitor
		fi
		sleep 0.1
	done &

	while true; do
		if read line <${MCP_Corename_Activity_pipe}; then
			if [ "${line}" != "${corename_name}" ]; then
				# If we detect a change to CORENAME:
				# Spawn CORENAME monitoring process
				tmux rename-window -t MCP "${line}"
				tmux send-keys -t MCP C-c ENTER
				echo -ne "\033[0K\r\033[A"
				MCP_CoreName_Change
			fi
			# printf '%s\n' "${line}"
		fi
		sleep 0.1
	done &
}

# ======== MAIN LOOP ========
function MCP_loop() {
	while [ ${MCP_counter} -gt 0 ]; do
		echo -ne " Starting in ${MCP_counter}...\033[0K\r"
		sleep 1
		((MCP_counter--))
		corename_name=$(<${corename_file})
		tmux rename-window -t MCP "${corename_name}"
	done
	corename_name=$(<${corename_file})
	tmux rename-window -t MCP "${corename_name}"
	# Only start SAM from main menu
	if [ "${menuonly}" == "yes" ] && [ "${corename_name}" == "MENU" ]; then
		samdebug " Triggered after menuonly=yes"
		MCP_SAM_trigger "${@}"
	elif [ "${menuonly}" == "no" ]; then
		samdebug " Triggered after menuonly=no"
		MCP_SAM_trigger "${@}"
	fi
	MCP_counter=${MCP_timeout}
	sleep 1
	MCP_loop "${@}"
}

function read_samini() {
	# Setting
	# grep "^[^#;]*=" "${misterscripts}/Super_Attract_Mode.ini" | sed -n "s/^\s*\(\S*\)=\(.*$\)/\1/p" | sed "s/\"//g"
	# Value
	# grep "^[^#;]*=" "${misterscripts}/Super_Attract_Mode.ini" | sed -n "s/^\s*\(\S*\)=\(.*$\)/\2/p" | sed "s/\"//g"
	source "${misterscripts}/Super_Attract_Mode.ini"
	# Remove trailing slash from paths
	for var in $(grep "^[^#;]" "${misterscripts}/Super_Attract_Mode.ini" | grep "path=" | cut -f1 -d"="); do
		declare -g ${var}="${!var%/}"
	done
	for var in $(grep "^[^#;]" "${misterscripts}/Super_Attract_Mode.ini" | grep "pathextra=" | cut -f1 -d"="); do
		declare -g ${var}="${!var%/}"
	done
	for var in $(grep "^[^#;]" "${misterscripts}/Super_Attract_Mode.ini" | grep "pathrbf=" | cut -f1 -d"="); do
		declare -g ${var}="${!var%/}"
	done
}

function startup_tasks() {
	init_default_path_vars
	read_samini
	init_default_paths
	init_amigashared_path
	sam_createfolders
}

function main() {
	#======== Start ========
	startup_tasks
	# Convert seconds to minutes
	MCP_timeout_minutes=$(echo - | awk -v t=${MCP_timeout} '{print t/60}')
	samdebug " args: ${@}"
	if [ ! -z "${1}" ] && [ "${1}" == "quickstart" ]; then
		shift
		MCP_SAM_trigger "${@}"
	fi

	sleep ${bootsleep}
	MCP_createpipes
	MCP_monitors

	#======== DEBUG OUTPUT =========
	if [ "${samtrace}" == "yes" ]; then
		printf '%s\n' "********************************************************************************"
		#======== GLOBAL VARIABLES =========
		printf '%s\n' " mrsampath: ${mrsampath}"
		printf '%s\n' " misterpath: ${misterpath}"
		#======== LOCAL VARIABLES ========
		printf '%s\n' " commandline: ${@}"
		printf '%s\n' " MCP_timeout: ${MCP_timeout}"
		printf '%s\n' "********************************************************************************"
	fi
	corename_name=$(<${corename_file})
	tmux rename-window -t MCP "${corename_name}"
	trap 'MCP_counter=${MCP_timeout}' INT # Reset MCP_counter for Activity Triggers
	MCP_loop "${@}"
	trap - INT
}

main "${@}"
