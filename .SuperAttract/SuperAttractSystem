#!/bin/bash

# https://github.com/mrchrisster/MiSTer_SAM/
# Copyright (c) 2021 by mrchrisster and Mellified

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# Description
# This cycles through arcade and console cores periodically
# Games are randomly pulled from their respective folders

# ======== Credits ========
# Original concept and implementation: mrchrisster
# Additional development and script layout: Mellified and Paradox
#
# mbc by pocomane
# partun by woelper
# samindex by wizzo
# tty2oled by venice
#
# Thanks for the contributions and support:
# kaloun34, redsteakraw, RetroDriven, LamerDeluxe, InquisitiveCoder, Sigismond

# Save our PID and process
declare -g sampid="${$}"
declare -g samprocess=$(basename -- ${0})
declare -g mrsamtmp="/tmp/.SAM_tmp"
declare -g userstartup="${misterpath}/linux/user-startup.sh"
declare -g userstartuptpl="${misterpath}/linux/_user-startup.sh"
declare -g corenamefile="/tmp/CORENAME"
declare -g corename_name=$(<${corenamefile})

function init_gamelist_vars() {
	# ======== GAMELIST VARIABLES =========
	declare -gl create_all_gamelists=${ini_settings[create_all_gamelists]:="no"}
	declare -gl rebuild_freq=${ini_settings[rebuild_freq]:="week"}
	declare -gi regen_duration=${ini_settings[regen_duration]:=4}
	declare -gi rebuild_freq_int=${ini_settings[rebuild_freq_int]:=604800}
	declare -gl rebuild_freq_arcade=${ini_settings[rebuild_freq_arcade]:="week"}
	declare -gi regen_duration_arcade=${ini_settings[regen_duration_arcade]:=1}
	declare -gi rebuild_freq_arcade_int=${ini_settings[rebuild_freq_arcade_int]:=604800}
	declare -gl rebuild_freq_amiga=${ini_settings[rebuild_freq_amiga]:="week"}
	declare -gi regen_duration_amiga=${ini_settings[regen_duration_amiga]:=8}
	declare -gi rebuild_freq_amiga_int=${ini_settings[rebuild_freq_amiga_int]:=604800}
	declare -gl samindex=${ini_settings[samindex]:="no"}
	declare -gl neogeoregion=${ini_settings[neogeoregion]:="english"}
	declare -gl useneogeotitles=${ini_settings[useneogeotitles]:="yes"}
	init_excludes
	[[ ! -d "${gamelistpath}" ]] && mkdir -p "${gamelistpath}"
	[[ ! -d "${gamelistpathtmp}" ]] && mkdir -p "${gamelistpathtmp}"
	[[ ! -d "${excludepath}" ]] && mkdir -p "${excludepath}"
}

function init_tty2oled_vars() {
	# ======== TTY2OLED =======
	declare -gl ttyenable=${ini_settings[ttyenable]:="no"}
	declare -gi ttyupdate_pause=10
	declare -g tty_currentinfo_file=${mrsamtmp}/tty_currentinfo
	declare -g tty_sleepfile="/tmp/tty2oled_sleep"
	declare -gA tty_currentinfo=(
		[core_pretty]=
		[name]=
		[core]=
		[date]=0
		[counter]=0
		[name_scroll]=
		[name_scroll_position]=0
		[name_scroll_direction]=1
		[update_pause]=${ttyupdate_pause}
	)
}

function startup_tasks() {
	# Named Pipes
	declare -g SAM_cmd_pipe="${mrsamtmp}/SAM_cmd_pipe"
	declare -g MCP_cmd_pipe="${mrsamtmp}/MCP_cmd_pipe"
	declare -g TTY_cmd_pipe="${mrsamtmp}/TTY_cmd_pipe"
	declare -g SAM_Activity_pipe="${mrsamtmp}/SAM_Activity_pipe"
	declare -g MCP_Activity_pipe="${mrsamtmp}/MCP_Activity_pipe"
	declare -g MCP_Corename_Activity_pipe="${mrsamtmp}/MCP_CoreName_Activity_pipe"
	declare -g MCP_CoreName_Change_pipe="${mrsamtmp}/MCP_CoreName_Change_pipe"
	declare -g MCP_DeviceChange_pipe="${mrsamtmp}/MCP_DeviceChange_pipe"

	# ======== GLOBAL VARIABLES =========
	declare -gl listenmouse=${ini_settings[listenmouse]:="yes"}
	declare -gl listenkeyboard=${ini_settings[listenkeyboard]:="yes"}
	declare -gl listenjoy=${ini_settings[listenjoy]:="yes"}
	declare -gi samtimeout=${ini_settings[samtimeout]:=60}
	declare -gi bootsleep=${ini_settings[bootsleep]:=60}

	# ======== DEBUG VARIABLES ========
	declare -gl samquiet=${ini_settings[samquiet]:="yes"}
	declare -gl samdebug=${ini_settings[samdebug]:="no"}
	declare -gl samtrace=${ini_settings[samtrace]:="no"}

	# ======== LOCAL VARIABLES ========
	if [ "${samprocess}" == "SuperAttract_init" ]; then
		declare -gl corelistall="amiga arcade atari2600 atari5200 atari7800 atarilynx c64 fds gb gbc gba genesis gg megacd neogeo nes s32x sms snes tgfx16 tgfx16cd psx"
		# From ini
		declare -gl usedefaultpaths=${ini_settings[usedefaultpaths]:="yes"}
		createfolders
		init_game_path_final
		init_amigashared_path
	elif [ "${samprocess}" == "SuperAttract_MCP" ]; then
		declare -gi MCP_timeout=60
		declare -gi MCP_counter=${MCP_timeout}
		declare -g MCP_timeout_minutes=
		# From ini
		declare -gl menuonly=${ini_settings[menuonly]:="yes"}
	elif [ "${samprocess}" == "SuperAttract_tty2oled" ]; then
		declare -g ttydevice="/dev/ttyUSB0"
		declare -g ttypicture="/media/fat/tty2oled/pics"
		declare -g ttypicture_pri="/media/fat/tty2oled/pics_pri"
		declare -g prev_name_scroll=
		declare -g prev_counter=
		# From ini
		declare -gi gametimer=${ini_settings[gametimer]:=120}
		declare -gi ttyscroll_speed=${ini_settings[ttyscroll_speed]:=1}
		declare -gi ttyscroll_speed_int=$((${ttyscroll_speed} - 1))
		declare -g ttysystemini=${ini_settings[ttysystemini]:="/media/fat/tty2oled/tty2oled-system.ini"}
		declare -g ttyuserini=${ini_settings[ttyuserini]:="/media/fat/tty2oled/tty2oled-user.ini"}
		init_tty2oled_vars
	elif [ "${samprocess}" == "Super_Attract_Mode.sh" ]; then
		declare -gl corelistall="amiga arcade atari2600 atari5200 atari7800 atarilynx c64 fds gb gbc gba genesis gg megacd neogeo nes s32x sms snes tgfx16 tgfx16cd psx"
		declare -gi speedtest=0
		declare -gi inmenu=0
		declare -gi coreretries=3
		declare -gi romloadfails=0
		declare -g corelist_allowtmp=
		declare -gl skipmessage="Yes"
		declare -gi counter=0
		declare -gi countdown="nocountdown"
		declare -g file_to_load=
		declare -gl disablebootrom="Yes"
		declare -g tmpfile="${gamelistpathtmp}/tmpfile"
		declare -g tmpfile2="${gamelistpathtmp}/tmpfile2"
		declare -g gamelistpath="${mrsampath}/SAM_Gamelists"
		declare -g gamelistpathtmp="/tmp/.SAM_List"
		declare -g excludepath="${mrsampath}/SAM_Excludelists"
		# From ini
		declare -gl usedefaultpaths=${ini_settings[usedefaultpaths]:="yes"}
		declare -gi gametimer=${ini_settings[gametimer]:=120}
		declare -g corelist=${ini_settings[corelist]:-${corelistall}}
		declare -gl mute=${ini_settings[mute]:="core"}
		declare -gl playcurrentgame=${ini_settings[playcurrentgame]:="no"}
		declare -gi roulettetimer=${ini_settings[roulettetimer]:=500}
		declare -gl norepeat=${ini_settings[norepeat]:="yes"}
		declare -gl usezip=${ini_settings[usezip]:="yes"}
		declare -g repository_url=${ini_settings[repository_url]:="https://github.com/mrchrisster/MiSTer_SAM"}
		declare -g branch=${ini_settings[branch]:="main"}
		# ======== BGM =======
		declare -gl bgm=${ini_settings[bgm]:="no"}
		init_game_path_final
		init_amigashared_path
		init_data # Setup data arrays
		init_gamelist_vars
		init_tty2oled_vars
	fi
	unset ini_settings
}

function createfolders() {
	# Create folders if they don't exist
	[[ ! -d "${mrsampath}" ]] && mkdir -p "${mrsampath}"
	[[ ! -d "${mrsamtmp}" ]] && mkdir -p "${mrsamtmp}"
	[[ ! -d "${mrsamtmp}/SAM_config" ]] && mkdir -p "${mrsamtmp}/SAM_config"
	[[ ! -d "${misterpath}/bootrom" ]] && mkdir -p "${misterpath}/bootrom"
}

function init_game_path_vars() {
	# ======== CORE PATHS ========
	declare -g amigapath=${ini_settings[amigapath]:="${misterpath}/Games/Amiga"}
	declare -g arcadepath=${ini_settings[arcadepath]:="${misterpath}/_Arcade"}
	declare -g atari2600path=${ini_settings[atari2600path]:="${misterpath}/Games/Atari7800"}
	declare -g atari5200path=${ini_settings[atari5200path]:="${misterpath}/Games/Atari5200"}
	declare -g atari7800path=${ini_settings[atari7800path]:="${misterpath}/Games/Atari7800"}
	declare -g atarilynxpath=${ini_settings[atarilynxpath]:="${misterpath}/Games/AtariLynx"}
	declare -g c64path=${ini_settings[c64path]:="${misterpath}/Games/C64"}
	declare -g fdspath=${ini_settings[fdspath]:="${misterpath}/Games/NES"}
	declare -g gbpath=${ini_settings[gbpath]:="${misterpath}/Games/Gameboy"}
	declare -g gbcpath=${ini_settings[gbcpath]:="${misterpath}/Games/Gameboy"}
	declare -g gbapath=${ini_settings[gbapath]:="${misterpath}/Games/GBA"}
	declare -g genesispath=${ini_settings[genesispath]:="${misterpath}/Games/Genesis"}
	declare -g ggpath=${ini_settings[ggpath]:="${misterpath}/Games/SMS"}
	declare -g megacdpath=${ini_settings[megacdpath]:="${misterpath}/Games/MegaCD"}
	declare -g neogeopath=${ini_settings[neogeopath]:="${misterpath}/Games/NeoGeo"}
	declare -g nespath=${ini_settings[nespath]:="${misterpath}/Games/NES"}
	declare -g s32xpath=${ini_settings[s32xpath]:="${misterpath}/Games/S32X"}
	declare -g smspath=${ini_settings[smspath]:="${misterpath}/Games/SMS"}
	declare -g snespath=${ini_settings[snespath]:="${misterpath}/Games/SNES"}
	declare -g tgfx16path=${ini_settings[tgfx16path]:="${misterpath}/Games/TGFX16"}
	declare -g tgfx16cdpath=${ini_settings[tgfx16cdpath]:="${misterpath}/Games/TGFX16-CD"}
	declare -g psxpath=${ini_settings[psxpath]:="${misterpath}/Games/PSX"}

	# ======== CORE PATHS EXTRA ========
	declare -g amigapathextra=${ini_settings[amigapathextra]:=}
	declare -g arcadepathextra=${ini_settings[arcadepathextra]:=}
	declare -g atari2600pathextra=${ini_settings[atari2600pathextra]:=}
	declare -g atari5200pathextra=${ini_settings[atari5200pathextra]:=}
	declare -g atari7800pathextra=${ini_settings[atari7800pathextra]:=}
	declare -g atarilynxpathextra=${ini_settings[atarilynxpathextra]:=}
	declare -g c64pathextra=${ini_settings[c64pathextra]:=}
	declare -g fdspathextra=${ini_settings[fdspathextra]:=}
	declare -g gbpathextra=${ini_settings[gbpathextra]:=}
	declare -g gbcpathextra=${ini_settings[gbcpathextra]:=}
	declare -g gbapathextra=${ini_settings[gbapathextra]:=}
	declare -g genesispathextra=${ini_settings[genesispathextra]:=}
	declare -g ggpathextra=${ini_settings[ggpathextra]:=}
	declare -g megacdpathextra=${ini_settings[megacdpathextra]:=}
	declare -g neogeopathextra=${ini_settings[neogeopathextra]:=}
	declare -g nespathextra=${ini_settings[nespathextra]:=}
	declare -g s32xpathextra=${ini_settings[s32xpathextra]:=}
	declare -g smspathextra=${ini_settings[smspathextra]:=}
	declare -g snespathextra=${ini_settings[snespathextra]:=}
	declare -g tgfx16pathextra=${ini_settings[tgfx16pathextra]:=}
	declare -g tgfx16cdpathextra=${ini_settings[tgfx16cdpathextra]:=}
	declare -g psxpathextra=${ini_settings[psxpathextra]:=}
}

function kill_game_path_vars() {
	# ======== CORE PATHS ========
	unset amigapath
	unset arcadepath
	unset atari2600path
	unset atari5200path
	unset atari7800path
	unset atarilynxpath
	unset c64path
	unset fdspath
	unset gbpath
	unset gbcpath
	unset gbapath
	unset genesispath
	unset ggpath
	unset megacdpath
	unset neogeopath
	unset nespath
	unset s32xpath
	unset smspath
	unset snespath
	unset tgfx16path
	unset tgfx16cdpath
	unset psxpath

	# ======== CORE PATHS EXTRA ========
	unset amigapathextra
	unset arcadepathextra
	unset atari2600pathextra
	unset atari5200pathextra
	unset atari7800pathextra
	unset atarilynxpathextra
	unset c64pathextra
	unset fdspathextra
	unset gbpathextra
	unset gbcpathextra
	unset gbapathextra
	unset genesispathextra
	unset ggpathextra
	unset megacdpathextra
	unset neogeopathextra
	unset nespathextra
	unset s32xpathextra
	unset smspathextra
	unset snespathextra
	unset tgfx16pathextra
	unset tgfx16cdpathextra
	unset psxpathextra
}

function init_final_paths() {
	# Core to path mappings
	declare -gA CORE_PATH_FINAL=(
		["amiga"]="${amigapath}${amigapathextra}"
		["arcade"]="${arcadepath}${arcadepathextra}"
		["atari2600"]="${atari2600path}${atari2600pathextra}"
		["atari5200"]="${atari5200path}${atari5200pathextra}"
		["atari7800"]="${atari7800path}${atari7800pathextra}"
		["atarilynx"]="${atarilynxpath}${atarilynxpathextra}"
		["c64"]="${c64path}${c64pathextra}"
		["fds"]="${fdspath}${fdspathextra}"
		["gb"]="${gbpath}${gbpathextra}"
		["gbc"]="${gbcpath}${gbcpathextra}"
		["gba"]="${gbapath}${gbapathextra}"
		["genesis"]="${genesispath}${genesispathextra}"
		["gg"]="${ggpath}${ggpathextra}"
		["megacd"]="${megacdpath}${megacdpathextra}"
		["neogeo"]="${neogeopath}${neogeopathextra}"
		["nes"]="${nespath}${nespathextra}"
		["s32x"]="${s32xpath}${s32xpathextra}"
		["sms"]="${smspath}${smspathextra}"
		["snes"]="${snespath}${snespathextra}"
		["tgfx16"]="${tgfx16path}${tgfx16pathextra}"
		["tgfx16cd"]="${tgfx16cdpath}${tgfx16cdpathextra}"
		["psx"]="${psxpath}${psxpathextra}"
	)
}

function init_game_path_final() {
	init_game_path_vars
	if [ "${usedefaultpaths}" == "yes" ]; then
		if [[ ! -s "${mrsamtmp}/default_paths" ]]; then
			# Default rom path search directories
			declare -ga GAMESDIR_FOLDERS=(
				/media/usb7/games
				/media/usb6/games
				/media/usb5/games
				/media/usb4/games
				/media/usb3/games
				/media/usb2/games
				/media/usb1/games
				/media/usb0/games
				${misterpath}/cifs/games
				${misterpath}/games
				/media/usb7
				/media/usb6
				/media/usb5
				/media/usb4
				/media/usb3
				/media/usb2
				/media/usb1
				/media/usb0
				${misterpath}/cifs
				${misterpath}
			)

			declare -g GET_SYSTEM_FOLDER_GAMESDIR=
			declare -g GET_SYSTEM_FOLDER_RESULT=
			echo "" | >"${mrsamtmp}/default_paths"
			for core in ${corelistall}; do
				defaultpath "${core}"
			done
			init_final_paths
			# write to output file
			echo $(printarr CORE_PATH_FINAL) >"${mrsamtmp}/default_paths"
		else
			[[ -s ${mrsamtmp}/default_paths ]] && source "${mrsamtmp}/default_paths"
		fi
	else
		init_final_paths
	fi
	kill_game_path_vars
}

function GET_SYSTEM_FOLDER() {
	local SYSTEM="${1}"
	for folder in "${GAMESDIR_FOLDERS[@]}"; do
		local RESULT=$(find "${folder}" -maxdepth 1 -iname "${SYSTEM}" -printf "%P\n" -quit 2>/dev/null)
		if [[ "${RESULT}" != "" ]]; then
			GET_SYSTEM_FOLDER_GAMESDIR="${folder}"
			GET_SYSTEM_FOLDER_RESULT="${RESULT}"
			break
		fi
	done
}

function defaultpath() {
	local SYSTEM="${1}"
	local SYSTEM_ORG="${SYSTEM}"
	if [ ${SYSTEM} == "arcade" ]; then
		SYSTEM="_arcade"
	fi
	if [ ${SYSTEM} == "atari2600" ]; then
		SYSTEM="atari7800"
	fi
	if [ ${SYSTEM} == "fds" ]; then
		SYSTEM="nes"
	fi
	if [ ${SYSTEM} == "gb" ]; then
		SYSTEM="gameboy"
	fi
	if [ ${SYSTEM} == "gbc" ]; then
		SYSTEM="gameboy"
	fi
	if [ ${SYSTEM} == "gg" ]; then
		SYSTEM="sms"
	fi
	if [ ${SYSTEM} == "tgfx16cd" ]; then
		SYSTEM="tgfx16-cd"
	fi
	shift

	GET_SYSTEM_FOLDER "${SYSTEM}"
	local SYSTEM_FOLDER="${GET_SYSTEM_FOLDER_RESULT}"
	local GAMESDIR="${GET_SYSTEM_FOLDER_GAMESDIR}"

	if [[ "${SYSTEM_FOLDER}" != "" ]]; then
		eval ${SYSTEM_ORG}"path"="${GAMESDIR}/${GET_SYSTEM_FOLDER_RESULT}"
	fi
}

function init_amigashared_path() {
	declare -g amigashared=${ini_settings[amigashared]:="${CORE_PATH_FINAL[amiga]}/shared"}
	if [[ ! -s "${mrsamtmp}/amigashared_path" ]]; then
		var=$(grep shared_folder= ${misterpath}/Mister.ini | sed -e 's/shared_folder=//')
		#samdebug " Grep got ${var}"
		if [ ! -z "${var}" ]; then
			samdebug " Variable is not empty"
			if [ ! -d ${var} ]; then
				samdebug " Variable is not a valid directory"
				if [ "${var: -1}" != "/" ]; then
					samdebug " Variable does not contain / in the last position"
					var=$(echo ${var} | sed 's:/.$::')
				fi
			fi
			if [ -d ${var} ]; then
				samdebug " Variable is a valid directory"
				if [ "${var: -1}" == "/" ]; then
					samdebug " Variable contains / in the last position"
					var="${var::${#var}-1}"
				fi
				samdebug " Setting the amigashared variable"
				amigashared="${var}"
			fi
			#else
			#samdebug " Variable is empty sticking with default"
		fi

		# write to output file
		echo "amigashared=${amigashared}" >"${mrsamtmp}/amigashared_path"
	else
		[[ -s ${mrsamtmp}/amigashared_path ]] && source "${mrsamtmp}/amigashared_path"
		samquiet " Amigashared directory is ${amigashared} "
	fi
}

function samdebug() {
	if [ "${samdebug}" == "yes" ]; then
		if [ "${1}" == "-n" ]; then
			echo -en "\e[1m\e[31m${2-}\e[0m"
		else
			echo -e "\e[1m\e[31m${1-}\e[0m"
		fi
	fi
}

function samquiet() {
	if [ "${samquiet}" == "no" ]; then
		if [ "${1}" == "-n" ]; then
			echo -en "\e[1m\e[32m${2-}\e[0m"
		else
			echo -e "\e[1m\e[32m${1-}\e[0m"
		fi
	fi
}

function samdebug_toggle() {
	if [ ! -z "${2}" ] && ([ "${2}" == "yes" ] || [ "${2}" == "no" ]); then
		samdebug="${2}"
	elif [ "${1}" == "toggle" ]; then
		if [ "${samdebug}" == "yes" ]; then
			samdebug="no"
		elif [ "${samdebug}" == "no" ]; then
			samdebug="yes"
		fi
	fi
}

function samquiet_toggle() {
	if [ ! -z "${2}" ] && ([ "${2}" == "yes" ] || [ "${2}" == "no" ]); then
		samquiet="${2}"
	elif [ "${1}" == "toggle" ]; then
		if [ "${samquiet}" == "yes" ]; then
			samquiet="no"
		elif [ "${samquiet}" == "no" ]; then
			samquiet="yes"
		fi
	fi
}

function printarr() {
	printf "%s\n" "declare -gA ${1}=("
	declare -n __p="$1"
	for k in "${!__p[@]}"; do
		printf "[%s]=%s\n" "$k" "${__p[$k]}"
	done
	printf "%s\n" ")"
}

function read_samini() {
	# ========= PARSE INI =========
	# Read INI, Check for mount point presence
	while ! test -d ${misterpath}/; do
		sleep 1
		count=$(expr ${count} + 1)
		if test ${count} -eq 30; then
			printf '%s\n' " Mount timed out!"
			exit 1
		fi
	done

	# Setting
	# grep "^[^#;]*=" "${misterscripts}/Super_Attract_Mode.ini" | sed -n "s/^\s*\(\S*\)=\(.*$\)/\1/p" | sed "s/\"//g"
	# Value
	# grep "^[^#;]*=" "${misterscripts}/Super_Attract_Mode.ini" | sed -n "s/^\s*\(\S*\)=\(.*$\)/\2/p" | sed "s/\"//g"
	declare -gA ini_settings=()
	while read line; do
		local setting=$(echo "$line" | grep "^[^#;]*=" | grep -v "exclude=" | sed -n "s/^\s*\(\S*\)=\(.*$\)/\1\n/p" | sed "s/\"//g")
		local value=$(echo "$line" | grep "^[^#;]*=" | grep -v "exclude=" | sed -n "s/^\s*\(\S*\)=\(.*$\)/\2\n/p" | sed "s/\"//g")
		if [ ! -z "$setting" ]; then
			# Remove trailing slash from paths
			if [ "${value: -1}" == "/" ]; then
				value=${value%/}
			fi
			ini_settings[${setting}]="${value:=''}"
		fi
	done <${misterscripts}/Super_Attract_Mode.ini
	ini_settings[md5sum]=$(md5sum ${misterscripts}/Super_Attract_Mode.ini | awk '{print $1}')
	# write to output file
	echo $(printarr ini_settings) >"${mrsamtmp}/ini_settings"
}

function init_excludes() {
	# Create folder and file exclusion list
	folderex="-o -iname *\bBIOS\b*"
	fileex="-and -not -iname *\bBIOS\b*"

	# Create file and folder exclusion list for zips. Always exclude BIOS files as a default
	zipex="\bBIOS\b"
}

function write_to_SAM_cmd_pipe() {
	[[ -p ${SAM_cmd_pipe} ]] && echo "${@}" >${SAM_cmd_pipe}
}

function write_to_TTY_cmd_pipe() {
	[[ -p ${TTY_cmd_pipe} ]] && echo "${@}" >${TTY_cmd_pipe}
}

function write_to_MCP_cmd_pipe() {
	[[ -p ${MCP_cmd_pipe} ]] && echo "${@}" >${MCP_cmd_pipe}
}

function env_check() {
	# Check if we've been installed
	if [ ! -f "${mrsampath}/bin/partun" ] || [ ! -f "${mrsampath}/SuperAttract_MCP" ]; then
		echo " SAM required files not found."
		echo " Surprised? Check your INI."
		sam_update ${1}
		echo " Setup complete."
	fi
}

function sam_cleanup() {
	if [ -f ${tty_sleepfile} ]; then
		samquiet "-n" " Starting tty2oled Daemon..."
		rm ${tty_sleepfile} &>/dev/null
		samquiet " Done!"
	fi
	if [ -f ${tty_currentinfo_file} ]; then
		samquiet "-n" " Removing ${tty_currentinfo_file}..."
		rm ${tty_currentinfo_file} &>/dev/null
		samquiet " Done!"
	fi
	# Clean up by umounting any mount binds
	[[ $(mount | grep -ic "${misterpath}/config") -eq 1 ]] && umount "${misterpath}/config"
	# [[ $(mount | grep -ic ${amigashared}) != "0" ]] && umount "${amigashared}"
	[[ -d "${misterpath}/bootrom" ]] && [[ $(mount | grep -ic 'bootrom') != "0" ]] && umount "${misterpath}/bootrom"
	[[ -f "${CORE_PATH_FINAL[NES]}/boot1.rom" ]] && [[ $(mount | grep -ic 'nes/boot1.rom') != "0" ]] && umount "${CORE_PATH_FINAL[NES]}/boot1.rom"
	[[ -f "${CORE_PATH_FINAL[NES]}/boot2.rom" ]] && [[ $(mount | grep -ic 'nes/boot2.rom') != "0" ]] && umount "${CORE_PATH_FINAL[NES]}/boot2.rom"
	[[ -f "${CORE_PATH_FINAL[NES]}/boot3.rom" ]] && [[ $(mount | grep -ic 'nes/boot3.rom') != "0" ]] && umount "${CORE_PATH_FINAL[NES]}/boot3.rom"
	[[ -p ${SAM_Activity_pipe} ]] && rm -f ${SAM_Activity_pipe}
	[[ -e ${SAM_Activity_pipe} ]] && rm -f ${SAM_Activity_pipe}
	[[ -p ${SAM_cmd_pipe} ]] && rm -f ${SAM_cmd_pipe}
	[[ -e ${SAM_cmd_pipe} ]] && rm -f ${SAM_cmd_pipe}
	samquiet " SAM Cleaned up!"
}

function tty_cleanup() {
	samquiet " TTY Cleaned up!"
	[ -p ${TTY_cmd_pipe} ] && rm -f ${TTY_cmd_pipe}
	[ -e ${TTY_cmd_pipe} ] && rm -f ${TTY_cmd_pipe}
}

function mcp_cleanup() {
	[[ -p ${MCP_cmd_pipe} ]] && rm ${MCP_cmd_pipe}
	[[ -p ${MCP_CoreName_Change_pipe} ]] && rm ${MCP_CoreName_Change_pipe}
	[[ -p ${MCP_Corename_Activity_pipe} ]] && rm ${MCP_Corename_Activity_pipe}
	[[ -p ${MCP_DeviceChange_pipe} ]] && rm ${MCP_DeviceChange_pipe}
	[[ -p ${MCP_Activity_pipe} ]] && rm ${MCP_Activity_pipe}
	[[ -p ${SAM_Activity_pipe} ]] && rm ${SAM_Activity_pipe}
	[[ -e ${MCP_cmd_pipe} ]] && rm ${MCP_cmd_pipe}
	[[ -e ${MCP_CoreName_Change_pipe} ]] && rm ${MCP_CoreName_Change_pipe}
	[[ -e ${MCP_DeviceChange_pipe} ]] && rm ${MCP_DeviceChange_pipe}
	[[ -e ${MCP_Corename_Activity_pipe} ]] && rm ${MCP_Corename_Activity_pipe}
	[[ -e ${MCP_Activity_pipe} ]] && rm ${MCP_Activity_pipe}
	[[ -e ${SAM_Activity_pipe} ]] && rm ${SAM_Activity_pipe}
	samquiet " MCP Cleaned up!"
}

# ======== CORE CONFIG ========
function init_data() {
	# Core to path mappings for rbf files
	declare -gA CORE_PATH_RBF=(
		["amiga"]=${ini_settings[amigapathrbf]:="_Computer"}
		["arcade"]=${ini_settings[arcadepathrbf]:="_Arcade"}
		["atari2600"]=${ini_settings[atari2600pathrbf]:="_Console"}
		["atari5200"]=${ini_settings[atari5200pathrbf]:="_Console"}
		["atari7800"]=${ini_settings[atari7800pathrbf]:="_Console"}
		["atarilynx"]=${ini_settings[atarilynxpathrbf]:="_Console"}
		["c64"]=${ini_settings[c64pathrbf]:="_Computer"}
		["fds"]=${ini_settings[fdspathrbf]:="_Console"}
		["gb"]=${ini_settings[gbpathrbf]:="_Console"}
		["gbc"]=${ini_settings[gbcpathrbf]:="_Console"}
		["gba"]=${ini_settings[gbapathrbf]:="_Console"}
		["genesis"]=${ini_settings[genesispathrbf]:="_Console"}
		["gg"]=${ini_settings[ggpathrbf]:="_Console"}
		["megacd"]=${ini_settings[megacdpathrbf]:="_Console"}
		["neogeo"]=${ini_settings[neogeopathrbf]:="_Console"}
		["nes"]=${ini_settings[nespathrbf]:="_Console"}
		["s32x"]=${ini_settings[s32xpathrbf]:="_Console"}
		["sms"]=${ini_settings[smspathrbf]:="_Console"}
		["snes"]=${ini_settings[snespathrbf]:="_Console"}
		["tgfx16"]=${ini_settings[tgfx16pathrbf]:="_Console"}
		["tgfx16cd"]=${ini_settings[tgfx16cdpathrbf]:="_Console"}
		["psx"]=${ini_settings[psxpathrbf]:="_Console"}
	)

	# Core to long name mappings
	declare -gA CORE_PRETTY=(
		["amiga"]="Commodore Amiga"
		["arcade"]="MiSTer Arcade"
		["atari2600"]="Atari 2600"
		["atari5200"]="Atari 5200"
		["atari7800"]="Atari 7800"
		["atarilynx"]="Atari Lynx"
		["c64"]="Commodore 64"
		["fds"]="Nintendo Disk System"
		["gb"]="Nintendo Game Boy"
		["gbc"]="Nintendo Game Boy Color"
		["gba"]="Nintendo Game Boy Advance"
		["genesis"]="Sega Genesis / Megadrive"
		["gg"]="Sega Game Gear"
		["megacd"]="Sega CD / Mega CD"
		["neogeo"]="SNK NeoGeo"
		["nes"]="Nintendo Entertainment System"
		["s32x"]="Sega 32x"
		["sms"]="Sega Master System"
		["snes"]="Super NES"
		["tgfx16"]="NEC TurboGrafx-16 "
		["tgfx16cd"]="NEC TurboGrafx-16 CD"
		["psx"]="Sony Playstation"
	)

	# Core to file extension mappings
	declare -glA CORE_EXT=(
		["amiga"]="hdf" #This is just a placeholder
		["arcade"]="mra"
		["atari2600"]="a26"	 # Should we include? "bin"
		["atari5200"]="a52,car" # Should we include? "bin,rom"
		["atari7800"]="a78"	 # Should we include? "bin"
		["atarilynx"]="lnx"
		["c64"]="crt,prg" # need to be tested "reu,tap,flt,rom,c1581"
		["fds"]="fds"
		["gb"]="gb"   # Should we include? "bin"
		["gbc"]="gbc" # Should we include? "bin"
		["gba"]="gba"
		["genesis"]="md,gen" # Should we include? "bin"
		["gg"]="gg"
		["megacd"]="chd,cue"
		["neogeo"]="neo"
		["nes"]="nes"
		["s32x"]="32x"
		["sms"]="sms,sg"
		["snes"]="sfc,smc"   # Should we include? "bin,bs"
		["tgfx16"]="pce,sgx" # Should we include? "bin"
		["tgfx16cd"]="chd,cue"
		["psx"]="chd,cue,exe"
	)

	# Can this core use ZIPped ROMs
	declare -glA CORE_ZIPPED=(
		["amiga"]="No"
		["arcade"]="No"
		["atari2600"]="Yes"
		["atari5200"]="Yes"
		["atari7800"]="Yes"
		["atarilynx"]="Yes"
		["c64"]="Yes"
		["fds"]="Yes"
		["gb"]="Yes"
		["gbc"]="Yes"
		["gba"]="Yes"
		["genesis"]="Yes"
		["gg"]="Yes"
		["megacd"]="No"
		["neogeo"]="Yes"
		["nes"]="Yes"
		["s32x"]="Yes"
		["sms"]="Yes"
		["snes"]="Yes"
		["tgfx16"]="Yes"
		["tgfx16cd"]="No"
		["psx"]="No"
	)

	# Can this core skip Bios/Safety warning messages
	declare -glA CORE_SKIP=(
		["amiga"]="Yes"
		["arcade"]="No"
		["atari2600"]="No"
		["atari5200"]="Yes"
		["atari7800"]="No"
		["atarilynx"]="No"
		["c64"]="No"
		["fds"]="Yes"
		["gb"]="No"
		["gbc"]="No"
		["gba"]="No"
		["genesis"]="No"
		["gg"]="No"
		["megacd"]="Yes"
		["neogeo"]="No"
		["nes"]="No"
		["s32x"]="No"
		["sms"]="No"
		["snes"]="No"
		["tgfx16"]="No"
		["tgfx16cd"]="Yes"
		["psx"]="No"
	)

	declare -gA ATARI5200_GAME_SKIP=(
		["A.E."]=L
		["Activision Decathlon"]=L
		["Astro Chase"]=R
		["Atari PAM Diagnostics"]=R
		["Battlezone"]=R
		["Beamrider"]=L
		["BerZerk"]=L
		["Blaster"]=L
		["Blue Print"]=L
		["Bounty Bob Strikes Back"]=R
		["Buck Rogers - Planet of Zoom"]=R
		["Centipede"]=R
		["Choplifter!"]=L
		["Congo Bongo"]=R
		["Countermeasure"]=R
		["Defender"]=R
		["Dig Dug"]=R
		["Final Legacy"]=L
		["Frisky Tom"]=R
		["Frogger II"]=R
		["Gyruss"]=R
		["H.E.R.O."]=L
		["James Bond"]=R
		["Joust"]=R
		["Jr Pac-Man"]=R
		["Jungle Hunt"]=R
		["Kangaroo"]=R
		["Last Star Fighter"]=L
		["Last StarFighter"]=L
		["Looney Tunes Hotel"]=R
		["Meteorites"]=L
		["Microgammon SB"]=R
		["Millipede"]=L
		["Miner 2049er"]=L
		["Miniature Golf"]=R
		["Montezuma's Revenge"]=R
		["Moon Patrol"]=L
		["Ms. Pac-Man"]=R
		["Pac-Man"]=R
		["Pitfall II"]=L
		["Pole Position"]=R
		["Popeye"]=R
		["Qix"]=R
		["Quest for Quintana Roo"]=L
		["Realsports Basketball"]=R
		["Realsports Football"]=R
		["Realsports Soccer"]=R
		["Realsports Tennis"]=R
		["Road Runner"]=R
		["Robotron"]=L
		["Space Dungeon"]=R
		["Space Shuttle"]=L
		["Sport Goofy"]=R
		["Sports Goofy"]=R
		["Star Raiders"]=R
		["Star Trek SOS"]=R
		["Star Trek - Strategic Operations Simulator"]=R
		["Star Wars The Arcade Game"]=R
		["Star Wars - The Arcade Game"]=R
		["Stargate"]=R
		["Super Pac-Man"]=L
		["Tempest"]=L
		["Track & Field"]=L
		["Track and Field"]=L
		["Wizard of Wor"]=L
		["Xari Arena"]=R
		["Zone Ranger"]=L
	)

	# Core to input maps mapping
	declare -gA CORE_LAUNCH=(
		["amiga"]="Minimig"
		["arcade"]="Arcade"
		["atari2600"]="ATARI7800"
		["atari5200"]="ATARI5200"
		["atari7800"]="ATARI7800"
		["atarilynx"]="AtariLynx"
		["c64"]="C64"
		["fds"]="NES"
		["gb"]="GAMEBOY"
		["gbc"]="GAMEBOY"
		["gba"]="GBA"
		["genesis"]="Genesis"
		["gg"]="SMS"
		["megacd"]="MegaCD"
		["neogeo"]="NEOGEO"
		["nes"]="NES"
		["s32x"]="S32X"
		["sms"]="SMS"
		["snes"]="SNES"
		["tgfx16"]="TGFX16"
		["tgfx16cd"]="TGFX16"
		["psx"]="PSX"
	)

	# TTY2OLED Core Pic mappings
	declare -gA TTY2OLED_PIC_NAME=(
		["amiga"]="Minimig"
		["arcade"]="Arcade"
		["atari2600"]="ATARI2600"
		["atari5200"]="ATARI5200"
		["atari7800"]="ATARI7800"
		["atarilynx"]="AtariLynx"
		["c64"]="C64"
		["fds"]="FDS"
		["gb"]="GB"
		["gbc"]="GAMEBOY"
		["gba"]="GBA"
		["genesis"]="Genesis"
		["gg"]="gamegear"
		["megacd"]="MegaCD"
		["neogeo"]="NEOGEO"
		["nes"]="NES"
		["s32x"]="S32X"
		["sms"]="SMS"
		["snes"]="SNES"
		["tgfx16"]="TGFX16"
		["tgfx16cd"]="TGFX16CD"
		["psx"]="PSX"
	)

	# MGL core name settings
	declare -gA MGL_CORE=(
		["amiga"]="Minimig"
		["arcade"]="Arcade"
		["atari2600"]="ATARI7800"
		["atari5200"]="ATARI5200"
		["atari7800"]="ATARI7800"
		["atarilynx"]="AtariLynx"
		["c64"]="C64"
		["fds"]="NES"
		["gb"]="GAMEBOY"
		["gbc"]="GAMEBOY"
		["gba"]="GBA"
		["genesis"]="Genesis"
		["gg"]="SMS"
		["megacd"]="MegaCD"
		["neogeo"]="NEOGEO"
		["nes"]="NES"
		["s32x"]="S32X"
		["sms"]="SMS"
		["snes"]="SNES"
		["tgfx16"]="TurboGrafx16"
		["tgfx16cd"]="TurboGrafx16"
		["psx"]="PSX"
	)

	# MGL delay settings
	declare -giA MGL_DELAY=(
		["amiga"]="1"
		["arcade"]="2"
		["atari2600"]="1"
		["atari5200"]="1"
		["atari7800"]="1"
		["atarilynx"]="1"
		["c64"]="1"
		["fds"]="2"
		["gb"]="2"
		["gbc"]="2"
		["gba"]="2"
		["genesis"]="1"
		["gg"]="1"
		["megacd"]="1"
		["neogeo"]="1"
		["nes"]="2"
		["s32x"]="1"
		["sms"]="1"
		["snes"]="2"
		["tgfx16"]="1"
		["tgfx16cd"]="1"
		["psx"]="1"
	)

	# MGL index settings
	declare -giA MGL_INDEX=(
		["amiga"]="0"
		["arcade"]="0"
		["atari2600"]="0"
		["atari5200"]="1"
		["atari7800"]="1"
		["atarilynx"]="1"
		["c64"]="1"
		["fds"]="0"
		["gb"]="0"
		["gbc"]="0"
		["gba"]="0"
		["genesis"]="0"
		["gg"]="2"
		["megacd"]="0"
		["neogeo"]="1"
		["nes"]="0"
		["s32x"]="0"
		["sms"]="1"
		["snes"]="0"
		["tgfx16"]="0"
		["tgfx16cd"]="0"
		["psx"]="1"
	)

	# MGL type settings
	declare -glA MGL_TYPE=(
		["amiga"]="f"
		["arcade"]="f"
		["atari2600"]="f"
		["atari5200"]="f"
		["atari7800"]="f"
		["atarilynx"]="f"
		["c64"]="f"
		["fds"]="f"
		["gb"]="f"
		["gbc"]="f"
		["gba"]="f"
		["genesis"]="f"
		["gg"]="f"
		["megacd"]="s"
		["neogeo"]="f"
		["nes"]="f"
		["s32x"]="f"
		["sms"]="f"
		["snes"]="f"
		["tgfx16"]="f"
		["tgfx16cd"]="s"
		["psx"]="s"
	)

	# NEOGEO to long name mappings English
	declare -gA NEOGEO_PRETTY_ENGLISH=(
		["3countb"]="3 Count Bout"
		["2020bb"]="2020 Super Baseball"
		["2020bba"]="2020 Super Baseball (set 2)"
		["2020bbh"]="2020 Super Baseball (set 3)"
		["abyssal"]="Abyssal Infants"
		["alpham2"]="Alpha Mission II"
		["alpham2p"]="Alpha Mission II (prototype)"
		["androdun"]="Andro Dunos"
		["aodk"]="Aggressors of Dark Kombat"
		["aof"]="Art of Fighting"
		["aof2"]="Art of Fighting 2"
		["aof2a"]="Art of Fighting 2 (NGH-056)"
		["aof3"]="Art of Fighting 3: The Path of the Warrior"
		["aof3k"]="Art of Fighting 3: The Path of the Warrior (Korean release)"
		["b2b"]="Bang Bang Busters"
		["badapple"]="Bad Apple Demo"
		["bakatono"]="Bakatonosama Mahjong Manyuuki"
		["bangbead"]="Bang Bead"
		["bjourney"]="Blue's Journey"
		["blazstar"]="Blazing Star"
		["breakers"]="Breakers"
		["breakrev"]="Breakers Revenge"
		["brningfh"]="Burning Fight (NGH-018, US)"
		["brningfp"]="Burning Fight (prototype, older)"
		["brnngfpa"]="Burning Fight (prototype, near final, ver 23.3, 910326)"
		["bstars"]="Baseball Stars Professional"
		["bstars2"]="Baseball Stars 2"
		["bstarsh"]="Baseball Stars Professional (NGH-002)"
		["burningf"]="Burning Fight"
		["burningfh"]="Burning Fight (NGH-018, US)"
		["burningfp"]="Burning Fight (prototype, older)"
		["burningfpa"]="Burning Fight (prototype, near final, ver 23.3, 910326)"
		["cabalng"]="Cabal"
		["columnsn"]="Columns"
		["cphd"]="Crouching Pony Hidden Dragon Demo"
		["crswd2bl"]="Crossed Swords 2 (CD conversion)"
		["crsword"]="Crossed Swords"
		["ct2k3sa"]="Crouching Tiger Hidden Dragon 2003 Super Plus (The King of Fighters 2001 bootleg)"
		["ctomaday"]="Captain Tomaday"
		["cyberlip"]="Cyber-Lip"
		["diggerma"]="Digger Man"
		["doubledr"]="Double Dragon"
		["eightman"]="Eight Man"
		["fatfursp"]="Fatal Fury Special"
		["fatfurspa"]="Fatal Fury Special (NGM-058 ~ NGH-058, set 2)"
		["fatfury1"]="Fatal Fury: King of Fighters"
		["fatfury2"]="Fatal Fury 2"
		["fatfury3"]="Fatal Fury 3: Road to the Final Victory"
		["fbfrenzy"]="Football Frenzy"
		["fghtfeva"]="Fight Fever (set 2)"
		["fightfev"]="Fight Fever"
		["fightfeva"]="Fight Fever (set 2)"
		["flipshot"]="Battle Flip Shot"
		["frogfest"]="Frog Feast"
		["froman2b"]="Idol Mahjong Final Romance 2 (CD conversion)"
		["fswords"]="Fighters Swords (Korean release of Samurai Shodown III)"
		["ftfurspa"]="Fatal Fury Special (NGM-058 ~ NGH-058, set 2)"
		["galaxyfg"]="Galaxy Fight: Universal Warriors"
		["ganryu"]="Ganryu"
		["garou"]="Garou: Mark of the Wolves"
		["garoubl"]="Garou: Mark of the Wolves (bootleg)"
		["garouh"]="Garou: Mark of the Wolves (earlier release)"
		["garoup"]="Garou: Mark of the Wolves (prototype)"
		["ghostlop"]="Ghostlop"
		["goalx3"]="Goal! Goal! Goal!"
		["gowcaizr"]="Voltage Fighter Gowcaizer"
		["gpilots"]="Ghost Pilots"
		["gpilotsh"]="Ghost Pilots (NGH-020, US)"
		["gururin"]="Gururin"
		["hyprnoid"]="Hypernoid"
		["irnclado"]="Ironclad (prototype, bootleg)"
		["ironclad"]="Ironclad"
		["ironclado"]="Ironclad (prototype, bootleg)"
		["irrmaze"]="The Irritating Maze"
		["janshin"]="Janshin Densetsu: Quest of Jongmaster"
		["joyjoy"]="Puzzled"
		["kabukikl"]="Far East of Eden: Kabuki Klash"
		["karnovr"]="Karnov's Revenge"
		["kf2k2mp"]="The King of Fighters 2002 Magic Plus (bootleg)"
		["kf2k2mp2"]="The King of Fighters 2002 Magic Plus II (bootleg)"
		["kf2k2pla"]="The King of Fighters 2002 Plus (bootleg set 2)"
		["kf2k2pls"]="The King of Fighters 2002 Plus (bootleg)"
		["kf2k5uni"]="The King of Fighters 10th Anniversary 2005 Unique (The King of Fighters 2002 bootleg)"
		["kf10thep"]="The King of Fighters 10th Anniversary Extra Plus (The King of Fighters 2002 bootleg)"
		["kizuna"]="Kizuna Encounter: Super Tag Battle"
		["kof2k4se"]="The King of Fighters Special Edition 2004 (The King of Fighters 2002 bootleg)"
		["kof94"]="The King of Fighters '94"
		["kof95"]="The King of Fighters '95"
		["kof95a"]="The King of Fighters '95 (NGM-084, alt board)"
		["kof95h"]="The King of Fighters '95 (NGH-084)"
		["kof96"]="The King of Fighters '96"
		["kof96h"]="The King of Fighters '96 (NGH-214)"
		["kof97"]="The King of Fighters '97"
		["kof97h"]="The King of Fighters '97 (NGH-2320)"
		["kof97k"]="The King of Fighters '97 (Korean release)"
		["kof97oro"]="The King of Fighters '97 Chongchu Jianghu Plus 2003 (bootleg)"
		["kof97pls"]="The King of Fighters '97 Plus (bootleg)"
		["kof98"]="The King of Fighters '98: The Slugfest"
		["kof98a"]="The King of Fighters '98: The Slugfest (NGM-2420, alt board)"
		["kof98h"]="The King of Fighters '98: The Slugfest (NGH-2420)"
		["kof98k"]="The King of Fighters '98: The Slugfest (Korean release)"
		["kof98ka"]="The King of Fighters '98: The Slugfest (Korean release, set 2)"
		["kof99"]="The King of Fighters '99: Millennium Battle"
		["kof99e"]="The King of Fighters '99: Millennium Battle (earlier release)"
		["kof99h"]="The King of Fighters '99: Millennium Battle (NGH-2510)"
		["kof99k"]="The King of Fighters '99: Millennium Battle (Korean release)"
		["kof99p"]="The King of Fighters '99: Millennium Battle (prototype)"
		["kof2000"]="The King of Fighters 2000"
		["kof2000n"]="The King of Fighters 2000"
		["kof2001"]="The King of Fighters 2001"
		["kof2001h"]="The King of Fighters 2001 (NGH-2621)"
		["kof2002"]="The King of Fighters 2002"
		["kof2002b"]="The King of Fighters 2002 (bootleg)"
		["kof2003"]="The King of Fighters 2003"
		["kof2003h"]="The King of Fighters 2003 (NGH-2710)"
		["kof2003ps2"]="The King of Fighters 2003 (PS2)"
		["kog"]="King of Gladiators (The King of Fighters '97 bootleg)"
		["kotm"]="King of the Monsters"
		["kotm2"]="King of the Monsters 2: The Next Thing"
		["kotm2p"]="King of the Monsters 2: The Next Thing (prototype)"
		["kotmh"]="King of the Monsters (set 2)"
		["lans2004"]="Lansquenet"
		["lastblad"]="The Last Blade"
		["lastbladh"]="The Last Blade (NGH-2340)"
		["lastbld2"]="The Last Blade 2"
		["lasthope"]="Last Hope"
		["lastsold"]="The Last Soldier"
		["lbowling"]="League Bowling"
		["legendos"]="Legend of Success Joe"
		["lresort"]="Last Resort"
		["lresortp"]="Last Resort (prototype)"
		["lstbladh"]="Last Blade (NGH-2340)"
		["magdrop2"]="Magical Drop II"
		["magdrop3"]="Magical Drop III"
		["maglord"]="Magician Lord"
		["maglordh"]="Magician Lord (NGH-005)"
		["mahretsu"]="Mahjong Kyo Retsuden"
		["marukodq"]="Chibi Marukochan Deluxe Quiz"
		["matrim"]="Power Instinct Matrimelee"
		["miexchng"]="Money Puzzle Exchanger"
		["minasan"]="Minasan no Okagesamadesu! Dai Sugoroku Taikai"
		["montest"]="Monitor Test ROM"
		["moshougi"]="Shougi no Tatsujin: Master of Syougi"
		["ms4plus"]="Metal Slug 4 Plus (bootleg)"
		["mslug"]="Metal Slug: Super Vehicle-001"
		["mslug2"]="Metal Slug 2: Super Vehicle-001/II"
		["mslug2t"]="Metal Slug 2 Turbo (hack)"
		["mslug3"]="Metal Slug 3"
		["mslug3b6"]="Metal Slug 6 (Metal Slug 3 bootleg)"
		["mslug3h"]="Metal Slug 3 (NGH-2560)"
		["mslug4"]="Metal Slug 4"
		["mslug4h"]="Metal Slug 4 (NGH-2630)"
		["mslug5"]="Metal Slug 5"
		["mslug5h"]="Metal Slug 5 (NGH-2680)"
		["mslug6"]="Metal Slug 6 (Metal Slug 3 bootleg)"
		["mslugx"]="Metal Slug X: Super Vehicle-001"
		["mutnat"]="Mutation Nation"
		["nam1975"]="NAM-1975"
		["nblktigr"]="Neo Black Tiger"
		["ncombat"]="Ninja Combat"
		["ncombath"]="Ninja Combat (NGH-009)"
		["ncommand"]="Ninja Commando"
		["neobombe"]="Neo Bomberman"
		["neocup98"]="Neo-Geo Cup 98: The Road to the Victory"
		["neodrift"]="Neo Drift Out: New Technology"
		["neofight"]="Neo Fight"
		["neomrdo"]="Neo Mr. Do!"
		["neothund"]="Neo Thunder"
		["neotris"]="NeoTRIS (free beta version)"
		["ninjamas"]="Ninja Master's"
		["nitd"]="Nightmare in the Dark"
		["nitdbl"]="Nightmare in the Dark (bootleg)"
		["nsmb"]="New Super Mario Bros."
		["overtop"]="OverTop"
		["panicbom"]="Panic Bomber"
		["pbbblenb"]="Puzzle Bobble (bootleg)"
		["pbobbl2n"]="Puzzle Bobble 2"
		["pbobblen"]="Puzzle Bobble"
		["pbobblenb"]="Puzzle Bobble (bootleg)"
		["pgoal"]="Pleasure Goal"
		["pnyaa"]="Pochi and Nyaa"
		["popbounc"]="Pop 'n Bounce"
		["preisle2"]="Prehistoric Isle 2"
		["pspikes2"]="Power Spikes II"
		["pulstar"]="Pulstar"
		["puzzldpr"]="Puzzle De Pon! R!"
		["puzzledp"]="Puzzle De Pon!"
		["quizdai2"]="Quiz Meitantei Neo & Geo: Quiz Daisousa Sen part 2"
		["quizdais"]="Quiz Daisousa Sen: The Last Count Down"
		["quizdask"]="Quiz Salibtamjeong: The Last Count Down (Korean localized Quiz Daisousa Sen)"
		["quizkof"]="Quiz King of Fighters"
		["quizkofk"]="Quiz King of Fighters (Korean release)"
		["ragnagrd"]="Ragnagard"
		["rbff1"]="Real Bout Fatal Fury"
		["rbff1a"]="Real Bout Fatal Fury (bug fix revision)"
		["rbff2"]="Real Bout Fatal Fury 2: The Newcomers"
		["rbff2h"]="Real Bout Fatal Fury 2: The Newcomers (NGH-2400)"
		["rbff2k"]="Real Bout Fatal Fury 2: The Newcomers (Korean release)"
		["rbffspck"]="Real Bout Fatal Fury Special (Korean release)"
		["rbffspec"]="Real Bout Fatal Fury Special"
		["rbffspeck"]="Real Bout Fatal Fury Special (Korean release)"
		["ridhero"]="Riding Hero"
		["ridheroh"]="Riding Hero (set 2)"
		["roboarma"]="Robo Army (NGM-032 ~ NGH-032)"
		["roboarmy"]="Robo Army"
		["roboarmya"]="Robo Army (NGM-032 ~ NGH-032)"
		["rotd"]="Rage of the Dragons"
		["rotdh"]="Rage of the Dragons (NGH-2640?)"
		["s1945p"]="Strikers 1945 Plus"
		["samsh5fe"]="Samurai Shodown V Special Final Edition"
		["samsh5pf"]="Samurai Shodown V Perfect"
		["samsh5sp"]="Samurai Shodown V Special"
		["samsh5sph"]="Samurai Shodown V Special (2nd release, less censored)"
		["samsh5spho"]="Samurai Shodown V Special (1st release, censored)"
		["samsho"]="Samurai Shodown"
		["samsho2"]="Samurai Shodown II"
		["samsho2k"]="Saulabi Spirits (Korean release of Samurai Shodown II)"
		["samsho2ka"]="Saulabi Spirits (Korean release of Samurai Shodown II, set 2)"
		["samsho3"]="Samurai Shodown III"
		["samsho3h"]="Samurai Shodown III (NGH-087)"
		["samsho4"]="Samurai Shodown IV: Amakusa's Revenge"
		["samsho4k"]="Pae Wang Jeon Seol: Legend of a Warrior"
		["samsho5"]="Samurai Shodown V"
		["samsho5b"]="Samurai Shodown V (bootleg)"
		["samsho5h"]="Samurai Shodown V (NGH-2700)"
		["samsho5x"]="Samurai Shodown V (XBOX version hack)"
		["samshoh"]="Samurai Shodown (NGH-045)"
		["savagere"]="Savage Reign"
		["sbp"]="Super Bubble Pop"
		["scbrawlh"]="Soccer Brawl (NGH-031)"
		["sdodgeb"]="Super Dodge Ball"
		["sengoku"]="Sengoku"
		["sengoku2"]="Sengoku 2"
		["sengoku3"]="Sengoku 3"
		["sengokuh"]="Sengoku (NGH-017, US)"
		["shcktroa"]="Shock Troopers (set 2)"
		["shocktr2"]="Shock Troopers: 2nd Squad"
		["shocktro"]="Shock Troopers"
		["shocktroa"]="Shock Troopers (set 2)"
		["smbng"]="New Super Mario Bros. Demo"
		["smsh5sph"]="Samurai Shodown V Special (2nd release, less censored)"
		["smsh5spo"]="Samurai Shodown V Special (1st release, censored)"
		["smsho2k2"]="Saulabi Spirits (Korean release of Samurai Shodown II, set 2)"
		["socbrawl"]="Soccer Brawl"
		["socbrawlh"]="Soccer Brawl (NGH-031)"
		["sonicwi2"]="Aero Fighters 2"
		["sonicwi3"]="Aero Fighters 3"
		["spinmast"]="Spinmaster"
		["ssideki"]="Super Sidekicks"
		["ssideki2"]="Super Sidekicks 2: The World Championship"
		["ssideki3"]="Super Sidekicks 3: The Next Glory"
		["ssideki4"]="The Ultimate 11: The SNK Football Championship"
		["stakwin"]="Stakes Winner"
		["stakwin2"]="Stakes Winner 2"
		["strhoop"]="Street Hoop / Street Slam"
		["superspy"]="The Super Spy"
		["svc"]="SNK vs. Capcom: SVC Chaos"
		["svccpru"]="SNK vs. Capcom Remix Ultra"
		["svcplus"]="SNK vs. Capcom Plus (bootleg)"
		["svcsplus"]="SNK vs. Capcom Super Plus (bootleg)"
		["teot"]="The Eye of Typhoon: Tsunami Edition"
		["tetrismn"]="Tetris"
		["tophuntr"]="Top Hunter: Roddy & Cathy"
		["tophuntrh"]="Top Hunter: Roddy & Cathy (NGH-046)"
		["totc"]="Treasure of the Caribbean"
		["tpgolf"]="Top Player's Golf"
		["tphuntrh"]="Top Hunter: Roddy & Cathy (NGH-046)"
		["trally"]="Thrash Rally"
		["turfmast"]="Neo Turf Masters"
		["twinspri"]="Twinkle Star Sprites"
		["tws96"]="Tecmo World Soccer '96"
		["twsoc96"]="Tecmo World Soccer '96"
		["viewpoin"]="Viewpoint"
		["wakuwak7"]="Waku Waku 7"
		["wh1"]="World Heroes"
		["wh1h"]="World Heroes (ALH-005)"
		["wh1ha"]="World Heroes (set 3)"
		["wh2"]="World Heroes 2"
		["wh2j"]="World Heroes 2 Jet"
		["whp"]="World Heroes Perfect"
		["wjammers"]="Windjammers"
		["wjammss"]="Windjammers Supersonic"
		["xenocrisis"]="Xeno Crisis"
		["zedblade"]="Zed Blade"
		["zintrckb"]="ZinTricK"
		["zintrkcd"]="ZinTricK (CD conversion)"
		["zupapa"]="Zupapa!"
	)

	# NEOGEO to long name mappings Japanese
	declare -gA NEOGEO_PRETTY_JAPANESE=(
		["3countb"]="Fire Suplex"
		["2020bb"]=""
		["2020bba"]=""
		["2020bbh"]=""
		["abyssal"]=""
		["alpham2"]="ASO II: Last Guardian"
		["alpham2p"]="ASO II: Last Guardian (prototype)"
		["androdun"]=""
		["aodk"]="Tsuukai GANGAN Koushinkyoku"
		["aof"]="Ryuuko no Ken"
		["aof2"]="Ryuuko no Ken 2"
		["aof2a"]="Ryuuko no Ken 2 (NGH-056)"
		["aof3"]="Art of Fighting: Ryuuko no Ken Gaiden"
		["aof3k"]=""
		["b2b"]=""
		["badapple"]=""
		["bakatono"]=""
		["bangbead"]=""
		["bjourney"]="Raguy"
		["blazstar"]=""
		["breakers"]=""
		["breakrev"]=""
		["brningfh"]=""
		["brningfp"]=""
		["brnngfpa"]=""
		["bstars"]=""
		["bstars2"]=""
		["bstarsh"]=""
		["burningf"]=""
		["burningfh"]=""
		["burningfp"]=""
		["burningfpa"]=""
		["cabalng"]=""
		["columnsn"]=""
		["cphd"]=""
		["crswd2bl"]=""
		["crsword"]=""
		["ct2k3sa"]=""
		["ctomaday"]=""
		["cyberlip"]=""
		["diggerma"]=""
		["doubledr"]=""
		["eightman"]=""
		["fatfursp"]="Garou Densetsu Special"
		["fatfurspa"]="Garou Densetsu Special (NGM-058 ~ NGH-058, set 2)"
		["fatfury1"]="Garou Densetsu: Shukumei no Tatakai"
		["fatfury2"]="Garou Densetsu 2: Arata-naru Tatakai"
		["fatfury3"]="Garou Densetsu 3: Haruka-naru Tatakai"
		["fbfrenzy"]=""
		["fghtfeva"]="Wang Jung Wang (set 2)"
		["fightfev"]="Wang Jung Wang"
		["fightfeva"]="Wang Jung Wang (set 2)"
		["flipshot"]=""
		["frogfest"]=""
		["froman2b"]=""
		["fswords"]=""
		["ftfurspa"]="Garou Densetsu Special (NGM-058 ~ NGH-058, set 2)"
		["galaxyfg"]=""
		["ganryu"]="Musashi Ganryuki"
		["garou"]=""
		["garoubl"]=""
		["garouh"]=""
		["garoup"]=""
		["ghostlop"]=""
		["goalx3"]=""
		["gowcaizr"]="Choujin Gakuen Gowcaizer"
		["gpilots"]=""
		["gpilotsh"]=""
		["gururin"]=""
		["hyprnoid"]=""
		["irnclado"]="Choutetsu Brikin'ger (prototype, bootleg)"
		["ironclad"]="Choutetsu Brikin'ger"
		["ironclado"]="Choutetsu Brikin'ger (prototype, bootleg)"
		["irrmaze"]="Ultra Denryu Iraira Bou"
		["janshin"]=""
		["joyjoy"]="Joy Joy Kid"
		["kabukikl"]="Tengai Makyou: Shin Den"
		["karnovr"]="Fighter's History Dynamite"
		["kf2k2mp"]=""
		["kf2k2mp2"]=""
		["kf2k2pla"]=""
		["kf2k2pls"]=""
		["kf2k5uni"]=""
		["kf10thep"]=""
		["kizuna"]="Fu'un Super Tag Battle"
		["kof2k4se"]=""
		["kof94"]=""
		["kof95"]=""
		["kof95a"]=""
		["kof95h"]=""
		["kof96"]=""
		["kof96h"]=""
		["kof97"]=""
		["kof97h"]=""
		["kof97k"]=""
		["kof97oro"]=""
		["kof97pls"]=""
		["kof98"]="King of Fighters '98: Dream Match Never Ends"
		["kof98a"]="King of Fighters '98: Dream Match Never Ends (NGM-2420, alt board)"
		["kof98h"]="King of Fighters '98: Dream Match Never Ends (NGH-2420)"
		["kof98k"]=""
		["kof98ka"]=""
		["kof99"]=""
		["kof99e"]=""
		["kof99h"]=""
		["kof99k"]=""
		["kof99p"]=""
		["kof2000"]=""
		["kof2000n"]=""
		["kof2001"]=""
		["kof2001h"]=""
		["kof2002"]=""
		["kof2002b"]=""
		["kof2003"]=""
		["kof2003h"]=""
		["kof2003ps2"]=""
		["kog"]=""
		["kotm"]=""
		["kotm2"]=""
		["kotm2p"]=""
		["kotmh"]=""
		["lans2004"]=""
		["lastblad"]="Bakumatsu Roman: Gekka no Kenshi"
		["lastbladh"]="Bakumatsu Roman: Gekka no Kenshi (NGH-2340)"
		["lastbld2"]="Bakumatsu Roman: Dai Ni Maku Gekka no Kenshi"
		["lasthope"]=""
		["lastsold"]=""
		["lbowling"]=""
		["legendos"]="Ashita no Joe Densetsu"
		["lresort"]=""
		["lresortp"]=""
		["lstbladh"]="Bakumatsu Roman: Gekka no Kenshi (NGH-2340)"
		["magdrop2"]="Magical Drop 2"
		["magdrop3"]=""
		["maglord"]=""
		["maglordh"]=""
		["mahretsu"]=""
		["marukodq"]=""
		["matrim"]="Shin Goketsuji Ichizoku: Tokon Matrimelee"
		["miexchng"]="Money Idol Exchanger"
		["minasan"]=""
		["montest"]=""
		["moshougi"]=""
		["ms4plus"]=""
		["mslug"]=""
		["mslug2"]=""
		["mslug2t"]=""
		["mslug3"]=""
		["mslug3b6"]=""
		["mslug3h"]=""
		["mslug4"]=""
		["mslug4h"]=""
		["mslug5"]=""
		["mslug5h"]=""
		["mslug6"]=""
		["mslugx"]=""
		["mutnat"]=""
		["nam1975"]=""
		["nblktigr"]=""
		["ncombat"]=""
		["ncombath"]=""
		["ncommand"]=""
		["neobombe"]=""
		["neocup98"]=""
		["neodrift"]=""
		["neofight"]=""
		["neomrdo"]=""
		["neothund"]=""
		["neotris"]=""
		["ninjamas"]="Haoh-ninpo-cho"
		["nitd"]=""
		["nitdbl"]=""
		["nsmb"]=""
		["overtop"]=""
		["panicbom"]=""
		["pbbblenb"]="Bust-A-Move (bootleg)"
		["pbobbl2n"]="Bust-A-Move Again"
		["pbobblen"]="Bust-A-Move"
		["pbobblenb"]="Bust-A-Move (bootleg)"
		["pgoal"]=""
		["pnyaa"]="Pochi to Nyaa"
		["popbounc"]="Gapporin"
		["preisle2"]=""
		["pspikes2"]=""
		["pulstar"]=""
		["puzzldpr"]=""
		["puzzledp"]=""
		["quizdai2"]=""
		["quizdais"]=""
		["quizdask"]=""
		["quizkof"]=""
		["quizkofk"]=""
		["ragnagrd"]="Shin-Oh-Ken"
		["rbff1"]="Real Bout Garou Densetsu"
		["rbff1a"]="Real Bout Garou Densetsu (bug fix revision)"
		["rbff2"]="Real Bout Garou Densetsu 2: The Newcomers"
		["rbff2h"]="Real Bout Garou Densetsu 2: The Newcomers (NGH-2400)"
		["rbff2k"]=""
		["rbffspck"]=""
		["rbffspec"]="Real Bout Garou Densetsu Special"
		["rbffspeck"]=""
		["ridhero"]=""
		["ridheroh"]=""
		["roboarma"]=""
		["roboarmy"]=""
		["roboarmya"]=""
		["rotd"]=""
		["rotdh"]=""
		["s1945p"]=""
		["samsh5fe"]="Samurai Shodown Zero Special Final Edition"
		["samsh5pf"]="Samurai Spirits Zero Perfect"
		["samsh5sp"]="Samurai Spirits Zero Special"
		["samsh5sph"]="Samurai Spirits Zero Special (2nd release, less censored)"
		["samsh5spho"]="Samurai Spirits Zero Special (1st release, censored)"
		["samsho"]="Samurai Spirits"
		["samsho2"]="Shin Samurai Spirits: Haohmaru Jigokuhen"
		["samsho2k"]=""
		["samsho2ka"]=""
		["samsho3"]="Samurai Spirits: Zankurou Musouken"
		["samsho3h"]="Samurai Spirits: Zankurou Musouken (NGH-087)"
		["samsho4"]="Samurai Spirits: Amakusa Kourin"
		["samsho4k"]=""
		["samsho5"]="Samurai Spirits Zero"
		["samsho5b"]="Samurai Spirits Zero (bootleg)"
		["samsho5h"]="Samurai Spirits Zero (NGH-2700)"
		["samsho5x"]="Samurai Spirits Zero (XBOX version hack)"
		["samshoh"]="Samurai Spirits (NGH-045)"
		["savagere"]="Fu'un Mokushiroku: Kakutou Sousei"
		["sbp"]=""
		["scbrawlh"]=""
		["sdodgeb"]="Kunio no Nekketsu Toukyuu Densetsu"
		["sengoku"]="Sengoku Denshou"
		["sengoku2"]="Sengoku Denshou 2"
		["sengoku3"]="Sengoku Denshou 2001"
		["sengokuh"]="Sengoku Denshou (NGH-017, US)"
		["shcktroa"]=""
		["shocktr2"]=""
		["shocktro"]=""
		["shocktroa"]=""
		["smbng"]=""
		["smsh5sph"]="Samurai Spirits Zero Special (2nd release, less censored)"
		["smsh5spo"]="Samurai Spirits Zero Special (1st release, censored)"
		["smsho2k2"]=""
		["socbrawl"]=""
		["socbrawlh"]=""
		["sonicwi2"]="Sonic Wings 2"
		["sonicwi3"]="Sonic Wings 3"
		["spinmast"]="Miracle Adventure"
		["ssideki"]="Tokuten Ou"
		["ssideki2"]="Tokuten Ou 2: Real Fight Football"
		["ssideki3"]="Tokuten Ou 3: Eikou e no Chousen"
		["ssideki4"]="Tokuten Ou: Honoo no Libero"
		["stakwin"]="Stakes Winner: GI Kinzen Seiha e no Michi"
		["stakwin2"]=""
		["strhoop"]="Dunk Dream"
		["superspy"]=""
		["svc"]=""
		["svccpru"]=""
		["svcplus"]=""
		["svcsplus"]=""
		["teot"]=""
		["tetrismn"]=""
		["tophuntr"]=""
		["tophuntrh"]=""
		["totc"]=""
		["tpgolf"]=""
		["tphuntrh"]=""
		["trally"]=""
		["turfmast"]="Big Tournament Golf"
		["twinspri"]=""
		["tws96"]=""
		["twsoc96"]=""
		["viewpoin"]=""
		["wakuwak7"]=""
		["wh1"]=""
		["wh1h"]=""
		["wh1ha"]=""
		["wh2"]=""
		["wh2j"]=""
		["whp"]=""
		["wjammers"]="Flying Power Disc"
		["wjammss"]=""
		["xenocrisis"]=""
		["zedblade"]="Operation Ragnarok"
		["zintrckb"]="Oshidashi Zentrix"
		["zintrkcd"]="Oshidashi Zentrix (CD conversion)"
		["zupapa"]=""
	)
}

declare -gl samquiet="no"
declare -gl samdebug="yes"
declare -gl samtrace="no"

case "${1}" in
start | restart | quickstart)
	if [ "${samprocess}" == "Super_Attract_Mode.sh" ]; then
		return
	fi
	;;
stop | quit | exit)
	return
	;;
reset)
	shift
	rm --force ${mrsamtmp}/amigashared_path $ >/dev/null
	rm --force ${mrsamtmp}/default_paths $ >/dev/null
	rm --force ${mrsamtmp}/ini_settings $ >/dev/null
	samquiet "All tmp settings files deleted..."
	samquiet "Run script again without reset to start..."
	return
	;;
esac

function regen_ini_settings() {
	echo -n " Please wait while settings are loaded..."
	read_samini
	echo " Done!"
}

function vardebug_out() {
	echo "" | >"${mrsamtmp}/vardump_${samprocess}.log"
	declare -p | grep -wvf /tmp/$$ | grep -v ^\" | grep -v ^\" >>"${mrsamtmp}/vardump_${samprocess}.log"
	rm /tmp/$$
}

if [[ -s "${mrsamtmp}/ini_settings" ]]; then
	ini_file_md5=$(md5sum ${misterscripts}/Super_Attract_Mode.ini | awk '{print $1}')
	source "${mrsamtmp}/ini_settings"
	if [[ "${ini_settings[md5sum]}" != "${ini_file_md5}" ]]; then
		regen_ini_settings
	else
		echo -n " Please wait while settings are loaded from file..."
		echo " Done!"
	fi
elif [[ ! -s "${mrsamtmp}/ini_settings" ]]; then
	regen_ini_settings
fi
