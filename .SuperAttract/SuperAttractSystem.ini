#!/bin/bash

# https://github.com/mrchrisster/MiSTer_SAM/
# Copyright (c) 2021 by mrchrisster and Mellified

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# Description
# This cycles through arcade and console cores periodically
# Games are randomly pulled from their respective folders

# ======== Credits ========
# Original concept and implementation: mrchrisster
# Additional development and script layout: Mellified and Paradox
#
# mbc by pocomane
# partun by woelper
# samindex by wizzo
# tty2oled by venice
#
# Thanks for the contributions and support:
# kaloun34, redsteakraw, RetroDriven, LamerDeluxe, InquisitiveCoder, Sigismond

# Save our PID and process
declare -g sampid="${$}"
declare -g samprocess=$(basename -- ${0})
declare -g mrsamtmp="/tmp/.SAM_tmp"
declare -g userstartup="${misterpath}/linux/user-startup.sh"
declare -g userstartuptpl="${misterpath}/linux/_user-startup.sh"

function init_vars() {
	declare -g gamelistpath="${mrsampath}/SAM_Gamelists"
	declare -g gamelistpathtmp="/tmp/.SAM_List"
	declare -g excludepath="${mrsampath}/SAM_Excludelists"
	declare -g tmpfile="${gamelistpathtmp}/tmpfile"
	declare -g tmpfile2="${gamelistpathtmp}/tmpfile2"
	declare -g corename_file="/tmp/CORENAME"
	declare -g corename_name=$(printf '%s\n' $(<${corename_file}))
	declare -gl corelistall="amiga arcade atari2600 atari5200 atari7800 atarilynx c64 fds gb gbc gba genesis gg megacd neogeo nes s32x sms snes tgfx16 tgfx16cd psx"
	declare -g amigashared="${CORE_PATH_FINAL[amiga]}/shared"

	# Named Pipes
	declare -g SAM_cmd_pipe="${mrsamtmp}/SAM_cmd_pipe"
	declare -g MCP_cmd_pipe="${mrsamtmp}/MCP_cmd_pipe"
	declare -g TTY_cmd_pipe="${mrsamtmp}/TTY_cmd_pipe"
	declare -g SAM_Activity_pipe="${mrsamtmp}/SAM_Activity_pipe"
	declare -g MCP_Activity_pipe="${mrsamtmp}/MCP_Activity_pipe"
	declare -g MCP_Corename_Activity_pipe="${mrsamtmp}/MCP_CoreName_Activity_pipe"
	declare -g MCP_CoreName_Change_pipe="${mrsamtmp}/MCP_CoreName_Change_pipe"
	declare -g MCP_DeviceChange_pipe="${mrsamtmp}/MCP_DeviceChange_pipe"

	# ======== GLOBAL VARIABLES =========
	declare -gl create_all_gamelists=${ini_settings[create_all_gamelists]:="no"}
	declare -gl rebuild_freq=${ini_settings[rebuild_freq]:="week"}
	declare -gi regen_duration=${ini_settings[regen_duration]:=4}
	declare -gi rebuild_freq_int=${ini_settings[rebuild_freq_int]:=604800}
	declare -gl rebuild_freq_arcade=${ini_settings[rebuild_freq_arcade]:="week"}
	declare -gi regen_duration_arcade=${ini_settings[regen_duration_arcade]:=1}
	declare -gi rebuild_freq_arcade_int=${ini_settings[rebuild_freq_arcade_int]:=604800}
	declare -gl rebuild_freq_amiga=${ini_settings[rebuild_freq_amiga]:="week"}
	declare -gi regen_duration_amiga=${ini_settings[regen_duration_amiga]:=8}
	declare -gi rebuild_freq_amiga_int=${ini_settings[rebuild_freq_amiga_int]:=604800}
	declare -gl usedefaultpaths=${ini_settings[usedefaultpaths]:="yes"}
	declare -gl samindex=${ini_settings[samindex]:="no"}
	declare -gl neogeoregion=${ini_settings[neogeoregion]:="english"}
	declare -gl useneogeotitles=${ini_settings[useneogeotitles]:="yes"}
	declare -gl listenmouse=${ini_settings[listenmouse]:="yes"}
	declare -gl listenkeyboard=${ini_settings[listenkeyboard]:="yes"}
	declare -gl listenjoy=${ini_settings[listenjoy]:="yes"}
	declare -gl menuonly=${ini_settings[menuonly]:="yes"}
	declare -gi samtimeout=${ini_settings[samtimeout]:=60}
	declare -gi bootsleep=${ini_settings[bootsleep]:=60}
	declare -g repository_url=${ini_settings[repository_url]:="https://github.com/mrchrisster/MiSTer_SAM"}
	declare -g branch=${ini_settings[branch]:="main"}

	# ======== TTY2OLED =======
	declare -gl ttyenable=${ini_settings[ttyenable]:="no"}
	declare -gi ttyupdate_pause=10
	declare -gA tty_currentinfo=(
		[core_pretty]=
		[name]=
		[core]=
		[counter]=0
		[name_scroll]=
		[name_scroll_position]=0
		[name_scroll_direction]=1
		[update_pause]=${ttyupdate_pause}
	)

	init_default_path_vars

	# ======== LOCAL VARIABLES ========
	if [ "${samprocess}" == "SuperAttract_init" ]; then
		declare -g foo="Bar"
		# From ini
	elif [ "${samprocess}" == "SuperAttract_MCP" ]; then
		declare -gi MCP_timeout=60
		declare -gi MCP_counter=${MCP_timeout}
		declare -g MCP_timeout_minutes=
		# From ini
	elif [ "${samprocess}" == "SuperAttract_tty2oled" ]; then
		declare -g ttydevice="/dev/ttyUSB0"
		declare -g ttypicture="/media/fat/tty2oled/pics"
		declare -g ttypicture_pri="/media/fat/tty2oled/pics_pri"
		declare -g prev_name_scroll=
		declare -g prev_counter=
		# From ini
		declare -gl ttyuseack=${ini_settings[ttyuseack]:="no"}
		declare -gi ttyscroll_speed=${ini_settings[ttyscroll_speed]:=1}
		declare -gi ttyscroll_speed_int=$((${ttyscroll_speed} - 1))
		declare -g ttysystemini=${ini_settings[ttysystemini]:="/media/fat/tty2oled/tty2oled-system.ini"}
		declare -g ttyuserini=${ini_settings[ttyuserini]:="/media/fat/tty2oled/tty2oled-user.ini"}
	elif [ "${samprocess}" == "Super_Attract_Mode.sh" ]; then
		declare -gi speedtest=0
		declare -gi inmenu=0
		declare -gi coreretries=3
		declare -gi romloadfails=0
		declare -g corelist_allowtmp=
		declare -gl skipmessage="Yes"
		declare -gi counter=0
		declare -gi countdown="nocountdown"
		declare -g file_to_load=
		declare -gl disablebootrom="Yes"
		# From ini
		declare -gi gametimer=${ini_settings[gametimer]:=120}
		declare -g corelist=${ini_settings[corelist]:-${corelistall}}
		declare -gl mute=${ini_settings[mute]:="core"}
		declare -gl playcurrentgame=${ini_settings[playcurrentgame]:="no"}
		declare -gi roulettetimer=${ini_settings[roulettetimer]:=500}
		declare -gl norepeat=${ini_settings[norepeat]:="yes"}
		declare -gl usezip=${ini_settings[usezip]:="yes"}
		# ======== BGM =======
		declare -gl bgm=${ini_settings[bgm]:="no"}
	fi
	unset ini_settings
}

function createfolders() {
	# Create folders if they don't exist
	[[ ! -d "${mrsampath}" ]] && mkdir -p "${mrsampath}"
	[[ ! -d "${mrsamtmp}" ]] && mkdir -p "${mrsamtmp}"
	[[ ! -d "${gamelistpath}" ]] && mkdir -p "${gamelistpath}"
	[[ ! -d "${gamelistpathtmp}" ]] && mkdir -p "${gamelistpathtmp}"
	[[ ! -d "${excludepath}" ]] && mkdir -p "${excludepath}"
	[[ ! -d "${mrsamtmp}/SAM_config" ]] && mkdir -p "${mrsamtmp}/SAM_config"
	[[ ! -d "${misterpath}/bootrom" ]] && mkdir -p "${misterpath}/bootrom"
}

function init_default_path_vars() {
	# ======== CORE PATHS ========
	declare -g amigapath=${ini_settings[amigapath]:="${misterpath}/Games/Amiga"}
	declare -g arcadepath=${ini_settings[arcadepath]:="${misterpath}/_Arcade"}
	declare -g atari2600path=${ini_settings[atari2600path]:="${misterpath}/Games/Atari7800"}
	declare -g atari5200path=${ini_settings[atari5200path]:="${misterpath}/Games/Atari5200"}
	declare -g atari7800path=${ini_settings[atari7800path]:="${misterpath}/Games/Atari7800"}
	declare -g atarilynxpath=${ini_settings[atarilynxpath]:="${misterpath}/Games/AtariLynx"}
	declare -g c64path=${ini_settings[c64path]:="${misterpath}/Games/C64"}
	declare -g fdspath=${ini_settings[fdspath]:="${misterpath}/Games/NES"}
	declare -g gbpath=${ini_settings[gbpath]:="${misterpath}/Games/Gameboy"}
	declare -g gbcpath=${ini_settings[gbcpath]:="${misterpath}/Games/Gameboy"}
	declare -g gbapath=${ini_settings[gbapath]:="${misterpath}/Games/GBA"}
	declare -g genesispath=${ini_settings[genesispath]:="${misterpath}/Games/Genesis"}
	declare -g ggpath=${ini_settings[ggpath]:="${misterpath}/Games/SMS"}
	declare -g megacdpath=${ini_settings[megacdpath]:="${misterpath}/Games/MegaCD"}
	declare -g neogeopath=${ini_settings[neogeopath]:="${misterpath}/Games/NeoGeo"}
	declare -g nespath=${ini_settings[nespath]:="${misterpath}/Games/NES"}
	declare -g s32xpath=${ini_settings[s32xpath]:="${misterpath}/Games/S32X"}
	declare -g smspath=${ini_settings[smspath]:="${misterpath}/Games/SMS"}
	declare -g snespath=${ini_settings[snespath]:="${misterpath}/Games/SNES"}
	declare -g tgfx16path=${ini_settings[tgfx16path]:="${misterpath}/Games/TGFX16"}
	declare -g tgfx16cdpath=${ini_settings[tgfx16cdpath]:="${misterpath}/Games/TGFX16-CD"}
	declare -g psxpath=${ini_settings[psxpath]:="${misterpath}/Games/PSX"}

	# ======== CORE PATHS EXTRA ========
	declare -g amigapathextra=${ini_settings[amigapathextra]:=}
	declare -g arcadepathextra=${ini_settings[arcadepathextra]:=}
	declare -g atari2600pathextra=${ini_settings[atari2600pathextra]:=}
	declare -g atari5200pathextra=${ini_settings[atari5200pathextra]:=}
	declare -g atari7800pathextra=${ini_settings[atari7800pathextra]:=}
	declare -g atarilynxpathextra=${ini_settings[atarilynxpathextra]:=}
	declare -g c64pathextra=${ini_settings[c64pathextra]:=}
	declare -g fdspathextra=${ini_settings[fdspathextra]:=}
	declare -g gbpathextra=${ini_settings[gbpathextra]:=}
	declare -g gbcpathextra=${ini_settings[gbcpathextra]:=}
	declare -g gbapathextra=${ini_settings[gbapathextra]:=}
	declare -g genesispathextra=${ini_settings[genesispathextra]:=}
	declare -g ggpathextra=${ini_settings[ggpathextra]:=}
	declare -g megacdpathextra=${ini_settings[megacdpathextra]:=}
	declare -g neogeopathextra=${ini_settings[neogeopathextra]:=}
	declare -g nespathextra=${ini_settings[nespathextra]:=}
	declare -g s32xpathextra=${ini_settings[s32xpathextra]:=}
	declare -g smspathextra=${ini_settings[smspathextra]:=}
	declare -g snespathextra=${ini_settings[snespathextra]:=}
	declare -g tgfx16pathextra=${ini_settings[tgfx16pathextra]:=}
	declare -g tgfx16cdpathextra=${ini_settings[tgfx16cdpathextra]:=}
	declare -g psxpathextra=${ini_settings[psxpathextra]:=}

	# ======== CORE PATHS RBF ========
	declare -g amigapathrbf=${ini_settings[amigapathrbf]:="_Computer"}
	declare -g arcadepathrbf=${ini_settings[arcadepathrbf]:="_Arcade"}
	declare -g atari2600pathrbf=${ini_settings[atari2600pathrbf]:="_Console"}
	declare -g atari5200pathrbf=${ini_settings[atari5200pathrbf]:="_Console"}
	declare -g atari7800pathrbf=${ini_settings[atari7800pathrbf]:="_Console"}
	declare -g atarilynxpathrbf=${ini_settings[atarilynxpathrbf]:="_Console"}
	declare -g c64pathrbf=${ini_settings[c64pathrbf]:="_Computer"}
	declare -g fdspathrbf=${ini_settings[fdspathrbf]:="_Console"}
	declare -g gbpathrbf=${ini_settings[gbpathrbf]:="_Console"}
	declare -g gbcpathrbf=${ini_settings[gbcpathrbf]:="_Console"}
	declare -g gbapathrbf=${ini_settings[gbapathrbf]:="_Console"}
	declare -g genesispathrbf=${ini_settings[genesispathrbf]:="_Console"}
	declare -g ggpathrbf=${ini_settings[ggpathrbf]:="_Console"}
	declare -g megacdpathrbf=${ini_settings[megacdpathrbf]:="_Console"}
	declare -g neogeopathrbf=${ini_settings[neogeopathrbf]:="_Console"}
	declare -g nespathrbf=${ini_settings[nespathrbf]:="_Console"}
	declare -g s32xpathrbf=${ini_settings[s32xpathrbf]:="_Console"}
	declare -g smspathrbf=${ini_settings[smspathrbf]:="_Console"}
	declare -g snespathrbf=${ini_settings[snespathrbf]:="_Console"}
	declare -g tgfx16pathrbf=${ini_settings[tgfx16pathrbf]:="_Console"}
	declare -g tgfx16cdpathrbf=${ini_settings[tgfx16cdpathrbf]:="_Console"}
	declare -g psxpathrbf=${ini_settings[psxpathrbf]:="_Console"}
}

function init_default_paths() {
	if [[ ! -s "${mrsamtmp}/default_paths" ]]; then
		# Default rom path search directories
		declare -ga GAMESDIR_FOLDERS=(
			/media/usb7/games
			/media/usb6/games
			/media/usb5/games
			/media/usb4/games
			/media/usb3/games
			/media/usb2/games
			/media/usb1/games
			/media/usb0/games
			${misterpath}/cifs/games
			${misterpath}/games
			/media/usb7
			/media/usb6
			/media/usb5
			/media/usb4
			/media/usb3
			/media/usb2
			/media/usb1
			/media/usb0
			${misterpath}/cifs
			${misterpath}
		)

		declare -g GET_SYSTEM_FOLDER_GAMESDIR=
		declare -g GET_SYSTEM_FOLDER_RESULT=
		echo "" | >"${mrsamtmp}/default_paths"
		for core in ${corelistall}; do
			defaultpath "${core}"
			# write to output file
			echo $(declare -p ${core}path | sed 's/declare -- //') >>"${mrsamtmp}/default_paths"
		done
	else
		[[ -s ${mrsamtmp}/default_paths ]] && source "${mrsamtmp}/default_paths"
	fi
}

function GET_SYSTEM_FOLDER() {
	local SYSTEM="${1}"
	for folder in "${GAMESDIR_FOLDERS[@]}"; do
		local RESULT=$(find "${folder}" -maxdepth 1 -iname "${SYSTEM}" -printf "%P\n" -quit 2>/dev/null)
		if [[ "${RESULT}" != "" ]]; then
			GET_SYSTEM_FOLDER_GAMESDIR="${folder}"
			GET_SYSTEM_FOLDER_RESULT="${RESULT}"
			break
		fi
	done
}

function defaultpath() {
	local SYSTEM="${1}"
	local SYSTEM_ORG="${SYSTEM}"
	if [ ${SYSTEM} == "arcade" ]; then
		SYSTEM="_arcade"
	fi
	if [ ${SYSTEM} == "atari2600" ]; then
		SYSTEM="atari7800"
	fi
	if [ ${SYSTEM} == "fds" ]; then
		SYSTEM="nes"
	fi
	if [ ${SYSTEM} == "gb" ]; then
		SYSTEM="gameboy"
	fi
	if [ ${SYSTEM} == "gbc" ]; then
		SYSTEM="gameboy"
	fi
	if [ ${SYSTEM} == "gg" ]; then
		SYSTEM="sms"
	fi
	if [ ${SYSTEM} == "tgfx16cd" ]; then
		SYSTEM="tgfx16-cd"
	fi
	shift

	GET_SYSTEM_FOLDER "${SYSTEM}"
	local SYSTEM_FOLDER="${GET_SYSTEM_FOLDER_RESULT}"
	local GAMESDIR="${GET_SYSTEM_FOLDER_GAMESDIR}"

	if [[ "${SYSTEM_FOLDER}" != "" ]]; then
		eval ${SYSTEM_ORG}"path"="${GAMESDIR}/${GET_SYSTEM_FOLDER_RESULT}"
	fi
}

function init_amigashared_path() {
	if [[ ! -s "${mrsamtmp}/amigashared_path" ]]; then
		var=$(grep shared_folder= ${misterpath}/Mister.ini | sed -e 's/shared_folder=//')
		#samdebug " Grep got ${var}"
		if [ ! -z "${var}" ]; then
			samdebug " Variable is not empty"
			if [ ! -d ${var} ]; then
				samdebug " Variable is not a valid directory"
				if [ "${var: -1}" != "/" ]; then
					samdebug " Variable does not contain / in the last position"
					var=$(echo ${var} | sed 's:/.$::')
				fi
			fi
			if [ -d ${var} ]; then
				samdebug " Variable is a valid directory"
				if [ "${var: -1}" == "/" ]; then
					samdebug " Variable contains / in the last position"
					var="${var::${#var}-1}"
				fi
				samdebug " Setting the amigashared variable"
				amigashared="${var}"
			fi
		#else
			#samdebug " Variable is empty sticking with default"
		fi

		# write to output file
		echo "amigashared=${amigashared}" >"${mrsamtmp}/amigashared_path"
	else
		[[ -s ${mrsamtmp}/amigashared_path ]] && source "${mrsamtmp}/amigashared_path"
		samquiet " Amigashared directory is ${amigashared} "
	fi
}

function samdebug() {
	if [ "${samdebug}" == "yes" ]; then
		if [ "${1}" == "-n" ]; then
			echo -en "\e[1m\e[31m${2-}\e[0m"
		else
			echo -e "\e[1m\e[31m${1-}\e[0m"
		fi
	fi
}

function samquiet() {
	if [ "${samquiet}" == "no" ]; then
		if [ "${1}" == "-n" ]; then
			echo -en "\e[1m\e[32m${2-}\e[0m"
		else
			echo -e "\e[1m\e[32m${1-}\e[0m"
		fi
	fi
}

function samdebug_toggle() {
	if [ ! -z "${2}" ] && ([ "${2}" == "yes" ] || [ "${2}" == "no" ]); then
		samdebug="${2}"
	elif [ "${1}" == "toggle" ]; then
		if [ "${samdebug}" == "yes" ]; then
			samdebug="no"
		elif [ "${samdebug}" == "no" ]; then
			samdebug="yes"
		fi
	fi
}

function samquiet_toggle() {
	if [ ! -z "${2}" ] && ([ "${2}" == "yes" ] || [ "${2}" == "no" ]); then
		samquiet="${2}"
	elif [ "${1}" == "toggle" ]; then
		if [ "${samquiet}" == "yes" ]; then
			samquiet="no"
		elif [ "${samquiet}" == "no" ]; then
			samquiet="yes"
		fi
	fi
}
function printarr() {
	printf "%s\n" "declare -gA ini_settings=("
	declare -n __p="$1"
	for k in "${!__p[@]}"; do
		printf "[%s]=%s\n" "$k" "${__p[$k]}"
	done
	printf "%s\n" ")"
}

function read_samini() {
	# ========= PARSE INI =========
	# Read INI, Check for mount point presence
	while ! test -d ${misterpath}/; do
		sleep 1
		count=$(expr ${count} + 1)
		if test ${count} -eq 30; then
			printf '%s\n' " Mount timed out!"
			exit 1
		fi
	done

	# Setting
	# grep "^[^#;]*=" "${misterscripts}/Super_Attract_Mode.ini" | sed -n "s/^\s*\(\S*\)=\(.*$\)/\1/p" | sed "s/\"//g"
	# Value
	# grep "^[^#;]*=" "${misterscripts}/Super_Attract_Mode.ini" | sed -n "s/^\s*\(\S*\)=\(.*$\)/\2/p" | sed "s/\"//g"
	declare -gA ini_settings=()
	while read line; do
		local setting=$(echo "$line" | grep "^[^#;]*=" | grep -v "exclude=" | sed -n "s/^\s*\(\S*\)=\(.*$\)/\1\n/p" | sed "s/\"//g")
		local value=$(echo "$line" | grep "^[^#;]*=" | grep -v "exclude=" | sed -n "s/^\s*\(\S*\)=\(.*$\)/\2\n/p" | sed "s/\"//g")
		if [ ! -z "$setting" ]; then
			# Remove trailing slash from paths
			if [ "${value: -1}" == "/" ]; then
				value=${value%/}
			fi
			ini_settings[${setting}]="${value:=''}"
		fi
	done <${misterscripts}/Super_Attract_Mode.ini
	# write to output file
	echo $(printarr ini_settings) >"${mrsamtmp}/ini_settings"
}

function init_excludes() {
	# Create folder and file exclusion list
	folderex="-o -iname *\bBIOS\b*"
	fileex="-and -not -iname *\bBIOS\b*"

	# Create file and folder exclusion list for zips. Always exclude BIOS files as a default
	zipex="\bBIOS\b"
}

function startup_tasks() {
	init_vars
	init_excludes
	createfolders
	init_default_paths
	init_amigashared_path
}

function write_to_SAM_cmd_pipe() {
	[[ -p ${SAM_cmd_pipe} ]] && echo "${@}" >${SAM_cmd_pipe}
}

function write_to_TTY_cmd_pipe() {
	[[ -p ${TTY_cmd_pipe} ]] && echo "${@}" >${TTY_cmd_pipe}
}

function write_to_MCP_cmd_pipe() {
	[[ -p ${MCP_cmd_pipe} ]] && echo "${@}" >${MCP_cmd_pipe}
}

function env_check() {
	# Check if we've been installed
	if [ ! -f "${mrsampath}/bin/partun" ] || [ ! -f "${mrsampath}/SuperAttract_MCP" ]; then
		echo " SAM required files not found."
		echo " Surprised? Check your INI."
		sam_update ${1}
		echo " Setup complete."
	fi
}

if [[ ! -s "${mrsamtmp}/ini_settings" ]] && [ "$1" != "stop" ]; then
	echo -n " Please wait while settings are loaded..."
	read_samini
	echo " Done!"
elif [[ -s "${mrsamtmp}/ini_settings" ]]; then
	echo -n " Loading settings from file..."
	source "${mrsamtmp}/ini_settings"
	echo " Done!"
fi

# ======== DEBUG VARIABLES ========
declare -gl samquiet=${ini_settings[samquiet]:="yes"}
declare -gl samdebug=${ini_settings[samdebug]:="no"}
declare -gl samtrace=${ini_settings[samtrace]:="no"}
