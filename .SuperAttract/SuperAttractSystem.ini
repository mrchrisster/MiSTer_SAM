#!/bin/bash

# https://github.com/mrchrisster/MiSTer_SAM/
# Copyright (c) 2021 by mrchrisster and Mellified

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# Description
# This cycles through arcade and console cores periodically
# Games are randomly pulled from their respective folders

# ======== Credits ========
# Original concept and implementation: mrchrisster
# Additional development and script layout: Mellified and Paradox
#
# mbc by pocomane
# partun by woelper
# samindex by wizzo
# tty2oled by venice
#
# Thanks for the contributions and support:
# kaloun34, redsteakraw, RetroDriven, LamerDeluxe, InquisitiveCoder, Sigismond

#!/bin/bash

# https://github.com/mrchrisster/MiSTer_SAM/
# Copyright (c) 2021 by mrchrisster and Mellified

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# Description
# This cycles through arcade and console cores periodically
# Games are randomly pulled from their respective folders

# ======== Credits ========
# Original concept and implementation: mrchrisster
# Additional development and script layout: Mellified and Paradox
#
# mbc by pocomane
# partun by woelper
# samindex by wizzo
# tty2oled by venice
#
# Thanks for the contributions and support:
# kaloun34, redsteakraw, RetroDriven, LamerDeluxe, InquisitiveCoder, Sigismond

# Save our PID and process
declare -g sampid="${$}"
declare -g samprocess=$(basename -- ${0})
declare -g repository_url="https://github.com/mrchrisster/MiSTer_SAM"
declare -g branch="main"

# ======== GLOBAL VARIABLES =========
declare -g mrsamtmp="/tmp/.SAM_tmp"
declare -g userstartup="${misterpath}/linux/user-startup.sh"
declare -g userstartuptpl="${misterpath}/linux/_user-startup.sh"
declare -g gamelistpath="${mrsampath}/SAM_Gamelists"
declare -g gamelistpathtmp="/tmp/.SAM_List"
declare -g excludepath="${mrsampath}/SAM_Excludelists"
declare -g tmpfile="${gamelistpathtmp}/tmpfile"
declare -g tmpfile2="${gamelistpathtmp}/tmpfile2"
declare -g corename_file="/tmp/CORENAME"
declare -g corename_name="printf '%s\n' $(<${corename_file})"
declare -gl corelistall="amiga arcade atari2600 atari5200 atari7800 atarilynx c64 fds gb gbc gba genesis gg megacd neogeo nes s32x sms snes tgfx16 tgfx16cd psx"
declare -gl create_all_gamelists="No"
declare -gl disablebootrom="Yes"
declare -gl mute="Yes"
declare -gl samindex="No"
declare -gl neogeoregion="English"
declare -gl useneogeotitles="Yes"
declare -gl rebuild_freq="Week"
declare -gi regen_duration=4
declare -gi rebuild_freq_int="604800"
declare -gl rebuild_freq_arcade="Week"
declare -gi regen_duration_arcade=1
declare -gi rebuild_freq_amiga_int="604800"
declare -gl rebuild_freq_amiga="Week"
declare -gi regen_duration_amiga=8
declare -gi rebuild_freq_amiga_int="604800"
declare -gi bootsleep="60"

# Named Pipes
declare -g SAM_cmd_pipe="${mrsamtmp}/SAM_cmd_pipe"
declare -g MCP_cmd_pipe="${mrsamtmp}/MCP_cmd_pipe"
declare -g TTY_cmd_pipe="${mrsamtmp}/TTY_cmd_pipe"
declare -g SAM_Activity_pipe="${mrsamtmp}/SAM_Activity_pipe"
declare -g MCP_Activity_pipe="${mrsamtmp}/MCP_Activity_pipe"
declare -g MCP_Corename_Activity_pipe="${mrsamtmp}/MCP_CoreName_Activity_pipe"
declare -g MCP_CoreName_Change_pipe="${mrsamtmp}/MCP_CoreName_Change_pipe"
declare -g MCP_DeviceChange_pipe="${mrsamtmp}/MCP_DeviceChange_pipe"

# ======== DEBUG VARIABLES ========
declare -gl samquiet="Yes"
declare -gl samdebug="No"
declare -gl samtrace="No"
declare -gi speedtest=0

# ======== TTY2OLED =======
declare -gl ttyenable="No"
declare -gi ttyupdate_pause=10
declare -gA tty_currentinfo=(
	[core_pretty]=""
	[name]=""
	[core]=""
	[counter]=0
	[name_scroll]=""
	[name_scroll_position]=0
	[name_scroll_direction]=1
	[update_pause]=${ttyupdate_pause}
)

#======== INI VARIABLES ========
# Change these in the INI file
declare -gl listenmouse="Yes"
declare -gl listenkeyboard="Yes"
declare -gl listenjoy="Yes"
declare -gl menuonly="Yes"
declare -gl usedefaultpaths="Yes"
declare -g amigashared="${CORE_PATH_FINAL[amiga]}/shared"

# ======== BGM =======
declare -gl bgm="No"

function createfolders() {
	# Create folders if they don't exist
	[[ ! -d "${mrsampath}" ]] && mkdir -p "${mrsampath}"
	[[ ! -d "${mrsamtmp}" ]] && mkdir -p "${mrsamtmp}"
	[[ ! -d "${gamelistpath}" ]] && mkdir -p "${gamelistpath}"
	[[ ! -d "${gamelistpathtmp}" ]] && mkdir -p "${gamelistpathtmp}"
	[[ ! -d "${excludepath}" ]] && mkdir -p "${excludepath}"
	[[ ! -d "${mrsamtmp}/SAM_config" ]] && mkdir -p "${mrsamtmp}/SAM_config"
	[[ ! -d "${misterpath}/bootrom" ]] && mkdir -p "${misterpath}/bootrom"
}

function init_vars() {
	# ======== LOCAL VARIABLES ========
	declare -g fake="placeholder"
}

function init_default_path_vars() {
	# ======== CORE PATHS ========
	declare -g amigapath="${misterpath}/Games/Amiga"
	declare -g arcadepath="${misterpath}/_Arcade"
	declare -g atari2600path="${misterpath}/Games/Atari7800"
	declare -g atari5200path="${misterpath}/Games/Atari5200"
	declare -g atari7800path="${misterpath}/Games/Atari7800"
	declare -g atarilynxpath="${misterpath}/Games/AtariLynx"
	declare -g c64path="${misterpath}/Games/C64"
	declare -g fdspath="${misterpath}/Games/NES"
	declare -g gbpath="${misterpath}/Games/Gameboy"
	declare -g gbcpath="${misterpath}/Games/Gameboy"
	declare -g gbapath="${misterpath}/Games/GBA"
	declare -g genesispath="${misterpath}/Games/Genesis"
	declare -g ggpath="${misterpath}/Games/SMS"
	declare -g megacdpath="${misterpath}/Games/MegaCD"
	declare -g neogeopath="${misterpath}/Games/NeoGeo"
	declare -g nespath="${misterpath}/Games/NES"
	declare -g s32xpath="${misterpath}/Games/S32X"
	declare -g smspath="${misterpath}/Games/SMS"
	declare -g snespath="${misterpath}/Games/SNES"
	declare -g tgfx16path="${misterpath}/Games/TGFX16"
	declare -g tgfx16cdpath="${misterpath}/Games/TGFX16-CD"
	declare -g psxpath="${misterpath}/Games/PSX"

	# ======== CORE PATHS EXTRA ========
	declare -g amigapathextra=""
	declare -g arcadepathextra=""
	declare -g atari2600pathextra=""
	declare -g atari5200pathextra=""
	declare -g atari7800pathextra=""
	declare -g atarilynxpathextra=""
	declare -g c64pathextra=""
	declare -g fdspathextra=""
	declare -g gbpathextra=""
	declare -g gbcpathextra=""
	declare -g gbapathextra=""
	declare -g genesispathextra=""
	declare -g ggpathextra=""
	declare -g megacdpathextra=""
	declare -g neogeopathextra=""
	declare -g nespathextra=""
	declare -g s32xpathextra=""
	declare -g smspathextra=""
	declare -g snespathextra=""
	declare -g tgfx16pathextra=""
	declare -g tgfx16cdpathextra=""
	declare -g psxpathextra=""

	# ======== CORE PATHS RBF ========
	declare -g amigapathrbf="_Computer"
	declare -g arcadepathrbf="_Arcade"
	declare -g atari2600pathrbf="_Console"
	declare -g atari5200pathrbf="_Console"
	declare -g atari7800pathrbf="_Console"
	declare -g atarilynxpathrbf="_Console"
	declare -g c64pathrbf="_Computer"
	declare -g fdspathrbf="_Console"
	declare -g gbpathrbf="_Console"
	declare -g gbcpathrbf="_Console"
	declare -g gbapathrbf="_Console"
	declare -g genesispathrbf="_Console"
	declare -g ggpathrbf="_Console"
	declare -g megacdpathrbf="_Console"
	declare -g neogeopathrbf="_Console"
	declare -g nespathrbf="_Console"
	declare -g s32xpathrbf="_Console"
	declare -g smspathrbf="_Console"
	declare -g snespathrbf="_Console"
	declare -g tgfx16pathrbf="_Console"
	declare -g tgfx16cdpathrbf="_Console"
	declare -g psxpathrbf="_Console"
}

function init_default_paths() {
	if [[ ! -s "${mrsamtmp}/default_paths" ]]; then
		# Default rom path search directories
		declare -ga GAMESDIR_FOLDERS=(
			/media/usb7/games
			/media/usb6/games
			/media/usb5/games
			/media/usb4/games
			/media/usb3/games
			/media/usb2/games
			/media/usb1/games
			/media/usb0/games
			${misterpath}/cifs/games
			${misterpath}/games
			/media/usb7
			/media/usb6
			/media/usb5
			/media/usb4
			/media/usb3
			/media/usb2
			/media/usb1
			/media/usb0
			${misterpath}/cifs
			${misterpath}
		)

		declare -g GET_SYSTEM_FOLDER_GAMESDIR=""
		declare -g GET_SYSTEM_FOLDER_RESULT=""
		echo "" | >"${mrsamtmp}/default_paths"
		for core in ${corelistall}; do
			defaultpath "${core}"
			# write to output file
			echo $(declare -p ${core}path | sed 's/declare -- //') >>"${mrsamtmp}/default_paths"
		done
	else
		[[ -s ${mrsamtmp}/default_paths ]] && source "${mrsamtmp}/default_paths"
	fi
}

function GET_SYSTEM_FOLDER() {
	local SYSTEM="${1}"
	for folder in "${GAMESDIR_FOLDERS[@]}"; do
		local RESULT=$(find "${folder}" -maxdepth 1 -iname "${SYSTEM}" -printf "%P\n" -quit 2>/dev/null)
		if [[ "${RESULT}" != "" ]]; then
			GET_SYSTEM_FOLDER_GAMESDIR="${folder}"
			GET_SYSTEM_FOLDER_RESULT="${RESULT}"
			break
		fi
	done
}

function defaultpath() {
	local SYSTEM="${1}"
	local SYSTEM_ORG="${SYSTEM}"
	if [ ${SYSTEM} == "arcade" ]; then
		SYSTEM="_arcade"
	fi
	if [ ${SYSTEM} == "atari2600" ]; then
		SYSTEM="atari7800"
	fi
	if [ ${SYSTEM} == "fds" ]; then
		SYSTEM="nes"
	fi
	if [ ${SYSTEM} == "gb" ]; then
		SYSTEM="gameboy"
	fi
	if [ ${SYSTEM} == "gbc" ]; then
		SYSTEM="gameboy"
	fi
	if [ ${SYSTEM} == "gg" ]; then
		SYSTEM="sms"
	fi
	if [ ${SYSTEM} == "tgfx16cd" ]; then
		SYSTEM="tgfx16-cd"
	fi
	shift

	GET_SYSTEM_FOLDER "${SYSTEM}"
	local SYSTEM_FOLDER="${GET_SYSTEM_FOLDER_RESULT}"
	local GAMESDIR="${GET_SYSTEM_FOLDER_GAMESDIR}"

	if [[ "${SYSTEM_FOLDER}" != "" ]]; then
		eval ${SYSTEM_ORG}"path"="${GAMESDIR}/${GET_SYSTEM_FOLDER_RESULT}"
	fi
}

function init_amigashared_path() {
	if [[ ! -s "${mrsamtmp}/amigashared_path" ]]; then
		var=$(grep shared_folder= ${misterpath}/Mister.ini | sed -e 's/shared_folder=//')
		#samdebug " Grep got ${var}"
		if [ ! -z "${var}" ]; then
			samdebug " Variable is not empty"
			if [ ! -d ${var} ]; then
				samdebug " Variable is not a valid directory"
				if [ "${var: -1}" != "/" ]; then
					samdebug " Variable does not contain / in the last position"
					var=$(echo ${var} | sed 's:/.$::')
				fi
			fi
			if [ -d ${var} ]; then
				samdebug " Variable is a valid directory"
				if [ "${var: -1}" == "/" ]; then
					samdebug " Variable contains / in the last position"
					var="${var::${#var}-1}"
				fi
				samdebug " Setting the amigashared variable"
				amigashared="${var}"
			fi
		#else
			#samdebug " Variable is empty sticking with default"
		fi

		# write to output file
		echo "amigashared=${amigashared}" >"${mrsamtmp}/amigashared_path"
	else
		[[ -s ${mrsamtmp}/amigashared_path ]] && source "${mrsamtmp}/amigashared_path"
		samquiet " Amigashared directory is ${amigashared} "
	fi
}

function samdebug() {
	if [ "${samdebug}" == "yes" ]; then
		if [ "${1}" == "-n" ]; then
			echo -en "\e[1m\e[31m${2-}\e[0m"
		else
			echo -e "\e[1m\e[31m${1-}\e[0m"
		fi
	fi
}

function samquiet() {
	if [ "${samquiet}" == "no" ]; then
		if [ "${1}" == "-n" ]; then
			echo -en "\e[1m\e[32m${2-}\e[0m"
		else
			echo -e "\e[1m\e[32m${1-}\e[0m"
		fi
	fi
}

function samdebug_toggle() {
	if [ ! -z "${2}" ] && ([ "${2}" == "yes" ] || [ "${2}" == "no" ]); then
		samdebug="${2}"
	elif [ "${1}" == "toggle" ]; then
		if [ "${samdebug}" == "yes" ]; then
			samdebug="no"
		elif [ "${samdebug}" == "no" ]; then
			samdebug="yes"
		fi
	fi
}

function samquiet_toggle() {
	if [ ! -z "${2}" ] && ([ "${2}" == "yes" ] || [ "${2}" == "no" ]); then
		samquiet="${2}"
	elif [ "${1}" == "toggle" ]; then
		if [ "${samquiet}" == "yes" ]; then
			samquiet="no"
		elif [ "${samquiet}" == "no" ]; then
			samquiet="yes"
		fi
	fi
}

function read_samini() {
	#========= PARSE INI =========
	# Read INI, Check for mount point presence
	while ! test -d ${misterpath}/; do
		sleep 1
		count=$(expr ${count} + 1)
		if test ${count} -eq 30; then
			printf '%s\n' " Mount timed out!"
			exit 1
		fi
	done

	# Setting
	# grep "^[^#;]*=" "${misterscripts}/Super_Attract_Mode.ini" | sed -n "s/^\s*\(\S*\)=\(.*$\)/\1/p" | sed "s/\"//g"
	# Value
	# grep "^[^#;]*=" "${misterscripts}/Super_Attract_Mode.ini" | sed -n "s/^\s*\(\S*\)=\(.*$\)/\2/p" | sed "s/\"//g"
	source "${misterscripts}/Super_Attract_Mode.ini"
	# Remove trailing slash from paths
	for var in $(grep "^[^#;]" "${misterscripts}/Super_Attract_Mode.ini" | grep "path=" | cut -f1 -d"="); do
		declare -g ${var}="${!var%/}"
	done
	for var in $(grep "^[^#;]" "${misterscripts}/Super_Attract_Mode.ini" | grep "pathextra=" | cut -f1 -d"="); do
		declare -g ${var}="${!var%/}"
	done
	for var in $(grep "^[^#;]" "${misterscripts}/Super_Attract_Mode.ini" | grep "pathrbf=" | cut -f1 -d"="); do
		declare -g ${var}="${!var%/}"
	done
}

function init_excludes() {
	# Create array of coreexclude list names
	declare -a coreexcludelist
	for excore in ${corelistall}; do
		coreexcludelist+=("${excore}exclude")
	done

	# Iterate through coreexclude lists and make list into array
	for excludelist in ${coreexcludelist[@]}; do
		readarray -t ${excludelist} <<<${!excludelist}
	done

	# Create folder and file exclusion list
	folderex=$(for f in "${exclude[@]}"; do echo "-o -iname *${f}*"; done)
	fileex=$(for f in "${exclude[@]}"; do echo "-and -not -iname *${f}*"; done)

	# Create file and folder exclusion list for zips. Always exclude BIOS files as a default
	zipex=$(printf "%s," "${exclude[@]}" && echo "bios")
}

function startup_tasks() {
	init_vars
	init_default_path_vars
	read_samini
	init_excludes
	createfolders
	init_default_paths
	init_amigashared_path
}

function write_to_SAM_cmd_pipe() {
	[[ -p ${SAM_cmd_pipe} ]] && echo "${@}" >${SAM_cmd_pipe}
}

function write_to_TTY_cmd_pipe() {
	[[ -p ${TTY_cmd_pipe} ]] && echo "${@}" >${TTY_cmd_pipe}
}

function write_to_MCP_cmd_pipe() {
	[[ -p ${MCP_cmd_pipe} ]] && echo "${@}" >${MCP_cmd_pipe}
}

function env_check() {
	# Check if we've been installed
	if [ ! -f "${mrsampath}/bin/partun" ] || [ ! -f "${mrsampath}/SuperAttract_MCP" ]; then
		echo " SAM required files not found."
		echo " Surprised? Check your INI."
		sam_update ${1}
		echo " Setup complete."
	fi
}

