#!/bin/bash
#trap "" HUP
#trap "" TERM

#======== INI VARIABLES ========
# Change these in the INI file
#set -x
#======== GLOBAL VARIABLES =========
declare -g mrsampath="/media/fat/Scripts/.MiSTer_SAM"
declare -g misterpath="/media/fat"
declare -g gamelistpath="${mrsampath}/SAM_Gamelists"
declare -g gamelistpathtmp="/tmp/.SAM_List"
declare -g tmpfilefilter="/tmp/.SAM_List/tmpfilefilter"
declare -g tmpfile="/tmp/.SAM_List/tmpfile"
declare -g tmpfile2="/tmp/.SAM_List/tmpfile2"
declare -g saminit_log="/tmp/saminit.log"
declare -gl kids_safe

#======== DEBUG VARIABLES ========
samquiet="Yes"

# Kill running process
pids=$(pidof -o $$ $(basename -- ${0}))
if [ ! -z "pids" ]; then
	echo -n " Removing other instances of $(basename -- ${0})..."
	kill -9 ${pids} &>/dev/null
	wait ${pids} &>/dev/null
	echo " Done!"
fi

# Kill old activity processes
echo -n " Stopping activity monitoring..."
killall -q -9 MiSTer_SAM_joy.py 2>/dev/null
killall -q -9 MiSTer_SAM_mouse.py 2>/dev/null
killall -q -9 MiSTer_SAM_keyboard.py 2>/dev/null
kill -9 $(ps -o pid,args | grep "inotifywait" | grep "SAM_Joy_Change" | { read -r PID COMMAND; echo $PID; }) 2>/dev/null
echo " Done!"

#========= PARSE INI =========
# Read INI, Check for mount point presence
while ! test -d /media/fat/
do
	sleep 1
	count=`expr $count + 1`
	if test $count -eq 30; then
		echo " Mount timed out!"
      		exit 1
 		fi
done

if [ -f "${misterpath}/Scripts/MiSTer_SAM.ini" ]; then
	source "${misterpath}/Scripts/MiSTer_SAM.ini"
	source "${misterpath}/Scripts/MiSTer_SAM_on.sh --source-only"
	IFS=',' read -ra corelist <<< "${corelist}"
	IFS=',' read -ra corelistall <<< "${corelistall}"
fi

#========= PREP =========
mkdir -p "${gamelistpathtmp}"

#======== Functions ========
function start() {
	#======== Start ========
	echo -n " Starting SAM..."
	${misterpath}/Scripts/MiSTer_SAM_on.sh bootstart
}

function stop() {
	echo -n " Stopping SAM MCP..."
	pids=$(pidof MiSTer_SAM_MCP)
	if [ ! -z "${pids}" ]; then
		kill -9 ${pids} &>/dev/null
		wait ${pids} &>/dev/null
	fi
	echo " Done!"

	echo -n " Stopping SAM..."
	pids=$(pidof MiSTer_SAM_on.sh)
	if [ ! -z "${pids}" ]; then
		kill -9 ${pids} &>/dev/null
		wait ${pids} &>/dev/null
	fi
	echo " Done!"
}

function gl_filter() {
	# Create temp gamelists on startup
	if [ "${kids_safe}" == "yes" ]; then
		echo "Kids Safe Mode active."
		if [ ! -f "${mrsampath}"/SAM_Rated/amiga_rated.txt ]; then
			echo "No kids safe rating lists found."
			return 1
		fi
		#Set corelist to only include cores with rated lists
		readarray -t glr <<< "$(find "${mrsampath}/SAM_Rated" -name "*_rated.txt" | awk -F'/' '{ print $NF }' | awk -F'_' '{print$1}')"
		unset glondisk
		for g in "${glr[@]}"; do 
			for c in "${corelist[@]}"; do 
				if [[ "$c" == "$g" ]]; then 
					glondisk+=("$c")
				fi
			done 
		done
	else
		readarray -t glondisk <<< "$(find "${gamelistpath}" -name "*_gamelist.txt" | awk -F'/' '{ print $NF }' | awk -F'_' '{print$1}')"
	fi

	if [[ "${glondisk[*]}" != *"arcade"* ]]; then	
		"${mrsampath}"/samindex -s arcade -o "${gamelistpath}"
	fi

	if [ $? -gt 1 ]; then
		echo "Couldn't find Arcade games. Please run update_all.sh first or add some Arcade games manually."
		sleep 5
		exit
	fi
	
	# Read all gamelists again in case arcade was missing
	if [[ ! "${glondisk[*]}" ]]; then
		unset glondisk
		readarray -t glondisk <<< "$(find "${gamelistpath}" -name "*_gamelist.txt" | awk -F'/' '{ print $NF }' | awk -F'_' '{print$1}')"
	fi

	for g in "${glondisk[@]}"; do 
		if [ "${g}" == "amiga" ]; then
			echo "Amiga will be processed in main script"
		fi
		if [ ! -s "${gamelistpathtmp}/${g}_gamelist.txt" ]; then	
			cp "${gamelistpath}/${g}_gamelist.txt" "${gamelistpathtmp}/${g}_gamelist.txt" 
		fi
		#function sourced from MiSTer_SAM_on.sh
		filter_list "${g}"
	done
}




#======== DEBUG OUTPUT =========
if [ "${samquiet,,}" == "no" ]; then
	echo "********************************************************************************"
	#======== GLOBAL VARIABLES =========
	echo " mrsampath: ${mrsampath}"
	echo " misterpath: ${misterpath}"
	#======== LOCAL VARIABLES ========
	echo " samtimeout: ${samtimeout}"
	echo " menuonly: ${menuonly}"
	echo "********************************************************************************"
fi

# Start Gamelist filter
gl_filter &

# Parse command line
case "${1,,}" in
    start)
        start
        ;;
    quickstart)
    		quickstart
    		;;    	
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo " Usage: /media/fat/Scripts/.MiSTer_SAM/MiSTer_SAM_init {start|stop|restart}"
        exit 1
        ;;
esac
exit 0
